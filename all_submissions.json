[{"id": 1363984763, "question_id": 1, "lang": "cpp", "lang_name": "C++", "time": "1\u00c3\u201a\u00c2\u00a0day, 21\u00c3\u201a\u00c2\u00a0hours", "timestamp": 1724276934, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1363984763/", "is_pending": "Not Pending", "title": "Two Sum", "memory": "14.2 MB", "code": "\nclass Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        unordered_map<int, int> num_map;\n        for (int i = 0; i < nums.size(); i++) {\n            int complement = target - nums[i];\n            if (num_map.find(complement) != num_map.end()) {\n                return {num_map[complement], i};\n            }\n            num_map[nums[i]] = i;\n        }\n        return {};\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111", "title_slug": "two-sum", "has_notes": false, "flag_type": 1}, {"id": 1363984561, "question_id": 9, "lang": "cpp", "lang_name": "C++", "time": "1\u00c3\u201a\u00c2\u00a0day, 21\u00c3\u201a\u00c2\u00a0hours", "timestamp": 1724276913, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1363984561/", "is_pending": "Not Pending", "title": "Palindrome Number", "memory": "8.4 MB", "code": "\nclass Solution {\npublic:\n    bool isPalindrome(int x) {\n        if(x < 0 || (x % 10 == 0 && x != 0)) {\n            return false;\n        }\n        \n        int revertedNumber = 0;\n        while(x > revertedNumber) {\n            revertedNumber = revertedNumber * 10 + x % 10;\n            x /= 10;\n        }\n        \n        return x == revertedNumber || x == revertedNumber/10;\n    }\n};\n", "compare_resulttitle_slug": "palindrome-number", "has_notes": false, "flag_type": 1}, {"id": 1363984380, "question_id": 13, "lang": "cpp", "lang_name": "C++", "time": "1\u00c3\u201a\u00c2\u00a0day, 21\u00c3\u201a\u00c2\u00a0hours", "timestamp": 1724276895, "status": 10, "status_display": "Accepted", "runtime": "12 ms", "url": "/submissions/detail/1363984380/", "is_pending": "Not Pending", "title": "Roman to Integer", "memory": "13 MB", "code": "\nclass Solution {\npublic:\n    int romanToInt(string s) {\n        unordered_map<char, int> roman = {{'I', 1}, {'V', 5}, {'X', 10}, {'L', 50}, {'C', 100}, {'D', 500}, {'M', 1000}};\n        int total = 0;\n        for(int i = 0; i < s.length(); i++){\n            if(i > 0 && roman[s[i]] > roman[s[i-1]]) {\n                total += roman[s[i]] - 2 * roman[s[i-1]];\n            } else {\n                total += roman[s[i]];\n            }\n        }\n        return total;\n    }\n};\n", "compare_resulttitle_slug": "roman-to-integer", "has_notes": false, "flag_type": 1}, {"id": 1363984170, "question_id": 14, "lang": "cpp", "lang_name": "C++", "time": "1\u00c3\u201a\u00c2\u00a0day, 21\u00c3\u201a\u00c2\u00a0hours", "timestamp": 1724276873, "status": 10, "status_display": "Accepted", "runtime": "7 ms", "url": "/submissions/detail/1363984170/", "is_pending": "Not Pending", "title": "Longest Common Prefix", "memory": "11.1 MB", "code": "\nclass Solution {\npublic:\n    string longestCommonPrefix(vector<string>& strs) {\n        if(strs.empty()) return \"\";\n        for(int j = 0; j < strs[0].size(); ++j)\n            for(int i = 1; i < strs.size(); ++i)\n                if(j >= strs[i].size() || strs[i][j] != strs[0][j])\n                    return strs[0].substr(0, j);\n        return strs[0];\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "longest-common-prefix", "has_notes": false, "flag_type": 1}, {"id": 1363983998, "question_id": 20, "lang": "cpp", "lang_name": "C++", "time": "1\u00c3\u201a\u00c2\u00a0day, 21\u00c3\u201a\u00c2\u00a0hours", "timestamp": 1724276855, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1363983998/", "is_pending": "Not Pending", "title": "Valid Parentheses", "memory": "7.8 MB", "code": "\nclass Solution {\npublic:\n    bool isValid(string s) {\n        stack<char> st;\n        for(char c : s) {\n            switch(c) {\n                case '(':\n                case '{':\n                case '[': st.push(c); break;\n                case ')': if(st.empty() || st.top()!='(') return false; else st.pop(); break;\n                case '}': if(st.empty() || st.top()!='{') return false; else st.pop(); break;\n                case ']': if(st.empty() || st.top()!='[') return false; else st.pop(); break;\n                default: ; // pass\n            }\n        }\n        return st.empty();\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "valid-parentheses", "has_notes": false, "flag_type": 1}, {"id": 1363983787, "question_id": 21, "lang": "cpp", "lang_name": "C++", "time": "1\u00c3\u201a\u00c2\u00a0day, 21\u00c3\u201a\u00c2\u00a0hours", "timestamp": 1724276830, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1363983787/", "is_pending": "Not Pending", "title": "Merge Two Sorted Lists", "memory": "19.8 MB", "code": "\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\n        if(list1 == nullptr) {\n            return list2;\n        }\n        if(list2 == nullptr) {\n            return list1;\n        }\n        \n        ListNode* mergedHead = nullptr;\n        if(list1->val < list2->val) {\n            mergedHead = list1;\n            list1 = list1->next;\n        } else {\n            mergedHead = list2;\n            list2 = list2->next;\n        }\n        \n        ListNode* current = mergedHead;\n        while(list1 != nullptr && list2 != nullptr) {\n            if(list1->val < list2->val) {\n                current->next = list1;\n                list1 = list1->next;\n            } else {\n                current->next = list2;\n                list2 = list2->next;\n            }\n            current = current->next;\n        }\n        \n        if(list1 != nullptr) {\n            current->next = list1;\n        } else {\n            current->next = list2;\n        }\n        \n        return mergedHead;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "merge-two-sorted-lists", "has_notes": false, "flag_type": 1}, {"id": 1363983480, "question_id": 26, "lang": "cpp", "lang_name": "C++", "time": "1\u00c3\u201a\u00c2\u00a0day, 21\u00c3\u201a\u00c2\u00a0hours", "timestamp": 1724276795, "status": 10, "status_display": "Accepted", "runtime": "11 ms", "url": "/submissions/detail/1363983480/", "is_pending": "Not Pending", "title": "Remove Duplicates from Sorted Array", "memory": "21.3 MB", "code": "\nclass Solution {\npublic:\n    int removeDuplicates(vector<int>& nums) {\n        if(nums.size() == 0) return 0;\n        int i = 0;\n        for(int j = 1; j < nums.size(); j++){\n            if(nums[j] != nums[i]){\n                i++;\n                nums[i] = nums[j];\n            }\n        }\n        return i + 1;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "remove-duplicates-from-sorted-array", "has_notes": false, "flag_type": 1}, {"id": 1363983269, "question_id": 27, "lang": "cpp", "lang_name": "C++", "time": "1\u00c3\u201a\u00c2\u00a0day, 21\u00c3\u201a\u00c2\u00a0hours", "timestamp": 1724276773, "status": 10, "status_display": "Accepted", "runtime": "5 ms", "url": "/submissions/detail/1363983269/", "is_pending": "Not Pending", "title": "Remove Element", "memory": "10.8 MB", "code": "\nclass Solution {\npublic:\n    int removeElement(vector<int>& nums, int val) {\n        int k = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums[i] != val) {\n                nums[k] = nums[i];\n                k++;\n            }\n        }\n        return k;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "remove-element", "has_notes": false, "flag_type": 1}, {"id": 1363983109, "question_id": 28, "lang": "cpp", "lang_name": "C++", "time": "1\u00c3\u201a\u00c2\u00a0day, 21\u00c3\u201a\u00c2\u00a0hours", "timestamp": 1724276755, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1363983109/", "is_pending": "Not Pending", "title": "Find the Index of the First Occurrence in a String", "memory": "8.3 MB", "code": "\nclass Solution {\npublic:\n    int strStr(string haystack, string needle) {\n        if (needle.empty()) return 0;\n        if (haystack.size() < needle.size()) return -1;\n        \n        for (int i = 0; i <= haystack.size() - needle.size(); i++) {\n            if (haystack.substr(i, needle.size()) == needle) {\n                return i;\n            }\n        }\n        return -1;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "find-the-index-of-the-first-occurrence-in-a-string", "has_notes": false, "flag_type": 1}, {"id": 1363982947, "question_id": 35, "lang": "cpp", "lang_name": "C++", "time": "1\u00c3\u201a\u00c2\u00a0day, 21\u00c3\u201a\u00c2\u00a0hours", "timestamp": 1724276737, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1363982947/", "is_pending": "Not Pending", "title": "Search Insert Position", "memory": "12.4 MB", "code": "\nclass Solution {\npublic:\n    int searchInsert(vector<int>& nums, int target) {\n        int left = 0;\n        int right = nums.size() - 1;\n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            if (nums[mid] == target) {\n                return mid;\n            } else if (nums[mid] < target) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return left;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111", "title_slug": "search-insert-position", "has_notes": false, "flag_type": 1}, {"id": 1363982700, "question_id": 58, "lang": "cpp", "lang_name": "C++", "time": "1\u00c3\u201a\u00c2\u00a0day, 21\u00c3\u201a\u00c2\u00a0hours", "timestamp": 1724276711, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1363982700/", "is_pending": "Not Pending", "title": "Length of Last Word", "memory": "7.9 MB", "code": "\nclass Solution {\npublic:\n    int lengthOfLastWord(string s) {\n        int length = 0;\n        int tail = s.length() - 1;\n        while (tail >= 0 && s[tail] == ' ') tail--;\n        while (tail >= 0 && s[tail] != ' ') {\n            length++;\n            tail--;\n        }\n        return length;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111", "title_slug": "length-of-last-word", "has_notes": false, "flag_type": 1}, {"id": 1363982528, "question_id": 66, "lang": "cpp", "lang_name": "C++", "time": "1\u00c3\u201a\u00c2\u00a0day, 21\u00c3\u201a\u00c2\u00a0hours", "timestamp": 1724276692, "status": 10, "status_display": "Accepted", "runtime": "2 ms", "url": "/submissions/detail/1363982528/", "is_pending": "Not Pending", "title": "Plus One", "memory": "10.4 MB", "code": "\nclass Solution {\npublic:\n    vector<int> plusOne(vector<int>& digits) {\n        int n = digits.size();\n        for(int i=n-1; i>=0; i--) {\n            if(digits[i] == 9) {\n                digits[i] = 0;\n            }\n            else {\n                digits[i]++;\n                return digits;\n            }\n        }\n        digits.insert(digits.begin(), 1);\n        return digits;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "plus-one", "has_notes": false, "flag_type": 1}, {"id": 1363982347, "question_id": 67, "lang": "cpp", "lang_name": "C++", "time": "1\u00c3\u201a\u00c2\u00a0day, 21\u00c3\u201a\u00c2\u00a0hours", "timestamp": 1724276672, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1363982347/", "is_pending": "Not Pending", "title": "Add Binary", "memory": "10.3 MB", "code": "\nclass Solution {\npublic:\n    string addBinary(string a, string b) {\n        string result = \"\";\n        int i = a.size() - 1;\n        int j = b.size() - 1;\n        int carry = 0;\n        while(i >= 0 || j >= 0) {\n            int sum = carry;\n            if(i >= 0) sum += a[i--] - '0';\n            if(j >= 0) sum += b[j--] - '0';\n            carry = sum > 1 ? 1 : 0;\n            result += to_string(sum%2);\n        }\n        if(carry) result += to_string(carry);\n        reverse(result.begin(), result.end());\n        return result;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "add-binary", "has_notes": false, "flag_type": 1}, {"id": 1363982140, "question_id": 69, "lang": "cpp", "lang_name": "C++", "time": "1\u00c3\u201a\u00c2\u00a0day, 21\u00c3\u201a\u00c2\u00a0hours", "timestamp": 1724276649, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1363982140/", "is_pending": "Not Pending", "title": "Sqrt(x)", "memory": "8.2 MB", "code": "\nclass Solution {\npublic:\n    int mySqrt(int x) {\n        if (x == 0) return 0;\n        int left = 1, right = x;\n        while (true) {\n            int mid = left + (right - left)/2;\n            if (mid > x/mid) {\n                right = mid - 1;\n            } else {\n                if (mid + 1 > x/(mid + 1))\n                    return mid;\n                left = mid + 1;\n            }\n        }\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "sqrtx", "has_notes": false, "flag_type": 1}, {"id": 1363981902, "question_id": 70, "lang": "cpp", "lang_name": "C++", "time": "1\u00c3\u201a\u00c2\u00a0day, 21\u00c3\u201a\u00c2\u00a0hours", "timestamp": 1724276622, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1363981902/", "is_pending": "Not Pending", "title": "Climbing Stairs", "memory": "7.2 MB", "code": "\nclass Solution {\npublic:\n    int climbStairs(int n) {\n        if(n == 1) {\n            return 1;\n        }\n        int first = 1;\n        int second = 2;\n        for(int i = 3; i <= n; i++) {\n            int third = first + second;\n            first = second;\n            second = third;\n        }\n        return second;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111", "title_slug": "climbing-stairs", "has_notes": false, "flag_type": 1}, {"id": 1363981684, "question_id": 83, "lang": "cpp", "lang_name": "C++", "time": "1\u00c3\u201a\u00c2\u00a0day, 21\u00c3\u201a\u00c2\u00a0hours", "timestamp": 1724276601, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1363981684/", "is_pending": "Not Pending", "title": "Remove Duplicates from Sorted List", "memory": "16.6 MB", "code": "\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* deleteDuplicates(ListNode* head) {\n        if (head == nullptr || head->next == nullptr) {\n            return head;\n        }\n        \n        ListNode* current = head;\n        \n        while (current != nullptr && current->next != nullptr) {\n            if (current->next->val == current->val) {\n                ListNode* temp = current->next;\n                current->next = current->next->next;\n                delete temp;\n            } else {\n                current = current->next;\n            }\n        }\n        \n        return head;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "remove-duplicates-from-sorted-list", "has_notes": false, "flag_type": 1}, {"id": 1363981468, "question_id": 88, "lang": "cpp", "lang_name": "C++", "time": "1\u00c3\u201a\u00c2\u00a0day, 21\u00c3\u201a\u00c2\u00a0hours", "timestamp": 1724276577, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1363981468/", "is_pending": "Not Pending", "title": "Merge Sorted Array", "memory": "11.3 MB", "code": "\nclass Solution {\npublic:\n    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {\n        int i = m - 1;\n        int j = n - 1;\n        int k = m + n - 1;\n        \n        while (j >= 0) {\n            if (i >= 0 && nums1[i] > nums2[j]) {\n                nums1[k] = nums1[i];\n                i--;\n            } else {\n                nums1[k] = nums2[j];\n                j--;\n            }\n            k--;\n        }\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111", "title_slug": "merge-sorted-array", "has_notes": false, "flag_type": 1}, {"id": 1363981314, "question_id": 94, "lang": "cpp", "lang_name": "C++", "time": "1\u00c3\u201a\u00c2\u00a0day, 21\u00c3\u201a\u00c2\u00a0hours", "timestamp": 1724276560, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1363981314/", "is_pending": "Not Pending", "title": "Binary Tree Inorder Traversal", "memory": "10.2 MB", "code": "\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> inorderTraversal(TreeNode* root) {\n        vector<int> result;\n        stack<TreeNode*> stk;\n        TreeNode* curr = root;\n        \n        while (curr != nullptr || !stk.empty()) {\n            while (curr != nullptr) {\n                stk.push(curr);\n                curr = curr->left;\n            }\n            curr = stk.top();\n            stk.pop();\n            result.push_back(curr->val);\n            curr = curr->right;\n        }\n        \n        return result;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "binary-tree-inorder-traversal", "has_notes": false, "flag_type": 1}, {"id": 1363981084, "question_id": 100, "lang": "cpp", "lang_name": "C++", "time": "1\u00c3\u201a\u00c2\u00a0day, 21\u00c3\u201a\u00c2\u00a0hours", "timestamp": 1724276537, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1363981084/", "is_pending": "Not Pending", "title": "Same Tree", "memory": "12.2 MB", "code": "\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isSameTree(TreeNode* p, TreeNode* q) {\n        // if both are null\n        if (p == nullptr && q == nullptr) return true;\n        // one of them is null\n        if (p == nullptr || q == nullptr) return false;\n        // values are different\n        if (p->val != q->val) return false;\n        // recursively check left and right subtrees\n        return isSameTree(p->left, q->left) && isSameTree(p->right, q->right);\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "same-tree", "has_notes": false, "flag_type": 1}, {"id": 1363980844, "question_id": 101, "lang": "cpp", "lang_name": "C++", "time": "1\u00c3\u201a\u00c2\u00a0day, 21\u00c3\u201a\u00c2\u00a0hours", "timestamp": 1724276513, "status": 10, "status_display": "Accepted", "runtime": "6 ms", "url": "/submissions/detail/1363980844/", "is_pending": "Not Pending", "title": "Symmetric Tree", "memory": "17.6 MB", "code": "\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isSymmetric(TreeNode* root) {\n        if(root == NULL) return true;\n        return isMirror(root->left, root->right);\n    }\n    \n    bool isMirror(TreeNode* t1, TreeNode* t2) {\n        if(t1 == NULL && t2 == NULL) return true;\n        if(t1 == NULL || t2 == NULL) return false;\n        return (t1->val == t2->val) && isMirror(t1->right, t2->left) && isMirror(t1->left, t2->right);\n    }\n    \n    bool isSymmetricIterative(TreeNode* root) {\n        queue<TreeNode*> q;\n        q.push(root);\n        q.push(root);\n        while(!q.empty()) {\n            TreeNode* t1 = q.front();\n            q.pop();\n            TreeNode* t2 = q.front();\n            q.pop();\n            if(t1 == NULL && t2 == NULL) continue;\n            if(t1 == NULL || t2 == NULL) return false;\n            if(t1->val != t2->val) return false;\n            q.push(t1->left);\n            q.push(t2->right);\n            q.push(t1->right);\n            q.push(t2->left);\n        }\n        return true;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "symmetric-tree", "has_notes": false, "flag_type": 1}, {"id": 1363980409, "question_id": 104, "lang": "cpp", "lang_name": "C++", "time": "1\u00c3\u201a\u00c2\u00a0day, 21\u00c3\u201a\u00c2\u00a0hours", "timestamp": 1724276467, "status": 10, "status_display": "Accepted", "runtime": "4 ms", "url": "/submissions/detail/1363980409/", "is_pending": "Not Pending", "title": "Maximum Depth of Binary Tree", "memory": "17.7 MB", "code": "\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int maxDepth(TreeNode* root) {\n        if (root == nullptr) {\n            return 0;\n        }\n        return max(maxDepth(root->left), maxDepth(root->right)) + 1;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111", "title_slug": "maximum-depth-of-binary-tree", "has_notes": false, "flag_type": 1}, {"id": 1363980208, "question_id": 108, "lang": "cpp", "lang_name": "C++", "time": "1\u00c3\u201a\u00c2\u00a0day, 21\u00c3\u201a\u00c2\u00a0hours", "timestamp": 1724276445, "status": 10, "status_display": "Accepted", "runtime": "11 ms", "url": "/submissions/detail/1363980208/", "is_pending": "Not Pending", "title": "Convert Sorted Array to Binary Search Tree", "memory": "22.3 MB", "code": "\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\n        return constructBSTFromSortedArray(nums, 0, nums.size() - 1);\n    }\n\nprivate:\n    TreeNode* constructBSTFromSortedArray(vector<int>& nums, int left, int right) {\n        if (left > right) {\n            return nullptr;\n        }\n\n        int mid = left + (right - left) / 2;\n        TreeNode* node = new TreeNode(nums[mid]);\n        node->left = constructBSTFromSortedArray(nums, left, mid - 1);\n        node->right = constructBSTFromSortedArray(nums, mid + 1, right);\n\n        return node;\n    }\n};\n", "compare_result": "1111111111111111111111111111111", "title_slug": "convert-sorted-array-to-binary-search-tree", "has_notes": false, "flag_type": 1}, {"id": 1363979991, "question_id": 110, "lang": "cpp", "lang_name": "C++", "time": "1\u00c3\u201a\u00c2\u00a0day, 21\u00c3\u201a\u00c2\u00a0hours", "timestamp": 1724276420, "status": 10, "status_display": "Accepted", "runtime": "12 ms", "url": "/submissions/detail/1363979991/", "is_pending": "Not Pending", "title": "Balanced Binary Tree", "memory": "21.9 MB", "code": "\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isBalanced(TreeNode* root) {\n        return height(root) != -1;\n    }\n    \nprivate:\n    int height(TreeNode* node) {\n        if (node == nullptr) {\n            return 0;\n        }\n        \n        int leftHeight = height(node->left);\n        int rightHeight = height(node->right);\n        \n        if (leftHeight == -1 || rightHeight == -1 || abs(leftHeight - rightHeight) > 1) {\n            return -1;\n        }\n        \n        return max(leftHeight, rightHeight) + 1;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "balanced-binary-tree", "has_notes": false, "flag_type": 1}, {"id": 1363979723, "question_id": 111, "lang": "cpp", "lang_name": "C++", "time": "1\u00c3\u201a\u00c2\u00a0day, 21\u00c3\u201a\u00c2\u00a0hours", "timestamp": 1724276390, "status": 10, "status_display": "Accepted", "runtime": "183 ms", "url": "/submissions/detail/1363979723/", "is_pending": "Not Pending", "title": "Minimum Depth of Binary Tree", "memory": "145.1 MB", "code": "\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int minDepth(TreeNode* root) {\n        if (root == nullptr) {\n            return 0;\n        }\n        if (root->left == nullptr && root->right == nullptr) {\n            return 1;\n        }\n        int min_depth = INT_MAX;\n        if (root->left != nullptr) {\n            min_depth = min(minDepth(root->left), min_depth);\n        }\n        if (root->right != nullptr) {\n            min_depth = min(minDepth(root->right), min_depth);\n        }\n        return min_depth + 1;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111", "title_slug": "minimum-depth-of-binary-tree", "has_notes": false, "flag_type": 1}, {"id": 1363979463, "question_id": 112, "lang": "cpp", "lang_name": "C++", "time": "1\u00c3\u201a\u00c2\u00a0day, 21\u00c3\u201a\u00c2\u00a0hours", "timestamp": 1724276362, "status": 10, "status_display": "Accepted", "runtime": "10 ms", "url": "/submissions/detail/1363979463/", "is_pending": "Not Pending", "title": "Path Sum", "memory": "20 MB", "code": "\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool hasPathSum(TreeNode* root, int targetSum) {\n        if(root == nullptr) {\n            return false;\n        }\n        if(root->val == targetSum && root->left == nullptr && root->right == nullptr) {\n            return true;\n        }\n        return hasPathSum(root->left, targetSum - root->val) || hasPathSum(root->right, targetSum - root->val);\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "path-sum", "has_notes": false, "flag_type": 1}, {"id": 1363979195, "question_id": 118, "lang": "cpp", "lang_name": "C++", "time": "1\u00c3\u201a\u00c2\u00a0day, 21\u00c3\u201a\u00c2\u00a0hours", "timestamp": 1724276333, "status": 10, "status_display": "Accepted", "runtime": "4 ms", "url": "/submissions/detail/1363979195/", "is_pending": "Not Pending", "title": "Pascal's Triangle", "memory": "8.2 MB", "code": "\nclass Solution {\npublic:\n    vector<vector<int>> generate(int numRows) {\n        vector<vector<int>> result(numRows);\n        \n        for(int i = 0; i < numRows; i++) {\n            result[i].resize(i + 1);\n            result[i][0] = result[i][i] = 1;\n            \n            for(int j = 1; j < i; j++) {\n                result[i][j] = result[i - 1][j - 1] + result[i - 1][j];\n            }\n        }\n        \n        return result;\n    }\n};\n", "compare_result": "111111111111111111111111111111", "title_slug": "pascals-triangle", "has_notes": false, "flag_type": 1}, {"id": 1363978993, "question_id": 119, "lang": "cpp", "lang_name": "C++", "time": "1\u00c3\u201a\u00c2\u00a0day, 21\u00c3\u201a\u00c2\u00a0hours", "timestamp": 1724276313, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1363978993/", "is_pending": "Not Pending", "title": "Pascal's Triangle II", "memory": "7.8 MB", "code": "\nclass Solution {\npublic:\n    vector<int> getRow(int rowIndex) {\n        vector<int> row(rowIndex+1, 0);\n        row[0] = 1;\n        for(int i=1; i<=rowIndex; i++){\n            for(int j=i; j>0; j--){\n                row[j] += row[j-1];\n            }\n        }\n        return row;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111", "title_slug": "pascals-triangle-ii", "has_notes": false, "flag_type": 1}, {"id": 1363978777, "question_id": 121, "lang": "cpp", "lang_name": "C++", "time": "1\u00c3\u201a\u00c2\u00a0day, 21\u00c3\u201a\u00c2\u00a0hours", "timestamp": 1724276289, "status": 10, "status_display": "Accepted", "runtime": "95 ms", "url": "/submissions/detail/1363978777/", "is_pending": "Not Pending", "title": "Best Time to Buy and Sell Stock", "memory": "96.3 MB", "code": "\nclass Solution {\npublic:\n    int maxProfit(vector<int>& prices) {\n        int minPrice = INT_MAX;\n        int maxProfit = 0;\n        for (int i = 0; i < prices.size(); i++) {\n            if (prices[i] < minPrice)\n                minPrice = prices[i];\n            else if (prices[i] - minPrice > maxProfit)\n                maxProfit = prices[i] - minPrice;\n        }\n        return maxProfit;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "best-time-to-buy-and-sell-stock", "has_notes": false, "flag_type": 1}, {"id": 1363978597, "question_id": 125, "lang": "cpp", "lang_name": "C++", "time": "1\u00c3\u201a\u00c2\u00a0day, 21\u00c3\u201a\u00c2\u00a0hours", "timestamp": 1724276271, "status": 10, "status_display": "Accepted", "runtime": "6 ms", "url": "/submissions/detail/1363978597/", "is_pending": "Not Pending", "title": "Valid Palindrome", "memory": "8.7 MB", "code": "\nclass Solution {\npublic:\n    bool isPalindrome(string s) {\n        int start = 0, end = s.size() - 1;\n        while (start < end) {\n            // Skip non-alphanumeric characters\n            while (start < end && !isalnum(s[start])) {\n                start++;\n            }\n            while (start < end && !isalnum(s[end])) {\n                end--;\n            }\n            // Compare characters\n            if (tolower(s[start]) != tolower(s[end])) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n        return true;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "valid-palindrome", "has_notes": false, "flag_type": 1}, {"id": 1363978361, "question_id": 136, "lang": "cpp", "lang_name": "C++", "time": "1\u00c3\u201a\u00c2\u00a0day, 21\u00c3\u201a\u00c2\u00a0hours", "timestamp": 1724276247, "status": 10, "status_display": "Accepted", "runtime": "11 ms", "url": "/submissions/detail/1363978361/", "is_pending": "Not Pending", "title": "Single Number", "memory": "19.6 MB", "code": "\nclass Solution {\npublic:\n    int singleNumber(vector<int>& nums) {\n        int result = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            result ^= nums[i];\n        }\n        return result;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111", "title_slug": "single-number", "has_notes": false, "flag_type": 1}, {"id": 1363978191, "question_id": 141, "lang": "cpp", "lang_name": "C++", "time": "1\u00c3\u201a\u00c2\u00a0day, 21\u00c3\u201a\u00c2\u00a0hours", "timestamp": 1724276228, "status": 10, "status_display": "Accepted", "runtime": "8 ms", "url": "/submissions/detail/1363978191/", "is_pending": "Not Pending", "title": "Linked List Cycle", "memory": "10.9 MB", "code": "\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    bool hasCycle(ListNode *head) {\n        if (head == NULL || head->next == NULL) {\n            return false;\n        }\n        \n        ListNode *slow = head;\n        ListNode *fast = head->next;\n        \n        while (slow != fast) {\n            if (fast == NULL || fast->next == NULL) {\n                return false;\n            }\n            slow = slow->next;\n            fast = fast->next->next;\n        }\n        \n        return true;\n    }\n};\n", "compare_result": "11111111111111111111111111111", "title_slug": "linked-list-cycle", "has_notes": false, "flag_type": 1}, {"id": 1363977976, "question_id": 144, "lang": "cpp", "lang_name": "C++", "time": "1\u00c3\u201a\u00c2\u00a0day, 21\u00c3\u201a\u00c2\u00a0hours", "timestamp": 1724276208, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1363977976/", "is_pending": "Not Pending", "title": "Binary Tree Preorder Traversal", "memory": "10.2 MB", "code": "\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> preorderTraversal(TreeNode* root) {\n        vector<int> result;\n        if(root == nullptr) return result;\n        \n        stack<TreeNode*> nodeStack;\n        nodeStack.push(root);\n        \n        while(!nodeStack.empty()){\n            TreeNode* node = nodeStack.top();\n            result.push_back(node->val);\n            nodeStack.pop();\n            \n            if(node->right){\n                nodeStack.push(node->right);\n            }\n            if(node->left){\n                nodeStack.push(node->left);\n            }\n        }\n        \n        return result;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "binary-tree-preorder-traversal", "has_notes": false, "flag_type": 1}, {"id": 1363977739, "question_id": 145, "lang": "cpp", "lang_name": "C++", "time": "1\u00c3\u201a\u00c2\u00a0day, 21\u00c3\u201a\u00c2\u00a0hours", "timestamp": 1724276182, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1363977739/", "is_pending": "Not Pending", "title": "Binary Tree Postorder Traversal", "memory": "10.2 MB", "code": "\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> postorderTraversal(TreeNode* root) {\n        vector<int> result;\n        if(root == nullptr) return result;\n        \n        stack<TreeNode*> st;\n        st.push(root);\n        \n        while(!st.empty()){\n            TreeNode* node = st.top();\n            st.pop();\n            result.insert(result.begin(), node->val);\n            \n            if(node->left) st.push(node->left);\n            if(node->right) st.push(node->right);\n        }\n        \n        return result;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "binary-tree-postorder-traversal", "has_notes": false, "flag_type": 1}, {"id": 1363977487, "question_id": 160, "lang": "cpp", "lang_name": "C++", "time": "1\u00c3\u201a\u00c2\u00a0day, 21\u00c3\u201a\u00c2\u00a0hours", "timestamp": 1724276156, "status": 10, "status_display": "Accepted", "runtime": "42 ms", "url": "/submissions/detail/1363977487/", "is_pending": "Not Pending", "title": "Intersection of Two Linked Lists", "memory": "17.4 MB", "code": "\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {\n        if (headA == NULL || headB == NULL) return NULL;\n\n        ListNode *a = headA;\n        ListNode *b = headB;\n\n        while (a != b) {\n            a = a == NULL ? headB : a->next;\n            b = b == NULL ? headA : b->next;\n        }\n\n        return a;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111", "title_slug": "intersection-of-two-linked-lists", "has_notes": false, "flag_type": 1}, {"id": 1363977247, "question_id": 168, "lang": "cpp", "lang_name": "C++", "time": "1\u00c3\u201a\u00c2\u00a0day, 21\u00c3\u201a\u00c2\u00a0hours", "timestamp": 1724276135, "status": 10, "status_display": "Accepted", "runtime": "2 ms", "url": "/submissions/detail/1363977247/", "is_pending": "Not Pending", "title": "Excel Sheet Column Title", "memory": "7.4 MB", "code": "\nclass Solution {\npublic:\n    string convertToTitle(int columnNumber) {\n        string result = \"\";\n        while(columnNumber) {\n            columnNumber--;\n            result = char(columnNumber % 26 + 'A') + result;\n            columnNumber /= 26;\n        }\n        return result;\n    }\n};\n", "compare_result": "111111111111111111111", "title_slug": "excel-sheet-column-title", "has_notes": false, "flag_type": 1}, {"id": 1363977078, "question_id": 169, "lang": "cpp", "lang_name": "C++", "time": "1\u00c3\u201a\u00c2\u00a0day, 21\u00c3\u201a\u00c2\u00a0hours", "timestamp": 1724276118, "status": 10, "status_display": "Accepted", "runtime": "16 ms", "url": "/submissions/detail/1363977078/", "is_pending": "Not Pending", "title": "Majority Element", "memory": "27 MB", "code": "\nclass Solution {\npublic:\n    int majorityElement(vector<int>& nums) {\n        int count = 0;\n        int candidate = 0;\n        \n        for (int num : nums) {\n            if (count == 0) {\n                candidate = num;\n            }\n            count += (num == candidate) ? 1 : -1;\n        }\n        \n        return candidate;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111", "title_slug": "majority-element", "has_notes": false, "flag_type": 1}, {"id": 1363976864, "question_id": 171, "lang": "cpp", "lang_name": "C++", "time": "1\u00c3\u201a\u00c2\u00a0day, 21\u00c3\u201a\u00c2\u00a0hours", "timestamp": 1724276094, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1363976864/", "is_pending": "Not Pending", "title": "Excel Sheet Column Number", "memory": "8.7 MB", "code": "\nclass Solution {\npublic:\n    int titleToNumber(string columnTitle) {\n        int result = 0;\n        for (int i = 0; i < columnTitle.size(); i++) {\n            result = result * 26 + (columnTitle[i] - 'A' + 1);\n        }\n        return result;\n    }\n};\n", "compare_resulttitle_slug": "excel-sheet-column-number", "has_notes": false, "flag_type": 1}, {"id": 1363976645, "question_id": 175, "lang": "cpp", "lang_name": "C++", "time": "1\u00c3\u201a\u00c2\u00a0day, 21\u00c3\u201a\u00c2\u00a0hours", "timestamp": 1724276071, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1363976645/", "is_pending": "Not Pending", "title": "Combine Two Tables", "memory": "N/A", "code": "\n# Write your MySQL query statement below\nSELECT Person.firstName, Person.lastName, Address.city, Address.state\nFROM Person\nLEFT JOIN Address\nON Person.personId = Address.personId;\n", "compare_result": null, "title_slug": "combine-two-tables", "has_notes": false, "flag_type": 1}, {"id": 1363976486, "question_id": 181, "lang": "cpp", "lang_name": "C++", "time": "1\u00c3\u201a\u00c2\u00a0day, 21\u00c3\u201a\u00c2\u00a0hours", "timestamp": 1724276055, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1363976486/", "is_pending": "Not Pending", "title": "Employees Earning More Than Their Managers", "memory": "N/A", "code": "Write your MySQL query statement below\n\nSELECT e1.name AS Employee\nFROM Employee e1\nJOIN Employee e2 ON e1.managerId = e2.id\nWHERE e1.salary > e2.salary", "compare_result": null, "title_slug": "employees-earning-more-than-their-managers", "has_notes": false, "flag_type": 1}, {"id": 1363976369, "question_id": 182, "lang": "cpp", "lang_name": "C++", "time": "1\u00c3\u201a\u00c2\u00a0day, 21\u00c3\u201a\u00c2\u00a0hours", "timestamp": 1724276043, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1363976369/", "is_pending": "Not Pending", "title": "Duplicate Emails", "memory": "N/A", "code": "sql\nSELECT email\nFROM Person\nGROUP BY email\nHAVING COUNT(email) > 1;\n", "compare_result": null, "title_slug": "duplicate-emails", "has_notes": false, "flag_type": 1}, {"id": 1363976231, "question_id": 183, "lang": "cpp", "lang_name": "C++", "time": "1\u00c3\u201a\u00c2\u00a0day, 21\u00c3\u201a\u00c2\u00a0hours", "timestamp": 1724276029, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1363976231/", "is_pending": "Not Pending", "title": "Customers Who Never Order", "memory": "N/A", "code": "sql\nSELECT name AS 'Customers'\nFROM Customers\nWHERE id NOT IN (SELECT customerId FROM Orders);\n", "compare_result": null, "title_slug": "customers-who-never-order", "has_notes": false, "flag_type": 1}, {"id": 1363976112, "question_id": 190, "lang": "cpp", "lang_name": "C++", "time": "1\u00c3\u201a\u00c2\u00a0day, 21\u00c3\u201a\u00c2\u00a0hours", "timestamp": 1724276019, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1363976112/", "is_pending": "Not Pending", "title": "Reverse Bits", "memory": "7.4 MB", "code": "\nclass Solution {\npublic:\n    uint32_t reverseBits(uint32_t n) {\n        uint32_t result = 0;\n        for (int i = 0; i < 32; i++) {\n            result <<= 1;\n            if (n & 1) result++;\n            n >>= 1;\n        }\n        return result;\n    }\n};\n", "compare_resulttitle_slug": "reverse-bits", "has_notes": false, "flag_type": 1}, {"id": 1363975909, "question_id": 191, "lang": "cpp", "lang_name": "C++", "time": "1\u00c3\u201a\u00c2\u00a0day, 21\u00c3\u201a\u00c2\u00a0hours", "timestamp": 1724275997, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1363975909/", "is_pending": "Not Pending", "title": "Number of 1 Bits", "memory": "8 MB", "code": "\nclass Solution {\npublic:\n    int hammingWeight(uint32_t n) {\n        int count = 0;\n        while(n){\n            count += n & 1;\n            n >>= 1;\n        }\n        return count;\n    }\n};\n", "compare_resulttitle_slug": "number-of-1-bits", "has_notes": false, "flag_type": 1}, {"id": 1363975661, "question_id": 193, "lang": "cpp", "lang_name": "C++", "time": "1\u00c3\u201a\u00c2\u00a0day, 21\u00c3\u201a\u00c2\u00a0hours", "timestamp": 1724275973, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1363975661/", "is_pending": "Not Pending", "title": "Valid Phone Numbers", "memory": "N/A", "code": "bash\ngrep -P '^(\\(\\d{3}\\) |\\d{3}-)\\d{3}-\\d{4}$' file.txt\n", "compare_result": null, "title_slug": "valid-phone-numbers", "has_notes": false, "flag_type": 1}, {"id": 1363975471, "question_id": 195, "lang": "cpp", "lang_name": "C++", "time": "1\u00c3\u201a\u00c2\u00a0day, 21\u00c3\u201a\u00c2\u00a0hours", "timestamp": 1724275955, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1363975471/", "is_pending": "Not Pending", "title": "Tenth Line", "memory": "N/A", "code": "\n#include <fstream>\n#include <string>\n#include <iostream>\n\nint main() {\n    std::ifstream file(\"file.txt\");\n    std::string line;\n    int count = 0;\n    while (std::getline(file, line)) {\n        count++;\n        if (count == 10) {\n            std::cout << line << std::endl;\n            break;\n        }\n    }\n    if (count < 10) {\n        std::cout << \"The file contains less than 10 lines.\" << std::endl;\n    }\n    return 0;\n}\n", "compare_result": "0000000", "title_slug": "tenth-line", "has_notes": false, "flag_type": 1}, {"id": 1363975296, "question_id": 196, "lang": "cpp", "lang_name": "C++", "time": "1\u00c3\u201a\u00c2\u00a0day, 21\u00c3\u201a\u00c2\u00a0hours", "timestamp": 1724275934, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1363975296/", "is_pending": "Not Pending", "title": "Delete Duplicate Emails", "memory": "N/A", "code": "sql\nDELETE p1 FROM Person p1\nINNER JOIN Person p2 \nWHERE p1.email = p2.email AND p1.id > p2.id;\n", "compare_result": null, "title_slug": "delete-duplicate-emails", "has_notes": false, "flag_type": 1}, {"id": 1363975136, "question_id": 197, "lang": "cpp", "lang_name": "C++", "time": "1\u00c3\u201a\u00c2\u00a0day, 21\u00c3\u201a\u00c2\u00a0hours", "timestamp": 1724275919, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1363975136/", "is_pending": "Not Pending", "title": "Rising Temperature", "memory": "N/A", "code": "sql\nSELECT weather.id AS 'Id'\nFROM Weather\nJOIN Weather AS previous_day\nON DATEDIFF(weather.recordDate, previous_day.recordDate) = 1\nWHERE weather.temperature > previous_day.temperature;\n", "compare_result": null, "title_slug": "rising-temperature", "has_notes": false, "flag_type": 1}, {"id": 1363975025, "question_id": 202, "lang": "cpp", "lang_name": "C++", "time": "1\u00c3\u201a\u00c2\u00a0day, 21\u00c3\u201a\u00c2\u00a0hours", "timestamp": 1724275907, "status": 10, "status_display": "Accepted", "runtime": "5 ms", "url": "/submissions/detail/1363975025/", "is_pending": "Not Pending", "title": "Happy Number", "memory": "8.4 MB", "code": "\nclass Solution {\npublic:\n    bool isHappy(int n) {\n        unordered_set<int> seen;\n        while (n != 1 && seen.find(n) == seen.end()) {\n            seen.insert(n);\n            n = getNext(n);\n        }\n        return n == 1;\n    }\nprivate:\n    int getNext(int n) {\n        int totalSum = 0;\n        while (n > 0) {\n            int d = n % 10;\n            n = n / 10;\n            totalSum += d * d;\n        }\n        return totalSum;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "happy-number", "has_notes": false, "flag_type": 1}, {"id": 1363974824, "question_id": 203, "lang": "cpp", "lang_name": "C++", "time": "1\u00c3\u201a\u00c2\u00a0day, 21\u00c3\u201a\u00c2\u00a0hours", "timestamp": 1724275887, "status": 10, "status_display": "Accepted", "runtime": "17 ms", "url": "/submissions/detail/1363974824/", "is_pending": "Not Pending", "title": "Remove Linked List Elements", "memory": "20 MB", "code": "\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* removeElements(ListNode* head, int val) {\n        while(head != nullptr && head->val == val) {\n            head = head->next;\n        }\n        if(head == nullptr) {\n            return nullptr;\n        }\n        ListNode* current = head;\n        while(current->next != nullptr) {\n            if(current->next->val == val) {\n                current->next = current->next->next;\n            } else {\n                current = current->next;\n            }\n        }\n        return head;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "remove-linked-list-elements", "has_notes": false, "flag_type": 1}, {"id": 1363974583, "question_id": 205, "lang": "cpp", "lang_name": "C++", "time": "1\u00c3\u201a\u00c2\u00a0day, 21\u00c3\u201a\u00c2\u00a0hours", "timestamp": 1724275863, "status": 10, "status_display": "Accepted", "runtime": "6 ms", "url": "/submissions/detail/1363974583/", "is_pending": "Not Pending", "title": "Isomorphic Strings", "memory": "8.6 MB", "code": "\nclass Solution {\npublic:\n    bool isIsomorphic(string s, string t) {\n        int m1[256] = {0}, m2[256] = {0}, n = s.size();\n        for (int i = 0; i < n; ++i) {\n            if (m1[s[i]] != m2[t[i]]) return false;\n            m1[s[i]] = i + 1;\n            m2[t[i]] = i + 1;\n        }\n        return true;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111", "title_slug": "isomorphic-strings", "has_notes": false, "flag_type": 1}, {"id": 1363974397, "question_id": 206, "lang": "cpp", "lang_name": "C++", "time": "1\u00c3\u201a\u00c2\u00a0day, 21\u00c3\u201a\u00c2\u00a0hours", "timestamp": 1724275843, "status": 10, "status_display": "Accepted", "runtime": "4 ms", "url": "/submissions/detail/1363974397/", "is_pending": "Not Pending", "title": "Reverse Linked List", "memory": "13 MB", "code": "\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* prev = nullptr;\n        ListNode* curr = head;\n        while (curr != nullptr) {\n            ListNode* nextTemp = curr->next;\n            curr->next = prev;\n            prev = curr;\n            curr = nextTemp;\n        }\n        return prev;\n    }\n};\n", "compare_result": "1111111111111111111111111111", "title_slug": "reverse-linked-list", "has_notes": false, "flag_type": 1}, {"id": 1363974100, "question_id": 217, "lang": "cpp", "lang_name": "C++", "time": "1\u00c3\u201a\u00c2\u00a0day, 21\u00c3\u201a\u00c2\u00a0hours", "timestamp": 1724275814, "status": 10, "status_display": "Accepted", "runtime": "100 ms", "url": "/submissions/detail/1363974100/", "is_pending": "Not Pending", "title": "Contains Duplicate", "memory": "73.5 MB", "code": "\nclass Solution {\npublic:\n    bool containsDuplicate(vector<int>& nums) {\n        unordered_set<int> set;\n        for(int i = 0; i < nums.size(); i++) {\n            if(set.find(nums[i]) != set.end()) {\n                return true;\n            }\n            set.insert(nums[i]);\n        }\n        return false;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "contains-duplicate", "has_notes": false, "flag_type": 1}, {"id": 1363973931, "question_id": 219, "lang": "cpp", "lang_name": "C++", "time": "1\u00c3\u201a\u00c2\u00a0day, 21\u00c3\u201a\u00c2\u00a0hours", "timestamp": 1724275796, "status": 10, "status_display": "Accepted", "runtime": "125 ms", "url": "/submissions/detail/1363973931/", "is_pending": "Not Pending", "title": "Contains Duplicate II", "memory": "81.2 MB", "code": "\nclass Solution {\npublic:\n    bool containsNearbyDuplicate(vector<int>& nums, int k) {\n        unordered_map<int, int> map;\n        for (int i = 0; i < nums.size(); i++) {\n            if (map.find(nums[i]) != map.end() && i - map[nums[i]] <= k) {\n                return true;\n            }\n            map[nums[i]] = i;\n        }\n        return false;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111", "title_slug": "contains-duplicate-ii", "has_notes": false, "flag_type": 1}, {"id": 1362894294, "question_id": 222, "lang": "cpp", "lang_name": "C++", "time": "2\u00c3\u201a\u00c2\u00a0days, 20\u00c3\u201a\u00c2\u00a0hours", "timestamp": 1724191597, "status": 10, "status_display": "Accepted", "runtime": "26 ms", "url": "/submissions/detail/1362894294/", "is_pending": "Not Pending", "title": "Count Complete Tree Nodes", "memory": "29.4 MB", "code": "\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int countNodes(TreeNode* root) {\n        if (root == nullptr) {\n            return 0;\n        }\n        \n        int d = depth(root);\n        \n        // If the tree has 1 node\n        if (d == 0) {\n            return 1;\n        }\n        \n        // Last level nodes are enumerated from 0 to 2^d - 1 (left -> right).\n        // Perform binary search to check how many nodes exist.\n        int left = 1, right = (1 << d) - 1;\n        int pivot;\n        while (left <= right) {\n            pivot = left + (right - left) / 2;\n            if (exists(root, d, pivot)) {\n                left = pivot + 1;\n            } else {\n                right = pivot - 1;\n            }\n        }\n        \n        // The tree contains 2^d - 1 nodes on the first (d - 1) levels\n        // and left nodes on the last level.\n        return (1 << d) - 1 + left;\n    }\n    \nprivate:\n    // Compute the depth (height) of a tree.\n    int depth(TreeNode* node) {\n        int d = 0;\n        while (node->left != nullptr) {\n            node = node->left;\n            ++d;\n        }\n        return d;\n    }\n    \n    // Last level nodes are enumerated from 0 to 2^d - 1 (left -> right).\n    // Return True if the last level node idx exists. \n    // Binary search with O(d) complexity.\n    bool exists(TreeNode* node, int d, int idx) {\n        int left = 0, right = (1 << d) - 1;\n        int pivot;\n        for(int i = 0; i < d; ++i) {\n            pivot = left + (right - left) / 2;\n            if (idx <= pivot) {\n                node = node->left;\n                right = pivot;\n            } else {\n                node = node->right;\n                left = pivot + 1;\n            }\n        }\n        return node != nullptr;\n    }\n};\n", "compare_result": "111111111111111111", "title_slug": "count-complete-tree-nodes", "has_notes": false, "flag_type": 1}, {"id": 1362893966, "question_id": 225, "lang": "cpp", "lang_name": "C++", "time": "2\u00c3\u201a\u00c2\u00a0days, 20\u00c3\u201a\u00c2\u00a0hours", "timestamp": 1724191554, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1362893966/", "is_pending": "Not Pending", "title": "Implement Stack using Queues", "memory": "8.5 MB", "code": "\n#include <queue>\n\nclass MyStack {\nprivate:\n    std::queue<int> q1, q2;\npublic:\n    MyStack() {\n        \n    }\n    \n    void push(int x) {\n        q2.push(x);\n        while (!q1.empty()) {\n            q2.push(q1.front());\n            q1.pop();\n        }\n        std::swap(q1, q2);\n    }\n    \n    int pop() {\n        int top = q1.front();\n        q1.pop();\n        return top;\n    }\n    \n    int top() {\n        return q1.front();\n    }\n    \n    bool empty() {\n        return q1.empty();\n    }\n};\n\n/**\n * Your MyStack object will be instantiated and called as such:\n * MyStack* obj = new MyStack();\n * obj->push(x);\n * int param_2 = obj->pop();\n * int param_3 = obj->top();\n * bool param_4 = obj->empty();\n */\n", "compare_result": "111111111111111111", "title_slug": "implement-stack-using-queues", "has_notes": false, "flag_type": 1}, {"id": 1362893688, "question_id": 226, "lang": "cpp", "lang_name": "C++", "time": "2\u00c3\u201a\u00c2\u00a0days, 20\u00c3\u201a\u00c2\u00a0hours", "timestamp": 1724191522, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1362893688/", "is_pending": "Not Pending", "title": "Invert Binary Tree", "memory": "11.9 MB", "code": "\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* invertTree(TreeNode* root) {\n        if (root == nullptr) {\n            return nullptr;\n        }\n        \n        TreeNode* temp = root->left;\n        root->left = invertTree(root->right);\n        root->right = invertTree(temp);\n        \n        return root;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "invert-binary-tree", "has_notes": false, "flag_type": 1}, {"id": 1362893504, "question_id": 228, "lang": "cpp", "lang_name": "C++", "time": "2\u00c3\u201a\u00c2\u00a0days, 20\u00c3\u201a\u00c2\u00a0hours", "timestamp": 1724191500, "status": 15, "status_display": "Runtime Error", "runtime": "N/A", "url": "/submissions/detail/1362893504/", "is_pending": "Not Pending", "title": "Summary Ranges", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    vector<string> summaryRanges(vector<int>& nums) {\n        vector<string> result;\n        int n = nums.size();\n        if(n == 0) return result;\n        for(int i = 0; i < n; i++) {\n            int start = nums[i];\n            while(i + 1 < n && nums[i+1] - nums[i] == 1) {\n                i++;\n            }\n            if(start != nums[i]) {\n                result.push_back(to_string(start) + \"->\" + to_string(nums[i]));\n            } else {\n                result.push_back(to_string(start));\n            }\n        }\n        return result;\n    }\n};\n", "compare_result": "111111111111111111111111000000000", "title_slug": "summary-ranges", "has_notes": false, "flag_type": 1}, {"id": 1362893343, "question_id": 231, "lang": "cpp", "lang_name": "C++", "time": "2\u00c3\u201a\u00c2\u00a0days, 21\u00c3\u201a\u00c2\u00a0hours", "timestamp": 1724191479, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1362893343/", "is_pending": "Not Pending", "title": "Power of Two", "memory": "7.5 MB", "code": "\nclass Solution {\npublic:\n    bool isPowerOfTwo(int n) {\n        if(n <= 0) return false;\n        return (n & (n - 1)) == 0;\n    }\n};\n", "compare_resulttitle_slug": "power-of-two", "has_notes": false, "flag_type": 1}, {"id": 1362893222, "question_id": 232, "lang": "cpp", "lang_name": "C++", "time": "2\u00c3\u201a\u00c2\u00a0days, 21\u00c3\u201a\u00c2\u00a0hours", "timestamp": 1724191463, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1362893222/", "is_pending": "Not Pending", "title": "Implement Queue using Stacks", "memory": "8.8 MB", "code": "\n#include <stack>\n\nclass MyQueue {\nprivate:\n    std::stack<int> input, output;\npublic:\n    MyQueue() {\n        \n    }\n    \n    void push(int x) {\n        input.push(x);\n    }\n    \n    int pop() {\n        peek();\n        int front = output.top();\n        output.pop();\n        return front;\n    }\n    \n    int peek() {\n        if (output.empty()) {\n            while (!input.empty()) {\n                output.push(input.top());\n                input.pop();\n            }\n        }\n        return output.top();\n    }\n    \n    bool empty() {\n        return input.empty() && output.empty();\n    }\n};\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * MyQueue* obj = new MyQueue();\n * obj->push(x);\n * int param_2 = obj->pop();\n * int param_3 = obj->peek();\n * bool param_4 = obj->empty();\n */\n", "compare_result": "1111111111111111111111", "title_slug": "implement-queue-using-stacks", "has_notes": false, "flag_type": 1}, {"id": 1362892989, "question_id": 234, "lang": "cpp", "lang_name": "C++", "time": "2\u00c3\u201a\u00c2\u00a0days, 21\u00c3\u201a\u00c2\u00a0hours", "timestamp": 1724191434, "status": 10, "status_display": "Accepted", "runtime": "148 ms", "url": "/submissions/detail/1362892989/", "is_pending": "Not Pending", "title": "Palindrome Linked List", "memory": "116.9 MB", "code": "\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    bool isPalindrome(ListNode* head) {\n        if(head == nullptr || head->next == nullptr)\n            return true;\n        \n        // Find the mid point of the list\n        ListNode *slow = head, *fast = head;\n        while(fast->next != nullptr && fast->next->next != nullptr) {\n            slow = slow->next;\n            fast = fast->next->next;\n        }\n        \n        // Reverse the second half of the list\n        ListNode *secondHalfHead = reverseList(slow->next);\n        \n        // Compare the first half and the second half\n        while(secondHalfHead != nullptr) {\n            if(head->val != secondHalfHead->val)\n                return false;\n            head = head->next;\n            secondHalfHead = secondHalfHead->next;\n        }\n        \n        return true;\n    }\n    \nprivate:\n    ListNode* reverseList(ListNode* head) {\n        ListNode *prev = nullptr, *next = nullptr;\n        while(head != nullptr) {\n            next = head->next;\n            head->next = prev;\n            prev = head;\n            head = next;\n        }\n        return prev;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "palindrome-linked-list", "has_notes": false, "flag_type": 1}, {"id": 1362892782, "question_id": 242, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724191408, "status": 10, "status_display": "Accepted", "runtime": "8 ms", "url": "/submissions/detail/1362892782/", "is_pending": "Not Pending", "title": "Valid Anagram", "memory": "8.9 MB", "code": "\nclass Solution {\npublic:\n    bool isAnagram(string s, string t) {\n        if(s.length() != t.length()) {\n            return false;\n        }\n        \n        int count[26] = {0};\n        \n        for(int i = 0; i < s.length(); i++) {\n            count[s[i] - 'a']++;\n            count[t[i] - 'a']--;\n        }\n        \n        for(int i = 0; i < 26; i++) {\n            if(count[i] != 0) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111", "title_slug": "valid-anagram", "has_notes": false, "flag_type": 1}, {"id": 1362892608, "question_id": 257, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724191388, "status": 10, "status_display": "Accepted", "runtime": "4 ms", "url": "/submissions/detail/1362892608/", "is_pending": "Not Pending", "title": "Binary Tree Paths", "memory": "16.7 MB", "code": "\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<string> binaryTreePaths(TreeNode* root) {\n        vector<string> paths;\n        if(root) dfs(root, \"\", paths);\n        return paths;\n    }\n    \n    void dfs(TreeNode* root, string path, vector<string>& paths) {\n        path += to_string(root->val);\n        if(root->left == nullptr && root->right == nullptr) {\n            paths.push_back(path);\n        }\n        if(root->left) dfs(root->left, path + \"->\", paths);\n        if(root->right) dfs(root->right, path + \"->\", paths);\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "binary-tree-paths", "has_notes": false, "flag_type": 1}, {"id": 1362892399, "question_id": 258, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724191364, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1362892399/", "is_pending": "Not Pending", "title": "Add Digits", "memory": "8.4 MB", "code": "\nclass Solution {\npublic:\n    int addDigits(int num) {\n        if (num == 0) {\n            return 0;\n        } else if (num % 9 == 0) {\n            return 9;\n        } else {\n            return num % 9;\n        }\n    }\n};\n", "compare_resulttitle_slug": "add-digits", "has_notes": false, "flag_type": 1}, {"id": 1362892258, "question_id": 263, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724191348, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1362892258/", "is_pending": "Not Pending", "title": "Ugly Number", "memory": "7.3 MB", "code": "\nclass Solution {\npublic:\n    bool isUgly(int n) {\n        if(n <= 0) return false;\n        while(n % 2 == 0) n /= 2;\n        while(n % 3 == 0) n /= 3;\n        while(n % 5 == 0) n /= 5;\n        return n == 1;\n    }\n};\n", "compare_resulttitle_slug": "ugly-number", "has_notes": false, "flag_type": 1}, {"id": 1362892120, "question_id": 268, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724191332, "status": 10, "status_display": "Accepted", "runtime": "15 ms", "url": "/submissions/detail/1362892120/", "is_pending": "Not Pending", "title": "Missing Number", "memory": "20.7 MB", "code": "\nclass Solution {\npublic:\n    int missingNumber(vector<int>& nums) {\n        int missing = nums.size();\n        for (int i = 0; i < nums.size(); i++) {\n            missing ^= i ^ nums[i];\n        }\n        return missing;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "missing-number", "has_notes": false, "flag_type": 1}, {"id": 1362891944, "question_id": 278, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724191312, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1362891944/", "is_pending": "Not Pending", "title": "First Bad Version", "memory": "7.6 MB", "code": "\n// The API isBadVersion is defined for you.\n// bool isBadVersion(int version);\n\nclass Solution {\npublic:\n    int firstBadVersion(int n) {\n        int left = 1;\n        int right = n;\n        while (left < right) {\n            int mid = left + (right - left) / 2;\n            if (isBadVersion(mid)) {\n                right = mid;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return left;\n    }\n};\n", "compare_result": "111111111111111111111111", "title_slug": "first-bad-version", "has_notes": false, "flag_type": 1}, {"id": 1362891760, "question_id": 283, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724191291, "status": 10, "status_display": "Accepted", "runtime": "15 ms", "url": "/submissions/detail/1362891760/", "is_pending": "Not Pending", "title": "Move Zeroes", "memory": "21.9 MB", "code": "\nclass Solution {\npublic:\n    void moveZeroes(vector<int>& nums) {\n        int n = nums.size();\n        int index = 0;\n        for (int i = 0; i < n; i++) {\n            if (nums[i] != 0) {\n                nums[index++] = nums[i];\n            }\n        }\n        for (int i = index; i < n; i++) {\n            nums[i] = 0;\n        }\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "move-zeroes", "has_notes": false, "flag_type": 1}, {"id": 1362891600, "question_id": 290, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724191274, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1362891600/", "is_pending": "Not Pending", "title": "Word Pattern", "memory": "8.1 MB", "code": "\nclass Solution {\npublic:\n    bool wordPattern(string pattern, string s) {\n        unordered_map<char, string> char_map;\n        unordered_map<string, char> word_map;\n        stringstream str(s);\n        int i = 0;\n        for(string word; str >> word; ++i) {\n            if(i == pattern.size() || (char_map.count(pattern[i]) && char_map[pattern[i]] != word) || \n               (word_map.count(word) && word_map[word] != pattern[i])) {\n                return false;\n            }\n            char_map[pattern[i]] = word;\n            word_map[word] = pattern[i];\n        }\n        return i == pattern.size();\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111", "title_slug": "word-pattern", "has_notes": false, "flag_type": 1}, {"id": 1362891393, "question_id": 292, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724191251, "status": 10, "status_display": "Accepted", "runtime": "2 ms", "url": "/submissions/detail/1362891393/", "is_pending": "Not Pending", "title": "Nim Game", "memory": "7.3 MB", "code": "\nclass Solution {\npublic:\n    bool canWinNim(int n) {\n        return n % 4 != 0;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111", "title_slug": "nim-game", "has_notes": false, "flag_type": 1}, {"id": 1362891263, "question_id": 303, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724191233, "status": 10, "status_display": "Accepted", "runtime": "16 ms", "url": "/submissions/detail/1362891263/", "is_pending": "Not Pending", "title": "Range Sum Query - Immutable", "memory": "22 MB", "code": "\nclass NumArray {\npublic:\n    vector<int> sums;\n    NumArray(vector<int>& nums) {\n        sums.resize(nums.size() + 1, 0);\n        for(int i = 0; i < nums.size(); i++) {\n            sums[i + 1] = sums[i] + nums[i];\n        }\n    }\n    \n    int sumRange(int left, int right) {\n        return sums[right + 1] - sums[left];\n    }\n};\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * NumArray* obj = new NumArray(nums);\n * int param_1 = obj->sumRange(left,right);\n */\n", "compare_result": "111111111111111", "title_slug": "range-sum-query-immutable", "has_notes": false, "flag_type": 1}, {"id": 1362891128, "question_id": 326, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724191213, "status": 10, "status_display": "Accepted", "runtime": "8 ms", "url": "/submissions/detail/1362891128/", "is_pending": "Not Pending", "title": "Power of Three", "memory": "8.5 MB", "code": "\nclass Solution {\npublic:\n    bool isPowerOfThree(int n) {\n        if(n > 1)\n            while(n % 3 == 0) n /= 3;\n        return n == 1;\n    }\n};\n", "compare_resulttitle_slug": "power-of-three", "has_notes": false, "flag_type": 1}, {"id": 1362891009, "question_id": 338, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724191194, "status": 10, "status_display": "Accepted", "runtime": "5 ms", "url": "/submissions/detail/1362891009/", "is_pending": "Not Pending", "title": "Counting Bits", "memory": "9.3 MB", "code": "\nclass Solution {\npublic:\n    vector<int> countBits(int n) {\n        vector<int> ans(n+1, 0);\n        for(int i=1; i<=n; i++){\n            ans[i] = ans[i&(i-1)] + 1;\n        }\n        return ans;\n    }\n};\n", "compare_result": "111111111111111", "title_slug": "counting-bits", "has_notes": false, "flag_type": 1}, {"id": 1362890852, "question_id": 342, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724191171, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1362890852/", "is_pending": "Not Pending", "title": "Power of Four", "memory": "7.5 MB", "code": "\nclass Solution {\npublic:\n    bool isPowerOfFour(int n) {\n        if(n <= 0) return false;\n        if(n == 1) return true;\n        while(n % 4 == 0) {\n            n /= 4;\n        }\n        return n == 1;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "power-of-four", "has_notes": false, "flag_type": 1}, {"id": 1362890653, "question_id": 344, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724191142, "status": 10, "status_display": "Accepted", "runtime": "16 ms", "url": "/submissions/detail/1362890653/", "is_pending": "Not Pending", "title": "Reverse String", "memory": "27.3 MB", "code": "\nclass Solution {\npublic:\n    void reverseString(vector<char>& s) {\n        int left = 0;\n        int right = s.size() - 1;\n        while (left < right) {\n            swap(s[left++], s[right--]);\n        }\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "reverse-string", "has_notes": false, "flag_type": 1}, {"id": 1362890498, "question_id": 345, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724191123, "status": 10, "status_display": "Accepted", "runtime": "7 ms", "url": "/submissions/detail/1362890498/", "is_pending": "Not Pending", "title": "Reverse Vowels of a String", "memory": "9.2 MB", "code": "\nclass Solution {\npublic:\n    string reverseVowels(string s) {\n        int i = 0, j = s.size() - 1;\n        while(i < j){\n            i = s.find_first_of(\"aeiouAEIOU\", i);\n            j = s.find_last_of(\"aeiouAEIOU\", j);\n            if(i < j){\n                swap(s[i++], s[j--]);\n            }\n        }\n        return s;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "reverse-vowels-of-a-string", "has_notes": false, "flag_type": 1}, {"id": 1362890282, "question_id": 349, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724191100, "status": 10, "status_display": "Accepted", "runtime": "7 ms", "url": "/submissions/detail/1362890282/", "is_pending": "Not Pending", "title": "Intersection of Two Arrays", "memory": "13.6 MB", "code": "\nclass Solution {\npublic:\n    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {\n        set<int> set1(nums1.begin(), nums1.end());\n        set<int> set2(nums2.begin(), nums2.end());\n        vector<int> result;\n        \n        for(auto num : set1){\n            if(set2.find(num) != set2.end()){\n                result.push_back(num);\n            }\n        }\n        \n        return result;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111", "title_slug": "intersection-of-two-arrays", "has_notes": false, "flag_type": 1}, {"id": 1362890156, "question_id": 350, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724191084, "status": 10, "status_display": "Accepted", "runtime": "8 ms", "url": "/submissions/detail/1362890156/", "is_pending": "Not Pending", "title": "Intersection of Two Arrays II", "memory": "13.1 MB", "code": "\nclass Solution {\npublic:\n    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {\n        sort(nums1.begin(), nums1.end());\n        sort(nums2.begin(), nums2.end());\n        vector<int> result;\n        int i = 0, j = 0;\n        while(i < nums1.size() && j < nums2.size()){\n            if(nums1[i] < nums2[j]){\n                i++;\n            } else if(nums1[i] > nums2[j]){\n                j++;\n            } else {\n                result.push_back(nums1[i]);\n                i++;\n                j++;\n            }\n        }\n        return result;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111", "title_slug": "intersection-of-two-arrays-ii", "has_notes": false, "flag_type": 1}, {"id": 1362889945, "question_id": 367, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724191056, "status": 10, "status_display": "Accepted", "runtime": "2 ms", "url": "/submissions/detail/1362889945/", "is_pending": "Not Pending", "title": "Valid Perfect Square", "memory": "7.4 MB", "code": "\nclass Solution {\npublic:\n    bool isPerfectSquare(int num) {\n        if (num < 2) return true;\n        \n        long left = 2, right = num / 2;\n        while (left <= right) {\n            long mid = left + (right - left) / 2;\n            long guess_squared = mid * mid;\n            if (guess_squared == num) {\n                return true;\n            }\n            if (guess_squared > num) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return false;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "valid-perfect-square", "has_notes": false, "flag_type": 1}, {"id": 1362889792, "question_id": 374, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724191039, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1362889792/", "is_pending": "Not Pending", "title": "Guess Number Higher or Lower", "memory": "7.6 MB", "code": "\n/**\n * Forward declaration of guess API.\n * @param  num   your guess\n * @return       -1 if num is higher than the picked number\n *               1 if num is lower than the picked number\n *               otherwise return 0\n * int guess(int num);\n */\n\nclass Solution {\npublic:\n    int guessNumber(int n) {\n        int low = 1, high = n;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            int res = guess(mid);\n            if (res == 0)\n                return mid;\n            else if (res < 0)\n                high = mid - 1;\n            else\n                low = mid + 1;\n        }\n        return -1;\n    }\n};\n", "compare_result": "1111111111111111111111111", "title_slug": "guess-number-higher-or-lower", "has_notes": false, "flag_type": 1}, {"id": 1362889611, "question_id": 383, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724191016, "status": 10, "status_display": "Accepted", "runtime": "14 ms", "url": "/submissions/detail/1362889611/", "is_pending": "Not Pending", "title": "Ransom Note", "memory": "10.3 MB", "code": "\nclass Solution {\npublic:\n    bool canConstruct(string ransomNote, string magazine) {\n        vector<int> count(26, 0);\n        for (char c : magazine) {\n            count[c - 'a']++;\n        }\n        for (char c : ransomNote) {\n            if (--count[c - 'a'] < 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "ransom-note", "has_notes": false, "flag_type": 1}, {"id": 1362889471, "question_id": 387, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724190995, "status": 10, "status_display": "Accepted", "runtime": "24 ms", "url": "/submissions/detail/1362889471/", "is_pending": "Not Pending", "title": "First Unique Character in a String", "memory": "13.1 MB", "code": "\nclass Solution {\npublic:\n    int firstUniqChar(string s) {\n        vector<int> count(26, 0);\n        for (char c : s) {\n            count[c - 'a']++;\n        }\n        for (int i = 0; i < s.size(); i++) {\n            if (count[s[i] - 'a'] == 1) {\n                return i;\n            }\n        }\n        return -1;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "first-unique-character-in-a-string", "has_notes": false, "flag_type": 1}, {"id": 1362876060, "question_id": 389, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724189438, "status": 10, "status_display": "Accepted", "runtime": "4 ms", "url": "/submissions/detail/1362876060/", "is_pending": "Not Pending", "title": "Find the Difference", "memory": "8.1 MB", "code": "\nclass Solution {\npublic:\n    char findTheDifference(string s, string t) {\n        int charCount[26] = {0};\n        for (char c : s) {\n            charCount[c - 'a']++;\n        }\n        for (char c : t) {\n            if (--charCount[c - 'a'] < 0) {\n                return c;\n            }\n        }\n        return ' ';\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111", "title_slug": "find-the-difference", "has_notes": false, "flag_type": 1}, {"id": 1362875877, "question_id": 392, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724189418, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1362875877/", "is_pending": "Not Pending", "title": "Is Subsequence", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    bool isSubsequence(string s, string t) {\n        int index = 0;\n        for (char c : t) {\n            if (c == s[index]) {\n                index++;\n                if (index == s.size()) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n};\n", "compare_result": "11001111111111111111", "title_slug": "is-subsequence", "has_notes": false, "flag_type": 1}, {"id": 1362875670, "question_id": 401, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724189393, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1362875670/", "is_pending": "Not Pending", "title": "Binary Watch", "memory": "8.8 MB", "code": "\nclass Solution {\npublic:\n    vector<string> readBinaryWatch(int turnedOn) {\n        vector<string> res;\n        for (int h=0; h<12; h++)\n            for (int m=0; m<60; m++)\n                if (bitset<10>(h << 6 | m).count() == turnedOn)\n                    res.emplace_back(to_string(h) + (m < 10 ? \":0\" : \":\") + to_string(m));\n        return res;\n    }\n};\n", "compare_result": "11111111111", "title_slug": "binary-watch", "has_notes": false, "flag_type": 1}, {"id": 1362875485, "question_id": 404, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724189373, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1362875485/", "is_pending": "Not Pending", "title": "Sum of Left Leaves", "memory": "15 MB", "code": "\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int sumOfLeftLeaves(TreeNode* root, bool isLeft = false) {\n        if (!root) {\n            return 0;\n        }\n        if (!root->left && !root->right) {\n            return isLeft ? root->val : 0;\n        }\n        return sumOfLeftLeaves(root->left, true) + sumOfLeftLeaves(root->right, false);\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "sum-of-left-leaves", "has_notes": false, "flag_type": 1}, {"id": 1362875269, "question_id": 405, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724189351, "status": 10, "status_display": "Accepted", "runtime": "2 ms", "url": "/submissions/detail/1362875269/", "is_pending": "Not Pending", "title": "Convert a Number to Hexadecimal", "memory": "7.5 MB", "code": "\nclass Solution {\npublic:\n    string toHex(int num) {\n        if (num == 0) return \"0\";\n        string hex = \"0123456789abcdef\";\n        string result = \"\";\n        int count = 0;\n        while (num && count++ < 8) {\n            result = hex[num & 0xf] + result;\n            num >>= 4;\n        }\n        return result;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "convert-a-number-to-hexadecimal", "has_notes": false, "flag_type": 1}, {"id": 1362875102, "question_id": 409, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724189332, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1362875102/", "is_pending": "Not Pending", "title": "Longest Palindrome", "memory": "8.2 MB", "code": "\nclass Solution {\npublic:\n    int longestPalindrome(string s) {\n        vector<int> count(128, 0);\n        for (char c : s)\n            count[c]++;\n        int ans = 0;\n        for (int v : count) {\n            ans += v / 2 * 2;\n            if (ans % 2 == 0 && v % 2 == 1)\n                ans++;\n        }\n        return ans;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "longest-palindrome", "has_notes": false, "flag_type": 1}, {"id": 1362874959, "question_id": 412, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724189316, "status": 10, "status_display": "Accepted", "runtime": "5 ms", "url": "/submissions/detail/1362874959/", "is_pending": "Not Pending", "title": "Fizz Buzz", "memory": "11.7 MB", "code": "\nclass Solution {\npublic:\n    vector<string> fizzBuzz(int n) {\n        vector<string> result;\n        for(int i = 1; i <= n; i++) {\n            if(i % 3 == 0 && i % 5 == 0) {\n                result.push_back(\"FizzBuzz\");\n            } else if(i % 3 == 0) {\n                result.push_back(\"Fizz\");\n            } else if(i % 5 == 0) {\n                result.push_back(\"Buzz\");\n            } else {\n                result.push_back(to_string(i));\n            }\n        }\n        return result;\n    }\n};\n", "compare_result": "11111111", "title_slug": "fizz-buzz", "has_notes": false, "flag_type": 1}, {"id": 1362874766, "question_id": 414, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724189296, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1362874766/", "is_pending": "Not Pending", "title": "Third Maximum Number", "memory": "11.8 MB", "code": "\nclass Solution {\npublic:\n    int thirdMax(vector<int>& nums) {\n        long long a, b, c;\n        a = b = c = LLONG_MIN;\n        for (int num : nums) {\n            if (num == a || num == b || num == c) continue;\n            if (num > a) {\n                c = b;\n                b = a;\n                a = num;\n            } else if (num > b) {\n                c = b;\n                b = num;\n            } else if (num > c) {\n                c = num;\n            }\n        }\n        return c == LLONG_MIN ? a : c;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111", "title_slug": "third-maximum-number", "has_notes": false, "flag_type": 1}, {"id": 1362874550, "question_id": 415, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724189274, "status": 10, "status_display": "Accepted", "runtime": "18 ms", "url": "/submissions/detail/1362874550/", "is_pending": "Not Pending", "title": "Add Strings", "memory": "59.8 MB", "code": "\nclass Solution {\npublic:\n    string addStrings(string num1, string num2) {\n        int i = num1.size() - 1;\n        int j = num2.size() - 1;\n        int carry = 0;\n        string res = \"\";\n        while(i >= 0 || j >= 0 || carry){\n            long sum = 0;\n            if(i >= 0){sum += (num1[i] - '0');i--;}\n            if(j >= 0){sum += (num2[j] - '0');j--;}\n            sum += carry; \n            carry = sum / 10;\n            sum = sum % 10;\n            res = res + to_string(sum);\n        }\n        reverse(res.begin(), res.end());\n        return res;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "add-strings", "has_notes": false, "flag_type": 1}, {"id": 1362874345, "question_id": 434, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724189252, "status": 10, "status_display": "Accepted", "runtime": "2 ms", "url": "/submissions/detail/1362874345/", "is_pending": "Not Pending", "title": "Number of Segments in a String", "memory": "7.7 MB", "code": "\nclass Solution {\npublic:\n    int countSegments(string s) {\n        int count = 0;\n        stringstream ss(s);\n        string word;\n        while (ss >> word) {\n            count++;\n        }\n        return count;\n    }\n};\n", "compare_result": "1111111111111111111111111111", "title_slug": "number-of-segments-in-a-string", "has_notes": false, "flag_type": 1}, {"id": 1362874214, "question_id": 441, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724189236, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1362874214/", "is_pending": "Not Pending", "title": "Arranging Coins", "memory": "8.6 MB", "code": "\nclass Solution {\npublic:\n    int arrangeCoins(int n) {\n        int left = 0, right = n;\n        long mid, curr;\n        while (left <= right) {\n            mid = left + (right - left) / 2;\n            curr = mid * (mid + 1) / 2;\n\n            if (curr == n) return mid;\n\n            if (n < curr) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return right;\n    }\n};\n", "compare_resulttitle_slug": "arranging-coins", "has_notes": false, "flag_type": 1}, {"id": 1362874024, "question_id": 448, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724189212, "status": 10, "status_display": "Accepted", "runtime": "26 ms", "url": "/submissions/detail/1362874024/", "is_pending": "Not Pending", "title": "Find All Numbers Disappeared in an Array", "memory": "36.4 MB", "code": "\nclass Solution {\npublic:\n    vector<int> findDisappearedNumbers(vector<int>& nums) {\n        int n = nums.size();\n        for(int i=0; i<n; i++) {\n            int m = abs(nums[i]) - 1; // index starts from 0\n            nums[m] = nums[m] > 0 ? -nums[m] : nums[m];\n        }\n        vector<int> res;\n        for(int i = 0; i<n; i++) {\n            if(nums[i] > 0) {\n                res.push_back(i+1);\n            }\n        }\n        return res;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111", "title_slug": "find-all-numbers-disappeared-in-an-array", "has_notes": false, "flag_type": 1}, {"id": 1362873861, "question_id": 455, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724189194, "status": 10, "status_display": "Accepted", "runtime": "23 ms", "url": "/submissions/detail/1362873861/", "is_pending": "Not Pending", "title": "Assign Cookies", "memory": "20.9 MB", "code": "\nclass Solution {\npublic:\n    int findContentChildren(vector<int>& g, vector<int>& s) {\n        sort(g.begin(), g.end());\n        sort(s.begin(), s.end());\n        int i = 0, j = 0;\n        while(i < g.size() && j < s.size()){\n            if(g[i] <= s[j]){\n                i++;\n            }\n            j++;\n        }\n        return i;\n    }\n};\n", "compare_result": "111111111111111111111", "title_slug": "assign-cookies", "has_notes": false, "flag_type": 1}, {"id": 1362873673, "question_id": 459, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724189176, "status": 10, "status_display": "Accepted", "runtime": "31 ms", "url": "/submissions/detail/1362873673/", "is_pending": "Not Pending", "title": "Repeated Substring Pattern", "memory": "47 MB", "code": "\nclass Solution {\npublic:\n    bool repeatedSubstringPattern(string s) {\n        int n = s.size();\n        for(int len = n / 2; len > 0; len--) {\n            if(n % len == 0) {\n                int num_repeats = n / len;\n                string substring = s.substr(0, len);\n                string new_s = \"\";\n                for(int i = 0; i < num_repeats; i++) {\n                    new_s += substring;\n                }\n                if(new_s == s) return true;\n            }\n        }\n        return false;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "repeated-substring-pattern", "has_notes": false, "flag_type": 1}, {"id": 1362873478, "question_id": 461, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724189157, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1362873478/", "is_pending": "Not Pending", "title": "Hamming Distance", "memory": "7.5 MB", "code": "\nclass Solution {\npublic:\n    int hammingDistance(int x, int y) {\n        int xorResult = x ^ y;\n        int hammingDist = 0;\n        while (xorResult) {\n            hammingDist += xorResult & 1;\n            xorResult >>= 1;\n        }\n        return hammingDist;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "hamming-distance", "has_notes": false, "flag_type": 1}, {"id": 1362873292, "question_id": 463, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724189137, "status": 10, "status_display": "Accepted", "runtime": "86 ms", "url": "/submissions/detail/1362873292/", "is_pending": "Not Pending", "title": "Island Perimeter", "memory": "102.2 MB", "code": "\nclass Solution {\npublic:\n    int islandPerimeter(vector<vector<int>>& grid) {\n        int rows = grid.size();\n        int cols = grid[0].size();\n        int perimeter = 0;\n\n        for(int i=0; i<rows; i++){\n            for(int j=0; j<cols; j++){\n                if(grid[i][j] == 1){\n                    perimeter += 4;\n\n                    // If there is a land cell to the left, subtract 2 from the perimeter\n                    if(j > 0 && grid[i][j-1] == 1){\n                        perimeter -= 2;\n                    }\n\n                    // If there is a land cell above, subtract 2 from the perimeter\n                    if(i > 0 && grid[i-1][j] == 1){\n                        perimeter -= 2;\n                    }\n                }\n            }\n        }\n\n        return perimeter;\n    }\n};\n", "compare_resulttitle_slug": "island-perimeter", "has_notes": false, "flag_type": 1}, {"id": 1362873070, "question_id": 476, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724189110, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1362873070/", "is_pending": "Not Pending", "title": "Number Complement", "memory": "7.5 MB", "code": "\nclass Solution {\npublic:\n    int findComplement(int num) {\n        unsigned mask = ~0;\n        while (num & mask) mask <<= 1;\n        return ~mask & ~num;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "number-complement", "has_notes": false, "flag_type": 1}, {"id": 1362872897, "question_id": 482, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724189092, "status": 10, "status_display": "Accepted", "runtime": "10 ms", "url": "/submissions/detail/1362872897/", "is_pending": "Not Pending", "title": "License Key Formatting", "memory": "9.8 MB", "code": "\nclass Solution {\npublic:\n    string licenseKeyFormatting(string s, int k) {\n        string result;\n        int count = 0;\n        \n        for(int i = s.size() - 1; i >= 0; i--) {\n            if(s[i] != '-') {\n                if(count == k) {\n                    result.push_back('-');\n                    count = 0;\n                }\n                result.push_back(toupper(s[i]));\n                count++;\n            }\n        }\n        \n        reverse(result.begin(), result.end());\n        return result;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111", "title_slug": "license-key-formatting", "has_notes": false, "flag_type": 1}, {"id": 1362872748, "question_id": 485, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724189074, "status": 10, "status_display": "Accepted", "runtime": "23 ms", "url": "/submissions/detail/1362872748/", "is_pending": "Not Pending", "title": "Max Consecutive Ones", "memory": "38.9 MB", "code": "\nclass Solution {\npublic:\n    int findMaxConsecutiveOnes(vector<int>& nums) {\n        int maxConsecutiveOnes = 0;\n        int currentConsecutiveOnes = 0;\n        for(int i = 0; i < nums.size(); i++) {\n            if(nums[i] == 1) {\n                currentConsecutiveOnes++;\n                if(currentConsecutiveOnes > maxConsecutiveOnes) {\n                    maxConsecutiveOnes = currentConsecutiveOnes;\n                }\n            } else {\n                currentConsecutiveOnes = 0;\n            }\n        }\n        return maxConsecutiveOnes;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111", "title_slug": "max-consecutive-ones", "has_notes": false, "flag_type": 1}, {"id": 1362872509, "question_id": 492, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724189048, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1362872509/", "is_pending": "Not Pending", "title": "Construct the Rectangle", "memory": "7.5 MB", "code": "\nclass Solution {\npublic:\n    vector<int> constructRectangle(int area) {\n        int w = sqrt(area);\n        while (area % w != 0) {\n            w--;\n        }\n        return {area / w, w};\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111", "title_slug": "construct-the-rectangle", "has_notes": false, "flag_type": 1}, {"id": 1362872332, "question_id": 495, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724189031, "status": 10, "status_display": "Accepted", "runtime": "26 ms", "url": "/submissions/detail/1362872332/", "is_pending": "Not Pending", "title": "Teemo Attacking", "memory": "28.5 MB", "code": "\nclass Solution {\npublic:\n    int findPoisonedDuration(vector<int>& timeSeries, int duration) {\n        if(timeSeries.empty()) return 0;\n        int total = 0;\n        for(int i = 0; i < timeSeries.size() - 1; ++i) {\n            total += min(timeSeries[i + 1] - timeSeries[i], duration);\n        }\n        return total + duration;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111", "title_slug": "teemo-attacking", "has_notes": false, "flag_type": 1}, {"id": 1362872101, "question_id": 496, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724189004, "status": 10, "status_display": "Accepted", "runtime": "4 ms", "url": "/submissions/detail/1362872101/", "is_pending": "Not Pending", "title": "Next Greater Element I", "memory": "12.5 MB", "code": "\nclass Solution {\npublic:\n    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {\n        unordered_map<int, int> m;\n        stack<int> s;\n        for (int num : nums2) {\n            while (!s.empty() && s.top() < num) {\n                m[s.top()] = num;\n                s.pop();\n            }\n            s.push(num);\n        }\n        vector<int> ans;\n        for (int num : nums1) {\n            ans.push_back(m.count(num) ? m[num] : -1);\n        }\n        return ans;\n    }\n};\n", "compare_result": "1111111111111111", "title_slug": "next-greater-element-i", "has_notes": false, "flag_type": 1}, {"id": 1362871845, "question_id": 500, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724188976, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1362871845/", "is_pending": "Not Pending", "title": "Keyboard Row", "memory": "8.4 MB", "code": "\nclass Solution {\npublic:\n    vector<string> findWords(vector<string>& words) {\n        vector<string> keyboard = {\"qwertyuiop\", \"asdfghjkl\", \"zxcvbnm\"};\n        vector<string> result;\n        for (string word : words) {\n            vector<bool> rows(3, true);\n            for (char c : word) {\n                c = tolower(c);\n                for (int i = 0; i < 3; ++i) {\n                    if (keyboard[i].find(c) == string::npos) {\n                        rows[i] = false;\n                    }\n                }\n            }\n            if (rows[0] || rows[1] || rows[2]) {\n                result.push_back(word);\n            }\n        }\n        return result;\n    }\n};\n", "compare_result": "1111111111111111111111111", "title_slug": "keyboard-row", "has_notes": false, "flag_type": 1}, {"id": 1362871636, "question_id": 501, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724188954, "status": 10, "status_display": "Accepted", "runtime": "14 ms", "url": "/submissions/detail/1362871636/", "is_pending": "Not Pending", "title": "Find Mode in Binary Search Tree", "memory": "22.7 MB", "code": "\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> findMode(TreeNode* root) {\n        vector<int> modes;\n        int maxCount = 0, count = 0, currVal = INT_MIN;\n        \n        function<void(TreeNode*)> inOrder = [&](TreeNode* node) {\n            if (!node) return;\n            inOrder(node->left);\n            \n            if (node->val != currVal) {\n                count = 0;\n                currVal = node->val;\n            }\n            if (++count > maxCount) {\n                maxCount = count;\n                modes.clear();\n            }\n            if (count == maxCount) {\n                modes.push_back(currVal);\n            }\n            \n            inOrder(node->right);\n        };\n        \n        inOrder(root);\n        return modes;\n    }\n};\n", "compare_result": "111111111111111111111111", "title_slug": "find-mode-in-binary-search-tree", "has_notes": false, "flag_type": 1}, {"id": 1362871364, "question_id": 504, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724188922, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1362871364/", "is_pending": "Not Pending", "title": "Base 7", "memory": "8 MB", "code": "\nclass Solution {\npublic:\n    string convertToBase7(int num) {\n        if (num == 0) return \"0\";\n        string res = \"\";\n        bool isNegative = num < 0;\n        num = abs(num);\n        while (num) {\n            res = to_string(num % 7) + res;\n            num /= 7;\n        }\n        return isNegative ? \"-\" + res : res;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "base-7", "has_notes": false, "flag_type": 1}, {"id": 1362871150, "question_id": 506, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724188902, "status": 10, "status_display": "Accepted", "runtime": "7 ms", "url": "/submissions/detail/1362871150/", "is_pending": "Not Pending", "title": "Relative Ranks", "memory": "15 MB", "code": "\nclass Solution {\npublic:\n    vector<string> findRelativeRanks(vector<int>& score) {\n        int n = score.size();\n        vector<string> ranks(n);\n        vector<pair<int, int>> score_index;\n        \n        for(int i = 0; i < n; i++) {\n            score_index.push_back({score[i], i});\n        }\n        \n        sort(score_index.begin(), score_index.end(), greater<pair<int, int>>());\n        \n        for(int i = 0; i < n; i++) {\n            if(i == 0) {\n                ranks[score_index[i].second] = \"Gold Medal\";\n            } else if(i == 1) {\n                ranks[score_index[i].second] = \"Silver Medal\";\n            } else if(i == 2) {\n                ranks[score_index[i].second] = \"Bronze Medal\";\n            } else {\n                ranks[score_index[i].second] = to_string(i + 1);\n            }\n        }\n        \n        return ranks;\n    }\n};\n", "compare_result": "111111111111111111", "title_slug": "relative-ranks", "has_notes": false, "flag_type": 1}, {"id": 1362870869, "question_id": 507, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724188873, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1362870869/", "is_pending": "Not Pending", "title": "Perfect Number", "memory": "7.3 MB", "code": "\nclass Solution {\npublic:\n    bool checkPerfectNumber(int num) {\n        if (num == 1) return false;\n        int sum = 1;\n        for (int i = 2; i * i <= num; i++) {\n            if (num % i == 0) {\n                sum += i;\n                if (i * i != num) {\n                    sum += num / i;\n                }\n            }\n        }\n        return sum == num;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "perfect-number", "has_notes": false, "flag_type": 1}, {"id": 1362870676, "question_id": 520, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724188852, "status": 10, "status_display": "Accepted", "runtime": "4 ms", "url": "/submissions/detail/1362870676/", "is_pending": "Not Pending", "title": "Detect Capital", "memory": "7.8 MB", "code": "\nclass Solution {\npublic:\n    bool detectCapitalUse(string word) {\n        int count = 0;\n        for(int i=0; i<word.size(); i++)\n            if(isupper(word[i])) count++;\n        return count==0 || count==word.size() || (count==1 && isupper(word[0]));\n    }\n};\n", "compare_resulttitle_slug": "detect-capital", "has_notes": false, "flag_type": 1}, {"id": 1362870509, "question_id": 521, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724188831, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1362870509/", "is_pending": "Not Pending", "title": "Longest Uncommon Subsequence I", "memory": "7.7 MB", "code": "\nclass Solution {\npublic:\n    int findLUSlength(string a, string b) {\n        if (a == b)\n            return -1;\n        else\n            return max(a.size(), b.size());\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111", "title_slug": "longest-uncommon-subsequence-i", "has_notes": false, "flag_type": 1}, {"id": 1362870354, "question_id": 530, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724188814, "status": 10, "status_display": "Accepted", "runtime": "10 ms", "url": "/submissions/detail/1362870354/", "is_pending": "Not Pending", "title": "Minimum Absolute Difference in BST", "memory": "24.1 MB", "code": "\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int getMinimumDifference(TreeNode* root) {\n        int min_diff = INT_MAX;\n        TreeNode* prev = nullptr;\n        inorder(root, prev, min_diff);\n        return min_diff;\n    }\n    \n    void inorder(TreeNode* node, TreeNode*& prev, int& min_diff) {\n        if (node == nullptr) {\n            return;\n        }\n        inorder(node->left, prev, min_diff);\n        if (prev != nullptr) {\n            min_diff = min(min_diff, node->val - prev->val);\n        }\n        prev = node;\n        inorder(node->right, prev, min_diff);\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "minimum-absolute-difference-in-bst", "has_notes": false, "flag_type": 1}, {"id": 1362870107, "question_id": 541, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724188788, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1362870107/", "is_pending": "Not Pending", "title": "Reverse String II", "memory": "8.9 MB", "code": "\nclass Solution {\npublic:\n    string reverseStr(string s, int k) {\n        for (int i = 0; i < s.size(); i += 2 * k) {\n            if (i + k <= s.size()) {\n                reverse(s.begin() + i, s.begin() + i + k);\n                continue;\n            }\n            reverse(s.begin() + i, s.end());\n        }\n        return s;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111", "title_slug": "reverse-string-ii", "has_notes": false, "flag_type": 1}, {"id": 1362869842, "question_id": 543, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724188762, "status": 10, "status_display": "Accepted", "runtime": "11 ms", "url": "/submissions/detail/1362869842/", "is_pending": "Not Pending", "title": "Diameter of Binary Tree", "memory": "22.4 MB", "code": "\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int diameterOfBinaryTree(TreeNode* root) {\n        int diameter = 0;\n        height(root, diameter);\n        return diameter;\n    }\n    \nprivate:\n    int height(TreeNode* node, int& diameter) {\n        if (node == nullptr) {\n            return 0;\n        }\n        \n        int leftHeight = height(node->left, diameter);\n        int rightHeight = height(node->right, diameter);\n        \n        // update the diameter if the sum of heights of left and right subtrees is larger\n        diameter = max(diameter, leftHeight + rightHeight);\n        \n        // return the height of the current node\n        return max(leftHeight, rightHeight) + 1;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "diameter-of-binary-tree", "has_notes": false, "flag_type": 1}, {"id": 1362869619, "question_id": 551, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724188737, "status": 10, "status_display": "Accepted", "runtime": "4 ms", "url": "/submissions/detail/1362869619/", "is_pending": "Not Pending", "title": "Student Attendance Record I", "memory": "7.8 MB", "code": "\nclass Solution {\npublic:\n    bool checkRecord(string s) {\n        int countA = 0;\n        for(int i = 0; i < s.size(); i++) {\n            if(s[i] == 'A') {\n                countA++;\n                if(countA >= 2) return false;\n            }\n            if(i <= s.size() - 3 && s[i] == 'L' && s[i+1] == 'L' && s[i+2] == 'L') return false;\n        }\n        return true;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "student-attendance-record-i", "has_notes": false, "flag_type": 1}, {"id": 1362869384, "question_id": 557, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724188713, "status": 10, "status_display": "Accepted", "runtime": "13 ms", "url": "/submissions/detail/1362869384/", "is_pending": "Not Pending", "title": "Reverse Words in a String III", "memory": "10.9 MB", "code": "\nclass Solution {\npublic:\n    string reverseWords(string s) {\n        int start = 0;\n        for (int end = 0; end < s.length(); end++) {\n            if (s[end] == ' ') {\n                reverse(s.begin() + start, s.begin() + end);\n                start = end + 1;\n            }\n        }\n        reverse(s.begin() + start, s.end());\n        return s;\n    }\n};\n", "compare_result": "11111111111111111111111111111", "title_slug": "reverse-words-in-a-string-iii", "has_notes": false, "flag_type": 1}, {"id": 1362869215, "question_id": 561, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724188695, "status": 10, "status_display": "Accepted", "runtime": "41 ms", "url": "/submissions/detail/1362869215/", "is_pending": "Not Pending", "title": "Array Partition", "memory": "32.1 MB", "code": "\nclass Solution {\npublic:\n    int arrayPairSum(vector<int>& nums) {\n        sort(nums.begin(), nums.end());\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i += 2) {\n            sum += nums[i];\n        }\n        return sum;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "array-partition", "has_notes": false, "flag_type": 1}, {"id": 1362869087, "question_id": 563, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724188679, "status": 10, "status_display": "Accepted", "runtime": "10 ms", "url": "/submissions/detail/1362869087/", "is_pending": "Not Pending", "title": "Binary Tree Tilt", "memory": "22.4 MB", "code": "\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int findTilt(TreeNode* root) {\n        int tilt = 0;\n        postOrder(root, tilt);\n        return tilt;\n    }\n    \nprivate:\n    int postOrder(TreeNode* node, int& tilt) {\n        if (!node) {\n            return 0;\n        }\n        \n        int left = postOrder(node->left, tilt);\n        int right = postOrder(node->right, tilt);\n        \n        tilt += abs(left - right);\n        \n        return left + right + node->val;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "binary-tree-tilt", "has_notes": false, "flag_type": 1}, {"id": 1362868854, "question_id": 566, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724188655, "status": 10, "status_display": "Accepted", "runtime": "6 ms", "url": "/submissions/detail/1362868854/", "is_pending": "Not Pending", "title": "Reshape the Matrix", "memory": "13.4 MB", "code": "\nclass Solution {\npublic:\n    vector<vector<int>> matrixReshape(vector<vector<int>>& mat, int r, int c) {\n        int m = mat.size(), n = mat[0].size();\n        if (m * n != r * c) {\n            return mat;\n        }\n        vector<vector<int>> reshaped(r, vector<int>(c));\n        for (int i = 0; i < m * n; ++i) {\n            reshaped[i / c][i % c] = mat[i / n][i % n];\n        }\n        return reshaped;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111", "title_slug": "reshape-the-matrix", "has_notes": false, "flag_type": 1}, {"id": 1362868705, "question_id": 572, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724188636, "status": 10, "status_display": "Accepted", "runtime": "11 ms", "url": "/submissions/detail/1362868705/", "is_pending": "Not Pending", "title": "Subtree of Another Tree", "memory": "28 MB", "code": "\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isSubtree(TreeNode* root, TreeNode* subRoot) {\n        if (!root) return false;\n        if (isSame(root, subRoot)) return true;\n        return isSubtree(root->left, subRoot) || isSubtree(root->right, subRoot);\n    }\n    \n    bool isSame(TreeNode* root, TreeNode* subRoot) {\n        if (!root && !subRoot) return true;\n        if (!root || !subRoot) return false;\n        if (root->val != subRoot->val) return false;\n        return isSame(root->left, subRoot->left) && isSame(root->right, subRoot->right);\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "subtree-of-another-tree", "has_notes": false, "flag_type": 1}, {"id": 1362868473, "question_id": 575, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724188611, "status": 10, "status_display": "Accepted", "runtime": "207 ms", "url": "/submissions/detail/1362868473/", "is_pending": "Not Pending", "title": "Distribute Candies", "memory": "120.2 MB", "code": "\nclass Solution {\npublic:\n    int distributeCandies(vector<int>& candyType) {\n        unordered_set<int> uniqueCandies(candyType.begin(), candyType.end());\n        return min(uniqueCandies.size(), candyType.size() / 2);\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "distribute-candies", "has_notes": false, "flag_type": 1}, {"id": 1362868264, "question_id": 577, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724188588, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1362868264/", "is_pending": "Not Pending", "title": "Employee Bonus", "memory": "N/A", "code": "sql\nSELECT Employee.name, Bonus.bonus\nFROM Employee \nLEFT JOIN Bonus \nON Employee.empId = Bonus.empId\nWHERE Bonus.bonus < 1000 OR Bonus.bonus IS NULL;\n", "compare_result": null, "title_slug": "employee-bonus", "has_notes": false, "flag_type": 1}, {"id": 1362868110, "question_id": 584, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724188570, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1362868110/", "is_pending": "Not Pending", "title": "Find Customer Referee", "memory": "N/A", "code": "Write your MySQL query statement below\n\nSELECT name \nFROM Customer \nWHERE referee_id != 2 OR referee_id IS NULL", "compare_result": null, "title_slug": "find-customer-referee", "has_notes": false, "flag_type": 1}, {"id": 1362868006, "question_id": 586, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724188560, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1362868006/", "is_pending": "Not Pending", "title": "Customer Placing the Largest Number of Orders", "memory": "N/A", "code": "sql\nSELECT customer_number\nFROM Orders\nGROUP BY customer_number\nORDER BY COUNT(order_number) DESC\nLIMIT 1;\n", "compare_result": null, "title_slug": "customer-placing-the-largest-number-of-orders", "has_notes": false, "flag_type": 1}, {"id": 1362867862, "question_id": 594, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724188544, "status": 10, "status_display": "Accepted", "runtime": "50 ms", "url": "/submissions/detail/1362867862/", "is_pending": "Not Pending", "title": "Longest Harmonious Subsequence", "memory": "44 MB", "code": "\nclass Solution {\npublic:\n    int findLHS(vector<int>& nums) {\n        unordered_map<int, int> count;\n        for (int num : nums) {\n            count[num]++;\n        }\n        int res = 0;\n        for (auto& [num, freq] : count) {\n            if (count.count(num + 1)) {\n                res = max(res, freq + count[num + 1]);\n            }\n        }\n        return res;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "longest-harmonious-subsequence", "has_notes": false, "flag_type": 1}, {"id": 1362867681, "question_id": 595, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724188521, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1362867681/", "is_pending": "Not Pending", "title": "Big Countries", "memory": "N/A", "code": "Write your MySQL query statement below\n\nSELECT name, population, area\nFROM World\nWHERE area >= 3000000 OR population >= 25000000", "compare_result": null, "title_slug": "big-countries", "has_notes": false, "flag_type": 1}, {"id": 1362867587, "question_id": 596, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724188511, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1362867587/", "is_pending": "Not Pending", "title": "Classes More Than 5 Students", "memory": "N/A", "code": "sql\nSELECT class\nFROM Courses\nGROUP BY class\nHAVING COUNT(student) >= 5;\n", "compare_result": null, "title_slug": "classes-more-than-5-students", "has_notes": false, "flag_type": 1}, {"id": 1362867487, "question_id": 598, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724188499, "status": 10, "status_display": "Accepted", "runtime": "9 ms", "url": "/submissions/detail/1362867487/", "is_pending": "Not Pending", "title": "Range Addition II", "memory": "14.9 MB", "code": "\nclass Solution {\npublic:\n    int maxCount(int m, int n, vector<vector<int>>& ops) {\n        for(auto op : ops) {\n            m = min(m, op[0]);\n            n = min(n, op[1]);\n        }\n        return m * n;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "range-addition-ii", "has_notes": false, "flag_type": 1}, {"id": 1362867305, "question_id": 599, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724188482, "status": 10, "status_display": "Accepted", "runtime": "70 ms", "url": "/submissions/detail/1362867305/", "is_pending": "Not Pending", "title": "Minimum Index Sum of Two Lists", "memory": "40.7 MB", "code": "\nclass Solution {\npublic:\n    vector<string> findRestaurant(vector<string>& list1, vector<string>& list2) {\n        unordered_map<string, int> map1;\n        for(int i = 0; i < list1.size(); i++) {\n            map1[list1[i]] = i;\n        }\n        \n        vector<string> result;\n        int minSum = INT_MAX;\n        for(int i = 0; i < list2.size(); i++) {\n            if(map1.count(list2[i])) {\n                int sum = i + map1[list2[i]];\n                if(sum < minSum) {\n                    result.clear();\n                    result.push_back(list2[i]);\n                    minSum = sum;\n                } else if(sum == minSum) {\n                    result.push_back(list2[i]);\n                }\n            }\n        }\n        \n        return result;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "minimum-index-sum-of-two-lists", "has_notes": false, "flag_type": 1}, {"id": 1362867047, "question_id": 605, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724188456, "status": 10, "status_display": "Accepted", "runtime": "7 ms", "url": "/submissions/detail/1362867047/", "is_pending": "Not Pending", "title": "Can Place Flowers", "memory": "23.1 MB", "code": "\nclass Solution {\npublic:\n    bool canPlaceFlowers(vector<int>& flowerbed, int n) {\n        int count = 0;\n        for(int i = 0; i < flowerbed.size(); i++) {\n            if(flowerbed[i] == 0 && (i == 0 || flowerbed[i - 1] == 0) && (i == flowerbed.size() - 1 || flowerbed[i + 1] == 0)) {\n                flowerbed[i] = 1;\n                count++;\n            }\n            if(count >= n)\n                return true;\n        }\n        return false;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "can-place-flowers", "has_notes": false, "flag_type": 1}, {"id": 1362866822, "question_id": 607, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724188432, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1362866822/", "is_pending": "Not Pending", "title": "Sales Person", "memory": "N/A", "code": "sql\nSELECT name\nFROM SalesPerson\nWHERE sales_id NOT IN (\n    SELECT sales_id\n    FROM Orders\n    WHERE com_id IN (\n        SELECT com_id\n        FROM Company\n        WHERE name = 'RED'\n    )\n);\n", "compare_result": null, "title_slug": "sales-person", "has_notes": false, "flag_type": 1}, {"id": 1362866704, "question_id": 610, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724188420, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1362866704/", "is_pending": "Not Pending", "title": "Triangle Judgement", "memory": "N/A", "code": "sql\nSELECT x, y, z,\nCASE \n    WHEN x + y > z AND x + z > y AND y + z > x THEN 'Yes'\n    ELSE 'No'\nEND AS 'triangle'\nFROM Triangle;\n", "compare_result": null, "title_slug": "triangle-judgement", "has_notes": false, "flag_type": 1}, {"id": 1362866577, "question_id": 617, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724188407, "status": 10, "status_display": "Accepted", "runtime": "31 ms", "url": "/submissions/detail/1362866577/", "is_pending": "Not Pending", "title": "Merge Two Binary Trees", "memory": "33.2 MB", "code": "\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {\n        if(root1 == nullptr)\n            return root2;\n        if(root2 == nullptr)\n            return root1;\n        \n        root1->val += root2->val;\n        root1->left = mergeTrees(root1->left, root2->left);\n        root1->right = mergeTrees(root1->right, root2->right);\n        \n        return root1;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "merge-two-binary-trees", "has_notes": false, "flag_type": 1}, {"id": 1362866357, "question_id": 619, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724188385, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1362866357/", "is_pending": "Not Pending", "title": "Biggest Single Number", "memory": "N/A", "code": "sql\nSELECT MAX(num) as num\nFROM (\n    SELECT num\n    FROM MyNumbers\n    GROUP BY num\n    HAVING COUNT(num) = 1\n) as single_nums\n", "compare_result": null, "title_slug": "biggest-single-number", "has_notes": false, "flag_type": 1}, {"id": 1362866265, "question_id": 620, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724188373, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1362866265/", "is_pending": "Not Pending", "title": "Not Boring Movies", "memory": "N/A", "code": "sql\nSELECT * \nFROM Cinema \nWHERE id % 2 = 1 AND description != 'boring' \nORDER BY rating DESC;\n", "compare_result": null, "title_slug": "not-boring-movies", "has_notes": false, "flag_type": 1}, {"id": 1362866163, "question_id": 627, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724188360, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1362866163/", "is_pending": "Not Pending", "title": "Swap Salary", "memory": "N/A", "code": "Write your MySQL query statement below\n\nUPDATE Salary\nSET sex = CASE sex\n          WHEN 'm' THEN 'f'\n          ELSE 'm'\n          END", "compare_result": null, "title_slug": "swap-salary", "has_notes": false, "flag_type": 1}, {"id": 1362866045, "question_id": 628, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724188349, "status": 10, "status_display": "Accepted", "runtime": "40 ms", "url": "/submissions/detail/1362866045/", "is_pending": "Not Pending", "title": "Maximum Product of Three Numbers", "memory": "31.6 MB", "code": "\nclass Solution {\npublic:\n    int maximumProduct(vector<int>& nums) {\n        sort(nums.begin(), nums.end());\n        int n = nums.size();\n        return max(nums[0]*nums[1]*nums[n-1], nums[n-1]*nums[n-2]*nums[n-3]);\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "maximum-product-of-three-numbers", "has_notes": false, "flag_type": 1}, {"id": 1362865878, "question_id": 637, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724188331, "status": 10, "status_display": "Accepted", "runtime": "8 ms", "url": "/submissions/detail/1362865878/", "is_pending": "Not Pending", "title": "Average of Levels in Binary Tree", "memory": "22.7 MB", "code": "\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<double> averageOfLevels(TreeNode* root) {\n        vector<double> result;\n        queue<TreeNode*> q;\n        if(root != nullptr) q.push(root);\n        while(!q.empty()){\n            long temp = 0;\n            int s = q.size();\n            for(int i = 0; i < s; i++){\n                TreeNode* t = q.front();\n                q.pop();\n                if(t->left != nullptr) q.push(t->left);\n                if(t->right != nullptr) q.push(t->right);\n                temp += t->val;\n            }\n            result.push_back(static_cast<double>(temp) / s);\n        }\n        return result;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "average-of-levels-in-binary-tree", "has_notes": false, "flag_type": 1}, {"id": 1362865667, "question_id": 643, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724188307, "status": 10, "status_display": "Accepted", "runtime": "122 ms", "url": "/submissions/detail/1362865667/", "is_pending": "Not Pending", "title": "Maximum Average Subarray I", "memory": "112.8 MB", "code": "\nclass Solution {\npublic:\n    double findMaxAverage(vector<int>& nums, int k) {\n        double sum = 0;\n        for(int i = 0; i < k; i++)\n            sum += nums[i];\n        double res = sum;\n        for(int i = k; i < nums.size(); i++){\n            sum += nums[i] - nums[i-k];\n            res = max(res, sum);\n        }\n        return res / k;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "maximum-average-subarray-i", "has_notes": false, "flag_type": 1}, {"id": 1362865492, "question_id": 645, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724188289, "status": 10, "status_display": "Accepted", "runtime": "17 ms", "url": "/submissions/detail/1362865492/", "is_pending": "Not Pending", "title": "Set Mismatch", "memory": "24.9 MB", "code": "\nclass Solution {\npublic:\n    vector<int> findErrorNums(vector<int>& nums) {\n        vector<int> res(2, 0); // Initialize result vector\n        vector<int> count(nums.size(), 0); // Initialize count vector\n\n        // Count the occurrence of each number\n        for(int i = 0; i < nums.size(); i++) {\n            count[nums[i] - 1]++;\n        }\n\n        // Find the number that occurs twice and the number that is missing\n        for(int i = 0; i < count.size(); i++) {\n            if(count[i] == 2) {\n                res[0] = i + 1;\n            } else if(count[i] == 0) {\n                res[1] = i + 1;\n            }\n        }\n\n        return res;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111", "title_slug": "set-mismatch", "has_notes": false, "flag_type": 1}, {"id": 1362865277, "question_id": 653, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724188265, "status": 10, "status_display": "Accepted", "runtime": "35 ms", "url": "/submissions/detail/1362865277/", "is_pending": "Not Pending", "title": "Two Sum IV - Input is a BST", "memory": "38.8 MB", "code": "\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool findTarget(TreeNode* root, int k) {\n        unordered_set<int> set;\n        return find(root, k, set);\n    }\n    \n    bool find(TreeNode* root, int k, unordered_set<int>& set) {\n        if (!root) return false;\n        if (set.count(k - root->val)) return true;\n        set.insert(root->val);\n        return find(root->left, k, set) || find(root->right, k, set);\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "two-sum-iv-input-is-a-bst", "has_notes": false, "flag_type": 1}, {"id": 1362865026, "question_id": 657, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724188237, "status": 10, "status_display": "Accepted", "runtime": "9 ms", "url": "/submissions/detail/1362865026/", "is_pending": "Not Pending", "title": "Robot Return to Origin", "memory": "9.5 MB", "code": "\nclass Solution {\npublic:\n    bool judgeCircle(string moves) {\n        int x = 0, y = 0;\n        for (char move : moves) {\n            switch (move) {\n                case 'U': y++; break;\n                case 'D': y--; break;\n                case 'R': x++; break;\n                case 'L': x--; break;\n            }\n        }\n        return x == 0 && y == 0;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "robot-return-to-origin", "has_notes": false, "flag_type": 1}, {"id": 1362864802, "question_id": 661, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 21\u00c2\u00a0hours", "timestamp": 1724188215, "status": 10, "status_display": "Accepted", "runtime": "43 ms", "url": "/submissions/detail/1362864802/", "is_pending": "Not Pending", "title": "Image Smoother", "memory": "24.9 MB", "code": "\nclass Solution {\npublic:\n    vector<vector<int>> imageSmoother(vector<vector<int>>& img) {\n        int m = img.size();\n        int n = img[0].size();\n        vector<vector<int>> res(m, vector<int>(n, 0));\n        for(int i = 0; i < m; i++) {\n            for(int j = 0; j < n; j++) {\n                int count = 0;\n                for(int r = i - 1; r <= i + 1; r++) {\n                    for(int c = j - 1; c <= j + 1; c++) {\n                        if(r >= 0 && r < m && c >= 0 && c < n) {\n                            res[i][j] += img[r][c];\n                            count++;\n                        }\n                    }\n                }\n                res[i][j] /= count;\n            }\n        }\n        return res;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "image-smoother", "has_notes": false, "flag_type": 1}, {"id": 1362864584, "question_id": 671, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 22\u00c2\u00a0hours", "timestamp": 1724188191, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1362864584/", "is_pending": "Not Pending", "title": "Second Minimum Node In a Binary Tree", "memory": "8.8 MB", "code": "\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int findSecondMinimumValue(TreeNode* root) {\n        if (!root) return -1;\n        int ans = -1;\n        int rootvalue = root->val;\n        queue<TreeNode*> q;\n        q.push(root);\n        while (!q.empty()) {\n            TreeNode* node = q.front(); q.pop();\n            if (!node) continue;\n            if (node->val > rootvalue) {\n                if (ans == -1) ans = node->val;\n                else ans = min(ans, node->val);\n            }\n            q.push(node->left);\n            q.push(node->right);\n        }\n        return ans;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111", "title_slug": "second-minimum-node-in-a-binary-tree", "has_notes": false, "flag_type": 1}, {"id": 1362864316, "question_id": 674, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 22\u00c2\u00a0hours", "timestamp": 1724188163, "status": 10, "status_display": "Accepted", "runtime": "11 ms", "url": "/submissions/detail/1362864316/", "is_pending": "Not Pending", "title": "Longest Continuous Increasing Subsequence", "memory": "13.5 MB", "code": "\nclass Solution {\npublic:\n    int findLengthOfLCIS(vector<int>& nums) {\n        int n = nums.size();\n        if(n == 0) return 0;\n        int maxLen = 1;\n        int curLen = 1;\n        for(int i = 1; i < n; i++) {\n            if(nums[i] > nums[i-1]) {\n                curLen++;\n                maxLen = max(maxLen, curLen);\n            } else {\n                curLen = 1;\n            }\n        }\n        return maxLen;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111", "title_slug": "longest-continuous-increasing-subsequence", "has_notes": false, "flag_type": 1}, {"id": 1362864128, "question_id": 680, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 22\u00c2\u00a0hours", "timestamp": 1724188143, "status": 10, "status_display": "Accepted", "runtime": "55 ms", "url": "/submissions/detail/1362864128/", "is_pending": "Not Pending", "title": "Valid Palindrome II", "memory": "25.7 MB", "code": "\nclass Solution {\npublic:\n    bool validPalindrome(string s) {\n        for (int i = 0, j = s.size() - 1; i < j; i++, j--) {\n            if (s[i] != s[j]) {\n                return isPalindrome(s, i, j - 1) || isPalindrome(s, i + 1, j);\n            }\n        }\n        return true;\n    }\n\nprivate:\n    bool isPalindrome(string s, int i, int j) {\n        while (i < j) {\n            if (s[i++] != s[j--]) {\n                return false;\n            }\n        }\n        return true;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "valid-palindrome-ii", "has_notes": false, "flag_type": 1}, {"id": 1362863951, "question_id": 682, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 22\u00c2\u00a0hours", "timestamp": 1724188122, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1362863951/", "is_pending": "Not Pending", "title": "Baseball Game", "memory": "12.2 MB", "code": "\nclass Solution {\npublic:\n    int calPoints(vector<string>& ops) {\n        vector<int> record;\n        for (string op : ops) {\n            if (op == \"+\") {\n                record.push_back(record[record.size() - 1] + record[record.size() - 2]);\n            } else if (op == \"D\") {\n                record.push_back(2 * record[record.size() - 1]);\n            } else if (op == \"C\") {\n                record.pop_back();\n            } else {\n                record.push_back(stoi(op));\n            }\n        }\n        return accumulate(record.begin(), record.end(), 0);\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111", "title_slug": "baseball-game", "has_notes": false, "flag_type": 1}, {"id": 1362863745, "question_id": 693, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 22\u00c2\u00a0hours", "timestamp": 1724188102, "status": 10, "status_display": "Accepted", "runtime": "2 ms", "url": "/submissions/detail/1362863745/", "is_pending": "Not Pending", "title": "Binary Number with Alternating Bits", "memory": "7.3 MB", "code": "\nclass Solution {\npublic:\n    bool hasAlternatingBits(int n) {\n        int lastBit = n & 1;\n        n >>= 1;\n        while (n > 0) {\n            if ((n & 1) == lastBit) {\n                return false;\n            }\n            lastBit = n & 1;\n            n >>= 1;\n        }\n        return true;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "binary-number-with-alternating-bits", "has_notes": false, "flag_type": 1}, {"id": 1362863584, "question_id": 696, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 22\u00c2\u00a0hours", "timestamp": 1724188085, "status": 10, "status_display": "Accepted", "runtime": "21 ms", "url": "/submissions/detail/1362863584/", "is_pending": "Not Pending", "title": "Count Binary Substrings", "memory": "12 MB", "code": "\nclass Solution {\npublic:\n    int countBinarySubstrings(string s) {\n        int prevCount = 0, currCount = 1, result = 0;\n        for (int i = 1; i < s.length(); i++) {\n            if (s[i] == s[i - 1]) {\n                currCount++;\n            } else {\n                result += min(prevCount, currCount);\n                prevCount = currCount;\n                currCount = 1;\n            }\n        }\n        result += min(prevCount, currCount);\n        return result;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "count-binary-substrings", "has_notes": false, "flag_type": 1}, {"id": 1362863381, "question_id": 697, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 22\u00c2\u00a0hours", "timestamp": 1724188062, "status": 10, "status_display": "Accepted", "runtime": "28 ms", "url": "/submissions/detail/1362863381/", "is_pending": "Not Pending", "title": "Degree of an Array", "memory": "29.5 MB", "code": "\nclass Solution {\npublic:\n    int findShortestSubArray(vector<int>& nums) {\n        unordered_map<int, vector<int>> mp;\n        for (int i = 0; i < nums.size(); ++i) {\n            if (mp[nums[i]].empty()) {\n                mp[nums[i]].resize(3, 0);\n                mp[nums[i]][0] = 1;\n                mp[nums[i]][1] = mp[nums[i]][2] = i;\n            } else {\n                ++mp[nums[i]][0];\n                mp[nums[i]][2] = i;\n            }\n        }\n        int degree = INT_MIN, res = INT_MAX;\n        for (auto &kvp : mp) {\n            if (kvp.second[0] > degree) {\n                degree = kvp.second[0];\n                res = kvp.second[2] - kvp.second[1] + 1;\n            } else if (kvp.second[0] == degree) {\n                res = min(res, kvp.second[2] - kvp.second[1] + 1);\n            }\n        }\n        return res;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "degree-of-an-array", "has_notes": false, "flag_type": 1}, {"id": 1362863150, "question_id": 717, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 22\u00c2\u00a0hours", "timestamp": 1724188038, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1362863150/", "is_pending": "Not Pending", "title": "1-bit and 2-bit Characters", "memory": "12.3 MB", "code": "\nclass Solution {\npublic:\n    bool isOneBitCharacter(vector<int>& bits) {\n        int i = 0;\n        while (i < bits.size() - 1) {\n            if (bits[i] == 1) {\n                i += 2;\n            } else {\n                i += 1;\n            }\n        }\n        return i == bits.size() - 1;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "1-bit-and-2-bit-characters", "has_notes": false, "flag_type": 1}, {"id": 1362862935, "question_id": 724, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 22\u00c2\u00a0hours", "timestamp": 1724188016, "status": 10, "status_display": "Accepted", "runtime": "8 ms", "url": "/submissions/detail/1362862935/", "is_pending": "Not Pending", "title": "Find Pivot Index", "memory": "34.5 MB", "code": "\nclass Solution {\npublic:\n    int pivotIndex(vector<int>& nums) {\n        int totalSum = 0;\n        for(int num : nums) {\n            totalSum += num;\n        }\n        \n        int leftSum = 0;\n        for(int i = 0; i < nums.size(); ++i) {\n            if(leftSum == totalSum - leftSum - nums[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        \n        return -1;\n    }\n};\n", "compare_resulttitle_slug": "find-pivot-index", "has_notes": false, "flag_type": 1}, {"id": 1362862759, "question_id": 728, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 22\u00c2\u00a0hours", "timestamp": 1724187996, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1362862759/", "is_pending": "Not Pending", "title": "Self Dividing Numbers", "memory": "7.8 MB", "code": "\nclass Solution {\npublic:\n    vector<int> selfDividingNumbers(int left, int right) {\n        vector<int> result;\n        for(int i = left; i <= right; i++){\n            if(isSelfDividing(i)){\n                result.push_back(i);\n            }\n        }\n        return result;\n    }\n    \n    bool isSelfDividing(int num){\n        for(int n = num; n > 0; n /= 10){\n            if((n % 10 == 0) || (num % (n % 10) != 0)){\n                return false;\n            }\n        }\n        return true;\n    }\n};\n", "compare_result": "1111111111111111111111111111111", "title_slug": "self-dividing-numbers", "has_notes": false, "flag_type": 1}, {"id": 1362862540, "question_id": 733, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 22\u00c2\u00a0hours", "timestamp": 1724187971, "status": 10, "status_display": "Accepted", "runtime": "8 ms", "url": "/submissions/detail/1362862540/", "is_pending": "Not Pending", "title": "Flood Fill", "memory": "16.8 MB", "code": "\nclass Solution {\npublic:\n    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int newColor) {\n        int oldColor = image[sr][sc];\n        if (oldColor != newColor) dfs(image, sr, sc, oldColor, newColor);\n        return image;\n    }\n    \n    void dfs(vector<vector<int>>& image, int i, int j, int oldColor, int newColor) {\n        int m = image.size(), n = image[0].size();\n        if (i < 0 || i == m || j < 0 || j == n || image[i][j] != oldColor) return;\n        image[i][j] = newColor;\n        dfs(image, i - 1, j, oldColor, newColor);\n        dfs(image, i + 1, j, oldColor, newColor);\n        dfs(image, i, j - 1, oldColor, newColor);\n        dfs(image, i, j + 1, oldColor, newColor);\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "flood-fill", "has_notes": false, "flag_type": 1}, {"id": 1362862262, "question_id": 742, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 22\u00c2\u00a0hours", "timestamp": 1724187944, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1362862262/", "is_pending": "Not Pending", "title": "To Lower Case", "memory": "7.5 MB", "code": "\nclass Solution {\npublic:\n    string toLowerCase(string s) {\n        for(int i=0; i<s.size(); i++){\n            if(s[i] >= 'A' && s[i] <= 'Z'){\n                s[i] = s[i] - 'A' + 'a';\n            }\n        }\n        return s;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "to-lower-case", "has_notes": false, "flag_type": 1}, {"id": 1362862093, "question_id": 745, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 22\u00c2\u00a0hours", "timestamp": 1724187927, "status": 10, "status_display": "Accepted", "runtime": "15 ms", "url": "/submissions/detail/1362862093/", "is_pending": "Not Pending", "title": "Find Smallest Letter Greater Than Target", "memory": "19.9 MB", "code": "\nclass Solution {\npublic:\n    char nextGreatestLetter(vector<char>& letters, char target) {\n        int low = 0, high = letters.size();\n        while (low < high) {\n            int mid = low + (high - low) / 2;\n            if (letters[mid] <= target) low = mid + 1;\n            else high = mid;\n        }\n        return letters[low % letters.size()];\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "find-smallest-letter-greater-than-target", "has_notes": false, "flag_type": 1}, {"id": 1362861920, "question_id": 747, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 22\u00c2\u00a0hours", "timestamp": 1724187907, "status": 10, "status_display": "Accepted", "runtime": "5 ms", "url": "/submissions/detail/1362861920/", "is_pending": "Not Pending", "title": "Min Cost Climbing Stairs", "memory": "16.8 MB", "code": "\nclass Solution {\npublic:\n    int minCostClimbingStairs(vector<int>& cost) {\n        int n = cost.size();\n        vector<int> dp(n+1, 0);\n        for(int i=2; i<=n; i++) {\n            dp[i] = min(dp[i-1] + cost[i-1], dp[i-2] + cost[i-2]);\n        }\n        return dp[n];\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "min-cost-climbing-stairs", "has_notes": false, "flag_type": 1}, {"id": 1362861754, "question_id": 748, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 22\u00c2\u00a0hours", "timestamp": 1724187889, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1362861754/", "is_pending": "Not Pending", "title": "Largest Number At Least Twice of Others", "memory": "13.2 MB", "code": "\nclass Solution {\npublic:\n    int dominantIndex(vector<int>& nums) {\n        int maxIndex = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums[i] > nums[maxIndex]) {\n                maxIndex = i;\n            }\n        }\n        for (int i = 0; i < nums.size(); i++) {\n            if (maxIndex != i && nums[maxIndex] < 2 * nums[i]) {\n                return -1;\n            }\n        }\n        return maxIndex;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "largest-number-at-least-twice-of-others", "has_notes": false, "flag_type": 1}, {"id": 1362861580, "question_id": 749, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 22\u00c2\u00a0hours", "timestamp": 1724187869, "status": 10, "status_display": "Accepted", "runtime": "12 ms", "url": "/submissions/detail/1362861580/", "is_pending": "Not Pending", "title": "Shortest Completing Word", "memory": "17.8 MB", "code": "\nclass Solution {\npublic:\n    string shortestCompletingWord(string licensePlate, vector<string>& words) {\n        vector<int> licenseCount(26, 0);\n        for (char ch : licensePlate) {\n            if (isalpha(ch)) {\n                licenseCount[tolower(ch) - 'a']++;\n            }\n        }\n        \n        string result = \"\";\n        for (string word : words) {\n            if ((result.length() > 0 && word.length() >= result.length()) || !isValid(licenseCount, word)) {\n                continue;\n            }\n            result = word;\n        }\n        return result;\n    }\n    \nprivate:\n    bool isValid(vector<int>& licenseCount, string word) {\n        vector<int> wordCount(26, 0);\n        for (char ch : word) {\n            wordCount[ch - 'a']++;\n        }\n        \n        for (int i = 0; i < 26; i++) {\n            if (licenseCount[i] > wordCount[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "shortest-completing-word", "has_notes": false, "flag_type": 1}, {"id": 1362861296, "question_id": 767, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 22\u00c2\u00a0hours", "timestamp": 1724187840, "status": 10, "status_display": "Accepted", "runtime": "4 ms", "url": "/submissions/detail/1362861296/", "is_pending": "Not Pending", "title": "Prime Number of Set Bits in Binary Representation", "memory": "7.6 MB", "code": "\nclass Solution {\npublic:\n    int countPrimeSetBits(int left, int right) {\n        int count = 0;\n        for (int i = left; i <= right; i++) {\n            int bits = __builtin_popcount(i);\n            if (bits == 2 || bits == 3 || bits == 5 || bits == 7 || bits == 11 || bits == 13 || bits == 17 || bits == 19) {\n                count++;\n            }\n        }\n        return count;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "prime-number-of-set-bits-in-binary-representation", "has_notes": false, "flag_type": 1}, {"id": 1362861124, "question_id": 774, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 22\u00c2\u00a0hours", "timestamp": 1724187819, "status": 10, "status_display": "Accepted", "runtime": "12 ms", "url": "/submissions/detail/1362861124/", "is_pending": "Not Pending", "title": "Maximum Depth of N-ary Tree", "memory": "14.5 MB", "code": "\n/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    vector<Node*> children;\n\n    Node() {}\n\n    Node(int _val) {\n        val = _val;\n    }\n\n    Node(int _val, vector<Node*> _children) {\n        val = _val;\n        children = _children;\n    }\n};\n*/\n\nclass Solution {\npublic:\n    int maxDepth(Node* root) {\n        if(root == NULL) return 0;\n        int max_depth = 0;\n        for(auto child : root->children)\n            max_depth = max(max_depth, maxDepth(child));\n        return max_depth + 1;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111", "title_slug": "maximum-depth-of-n-ary-tree", "has_notes": false, "flag_type": 1}, {"id": 1362860909, "question_id": 775, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 22\u00c2\u00a0hours", "timestamp": 1724187798, "status": 10, "status_display": "Accepted", "runtime": "8 ms", "url": "/submissions/detail/1362860909/", "is_pending": "Not Pending", "title": "N-ary Tree Preorder Traversal", "memory": "15.3 MB", "code": "\n/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    vector<Node*> children;\n\n    Node() {}\n\n    Node(int _val) {\n        val = _val;\n    }\n\n    Node(int _val, vector<Node*> _children) {\n        val = _val;\n        children = _children;\n    }\n};\n*/\n\nclass Solution {\npublic:\n    vector<int> preorder(Node* root) {\n        vector<int> result;\n        if (root == nullptr) {\n            return result;\n        }\n        \n        stack<Node*> nodes;\n        nodes.push(root);\n        \n        while (!nodes.empty()) {\n            Node* node = nodes.top();\n            nodes.pop();\n            result.push_back(node->val);\n            \n            for (int i = node->children.size() - 1; i >= 0; --i) {\n                nodes.push(node->children[i]);\n            }\n        }\n        \n        return result;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111", "title_slug": "n-ary-tree-preorder-traversal", "has_notes": false, "flag_type": 1}, {"id": 1362860608, "question_id": 776, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 22\u00c2\u00a0hours", "timestamp": 1724187770, "status": 10, "status_display": "Accepted", "runtime": "11 ms", "url": "/submissions/detail/1362860608/", "is_pending": "Not Pending", "title": "N-ary Tree Postorder Traversal", "memory": "15.1 MB", "code": "\n/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    vector<Node*> children;\n\n    Node() {}\n\n    Node(int _val) {\n        val = _val;\n    }\n\n    Node(int _val, vector<Node*> _children) {\n        val = _val;\n        children = _children;\n    }\n};\n*/\n\nclass Solution {\npublic:\n    vector<int> postorder(Node* root) {\n        vector<int> result;\n        if (root == nullptr) {\n            return result;\n        }\n        \n        stack<Node*> stk;\n        stk.push(root);\n        \n        while (!stk.empty()) {\n            Node* node = stk.top();\n            stk.pop();\n            result.push_back(node->val);\n            for (Node* child : node->children) {\n                stk.push(child);\n            }\n        }\n        \n        reverse(result.begin(), result.end());\n        return result;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111", "title_slug": "n-ary-tree-postorder-traversal", "has_notes": false, "flag_type": 1}, {"id": 1362860352, "question_id": 777, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 22\u00c2\u00a0hours", "timestamp": 1724187744, "status": 10, "status_display": "Accepted", "runtime": "4 ms", "url": "/submissions/detail/1362860352/", "is_pending": "Not Pending", "title": "Toeplitz Matrix", "memory": "20.4 MB", "code": "\nclass Solution {\npublic:\n    bool isToeplitzMatrix(vector<vector<int>>& matrix) {\n        for(int i = 0; i < matrix.size() - 1; i++) {\n            for(int j = 0; j < matrix[0].size() - 1; j++) {\n                if(matrix[i][j] != matrix[i + 1][j + 1]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "toeplitz-matrix", "has_notes": false, "flag_type": 1}, {"id": 1362860168, "question_id": 782, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 22\u00c2\u00a0hours", "timestamp": 1724187723, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1362860168/", "is_pending": "Not Pending", "title": "Jewels and Stones", "memory": "7.9 MB", "code": "\nclass Solution {\npublic:\n    int numJewelsInStones(string jewels, string stones) {\n        int count = 0;\n        for (int i = 0; i < stones.size(); i++) {\n            if (jewels.find(stones[i]) != string::npos) {\n                count++;\n            }\n        }\n        return count;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "jewels-and-stones", "has_notes": false, "flag_type": 1}, {"id": 1362860018, "question_id": 783, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 22\u00c2\u00a0hours", "timestamp": 1724187706, "status": 10, "status_display": "Accepted", "runtime": "34 ms", "url": "/submissions/detail/1362860018/", "is_pending": "Not Pending", "title": "Search in a Binary Search Tree", "memory": "33.6 MB", "code": "\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* searchBST(TreeNode* root, int val) {\n        if(root == nullptr) return nullptr;\n        if(root->val == val) return root;\n        if(root->val > val) return searchBST(root->left, val);\n        return searchBST(root->right, val);\n    }\n};\n", "compare_result": "111111111111111111111111111111111111", "title_slug": "search-in-a-binary-search-tree", "has_notes": false, "flag_type": 1}, {"id": 1362859836, "question_id": 789, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 22\u00c2\u00a0hours", "timestamp": 1724187685, "status": 10, "status_display": "Accepted", "runtime": "19 ms", "url": "/submissions/detail/1362859836/", "is_pending": "Not Pending", "title": "Kth Largest Element in a Stream", "memory": "24.8 MB", "code": "\n#include <queue>\n#include <vector>\n\nusing namespace std;\n\nclass KthLargest {\npublic:\n    priority_queue<int, vector<int>, greater<int>> pq;\n    int size;\n    \n    KthLargest(int k, vector<int>& nums) {\n        size = k;\n        for(int num : nums) {\n            pq.push(num);\n            if(pq.size() > k) {\n                pq.pop();\n            }\n        }\n    }\n    \n    int add(int val) {\n        pq.push(val);\n        if(pq.size() > size) {\n            pq.pop();\n        }\n        return pq.top();\n    }\n};\n\n/**\n * Your KthLargest object will be instantiated and called as such:\n * KthLargest* obj = new KthLargest(k, nums);\n * int param_1 = obj->add(val);\n */\n", "compare_result": "1111111111", "title_slug": "kth-largest-element-in-a-stream", "has_notes": false, "flag_type": 1}, {"id": 1362859638, "question_id": 792, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 22\u00c2\u00a0hours", "timestamp": 1724187663, "status": 10, "status_display": "Accepted", "runtime": "23 ms", "url": "/submissions/detail/1362859638/", "is_pending": "Not Pending", "title": "Binary Search", "memory": "30.2 MB", "code": "\nclass Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n        int left = 0;\n        int right = nums.size() - 1;\n        \n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            \n            if (nums[mid] == target) {\n                return mid;\n            } else if (nums[mid] < target) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        \n        return -1;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111", "title_slug": "binary-search", "has_notes": false, "flag_type": 1}, {"id": 1362859374, "question_id": 799, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 22\u00c2\u00a0hours", "timestamp": 1724187636, "status": 10, "status_display": "Accepted", "runtime": "5 ms", "url": "/submissions/detail/1362859374/", "is_pending": "Not Pending", "title": "Minimum Distance Between BST Nodes", "memory": "11.7 MB", "code": "\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int minDiffInBST(TreeNode* root) {\n        int min_diff = INT_MAX;\n        TreeNode* prev = nullptr;\n        inorder(root, prev, min_diff);\n        return min_diff;\n    }\n    \n    void inorder(TreeNode* node, TreeNode*& prev, int& min_diff) {\n        if (node == nullptr) {\n            return;\n        }\n        \n        inorder(node->left, prev, min_diff);\n        \n        if (prev != nullptr) {\n            min_diff = min(min_diff, node->val - prev->val);\n        }\n        prev = node;\n        \n        inorder(node->right, prev, min_diff);\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111", "title_slug": "minimum-distance-between-bst-nodes", "has_notes": false, "flag_type": 1}, {"id": 1362859152, "question_id": 812, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 22\u00c2\u00a0hours", "timestamp": 1724187612, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1362859152/", "is_pending": "Not Pending", "title": "Rotate String", "memory": "7.7 MB", "code": "\nclass Solution {\npublic:\n    bool rotateString(string s, string goal) {\n        if(s.length() != goal.length()) return false;\n        s += s;\n        return s.find(goal) != string::npos;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111", "title_slug": "rotate-string", "has_notes": false, "flag_type": 1}, {"id": 1362858995, "question_id": 816, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 22\u00c2\u00a0hours", "timestamp": 1724187595, "status": 10, "status_display": "Accepted", "runtime": "61 ms", "url": "/submissions/detail/1362858995/", "is_pending": "Not Pending", "title": "Design HashSet", "memory": "48.7 MB", "code": "\nclass MyHashSet {\nprivate:\n    vector<bool> data;\npublic:\n    /** Initialize your data structure here. */\n    MyHashSet() {\n        data = vector<bool>(1000001, false);\n    }\n    \n    void add(int key) {\n        data[key] = true;\n    }\n    \n    void remove(int key) {\n        data[key] = false;\n    }\n    \n    /** Returns true if this set contains the specified element */\n    bool contains(int key) {\n        return data[key];\n    }\n};\n\n/**\n * Your MyHashSet object will be instantiated and called as such:\n * MyHashSet* obj = new MyHashSet();\n * obj->add(key);\n * obj->remove(key);\n * bool param_3 = obj->contains(key);\n */\n", "compare_result": "111111111111111111111111111111111", "title_slug": "design-hashset", "has_notes": false, "flag_type": 1}, {"id": 1362858779, "question_id": 817, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 22\u00c2\u00a0hours", "timestamp": 1724187574, "status": 10, "status_display": "Accepted", "runtime": "127 ms", "url": "/submissions/detail/1362858779/", "is_pending": "Not Pending", "title": "Design HashMap", "memory": "217.7 MB", "code": "\nclass MyHashMap {\nprivate:\n    vector<int> data;\npublic:\n    /** Initialize your data structure here. */\n    MyHashMap() {\n        data = vector<int>(1000001, -1);\n    }\n    \n    /** value will always be non-negative. */\n    void put(int key, int value) {\n        data[key] = value;\n    }\n    \n    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */\n    int get(int key) {\n        return data[key];\n    }\n    \n    /** Removes the mapping of the specified value key if this map contains a mapping for the key */\n    void remove(int key) {\n        data[key] = -1;\n    }\n};\n\n/**\n * Your MyHashMap object will be instantiated and called as such:\n * MyHashMap* obj = new MyHashMap();\n * obj->put(key,value);\n * int param_2 = obj->get(key);\n * obj->remove(key);\n */\n", "compare_result": "1111111111111111111111111111111111111", "title_slug": "design-hashmap", "has_notes": false, "flag_type": 1}, {"id": 1362858526, "question_id": 822, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 22\u00c2\u00a0hours", "timestamp": 1724187550, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1362858526/", "is_pending": "Not Pending", "title": "Unique Morse Code Words", "memory": "11.7 MB", "code": "\nclass Solution {\npublic:\n    int uniqueMorseRepresentations(vector<string>& words) {\n        vector<string> morse = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"};\n        unordered_set<string> uniqueWords;\n        for (string word : words) {\n            string morseWord = \"\";\n            for (char c : word) {\n                morseWord += morse[c - 'a'];\n            }\n            uniqueWords.insert(morseWord);\n        }\n        return uniqueWords.size();\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "unique-morse-code-words", "has_notes": false, "flag_type": 1}, {"id": 1362858310, "question_id": 824, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 22\u00c2\u00a0hours", "timestamp": 1724187528, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1362858310/", "is_pending": "Not Pending", "title": "Number of Lines To Write String", "memory": "8.3 MB", "code": "\nclass Solution {\npublic:\n    vector<int> numberOfLines(vector<int>& widths, string s) {\n        int lines = 1, width = 0;\n        for (char c : s) {\n            int w = widths[c - 'a'];\n            if (width + w > 100) {\n                lines++;  // start a new line\n                width = 0;  // reset the width\n            }\n            width += w;\n        }\n        return {lines, width};\n    }\n};\n", "compare_result": "111111111111111111111111111", "title_slug": "number-of-lines-to-write-string", "has_notes": false, "flag_type": 1}, {"id": 1362858117, "question_id": 830, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 22\u00c2\u00a0hours", "timestamp": 1724187508, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1362858117/", "is_pending": "Not Pending", "title": "Largest Triangle Area", "memory": "9.8 MB", "code": "\nclass Solution {\npublic:\n    double largestTriangleArea(vector<vector<int>>& points) {\n        double maxArea = 0;\n        int n = points.size();\n        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n                    maxArea = max(maxArea, 0.5 * abs(points[i][0] * (points[j][1] - points[k][1]) + points[j][0] * (points[k][1] - points[i][1]) + points[k][0] * (points[i][1] - points[j][1])));\n                }\n            }\n        }\n        return maxArea;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111", "title_slug": "largest-triangle-area", "has_notes": false, "flag_type": 1}, {"id": 1362857864, "question_id": 837, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 22\u00c2\u00a0hours", "timestamp": 1724187483, "status": 10, "status_display": "Accepted", "runtime": "4 ms", "url": "/submissions/detail/1362857864/", "is_pending": "Not Pending", "title": "Most Common Word", "memory": "10.2 MB", "code": "\nclass Solution {\npublic:\n    string mostCommonWord(string paragraph, vector<string>& banned) {\n        unordered_map<string, int> counts;\n        unordered_set<string> bans(banned.begin(), banned.end());\n        for (auto & c: paragraph) c = isalpha(c) ? tolower(c) : ' ';\n        istringstream iss(paragraph);\n        string word;\n        pair<string, int> res(\"\", 0);\n        while (iss >> word)\n            if (bans.find(word) == bans.end() && ++counts[word] > res.second)\n                res = make_pair(word, counts[word]);\n        return res.first;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111", "title_slug": "most-common-word", "has_notes": false, "flag_type": 1}, {"id": 1362857629, "question_id": 841, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 22\u00c2\u00a0hours", "timestamp": 1724187459, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1362857629/", "is_pending": "Not Pending", "title": "Shortest Distance to a Character", "memory": "8.3 MB", "code": "\nclass Solution {\npublic:\n    vector<int> shortestToChar(string s, char c) {\n        int n = s.size();\n        vector<int> res(n, n);\n        int pos = -n;\n        \n        for (int i = 0; i < n; ++i) {\n            if (s[i] == c) pos = i;\n            res[i] = min(res[i], abs(i - pos));\n        }\n        \n        for (int i = pos - 1; i >= 0; --i) {\n            if (s[i] == c)  pos = i;\n            res[i] = min(res[i], abs(i - pos));\n        }\n        \n        return res;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "shortest-distance-to-a-character", "has_notes": false, "flag_type": 1}, {"id": 1362857359, "question_id": 851, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 22\u00c2\u00a0hours", "timestamp": 1724187432, "status": 10, "status_display": "Accepted", "runtime": "4 ms", "url": "/submissions/detail/1362857359/", "is_pending": "Not Pending", "title": "Goat Latin", "memory": "8.4 MB", "code": "\nclass Solution {\npublic:\n    string toGoatLatin(string sentence) {\n        stringstream ss(sentence);\n        string word, result, suffix = \"a\";\n        while (ss >> word) {\n            if (word[0] != 'a' && word[0] != 'e' && word[0] != 'i' && word[0] != 'o' && word[0] != 'u' && \n                word[0] != 'A' && word[0] != 'E' && word[0] != 'I' && word[0] != 'O' && word[0] != 'U') {\n                word = word.substr(1) + word[0];\n            }\n            word += \"ma\" + suffix;\n            suffix += \"a\";\n            result += word + \" \";\n        }\n        result.pop_back(); // remove the last space\n        return result;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "goat-latin", "has_notes": false, "flag_type": 1}, {"id": 1362857145, "question_id": 857, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 22\u00c2\u00a0hours", "timestamp": 1724187409, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1362857145/", "is_pending": "Not Pending", "title": "Positions of Large Groups", "memory": "9 MB", "code": "\nclass Solution {\npublic:\n    vector<vector<int>> largeGroupPositions(string s) {\n        vector<vector<int>> res;\n        int i = 0, j = 0, N = s.size();\n        while (j < N) {\n            while (j < N && s[j] == s[i]) ++j;\n            if (j - i >= 3) res.push_back({i, j - 1});\n            i = j;\n        }\n        return res;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "positions-of-large-groups", "has_notes": false, "flag_type": 1}, {"id": 1362856972, "question_id": 861, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 22\u00c2\u00a0hours", "timestamp": 1724187391, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1362856972/", "is_pending": "Not Pending", "title": "Flipping an Image", "memory": "11.5 MB", "code": "\nclass Solution {\npublic:\n    vector<vector<int>> flipAndInvertImage(vector<vector<int>>& image) {\n        for(auto& row : image) {\n            reverse(row.begin(), row.end());\n            for(auto& pixel : row) {\n                pixel ^= 1;\n            }\n        }\n        return image;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "flipping-an-image", "has_notes": false, "flag_type": 1}, {"id": 1362856793, "question_id": 866, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 22\u00c2\u00a0hours", "timestamp": 1724187373, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1362856793/", "is_pending": "Not Pending", "title": "Rectangle Overlap", "memory": "9.3 MB", "code": "\nclass Solution {\npublic:\n    bool isRectangleOverlap(vector<int>& rec1, vector<int>& rec2) {\n        return !(rec1[2] <= rec2[0] ||   // left\n                 rec1[3] <= rec2[1] ||   // bottom\n                 rec1[0] >= rec2[2] ||   // right\n                 rec1[1] >= rec2[3]);    // top\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111", "title_slug": "rectangle-overlap", "has_notes": false, "flag_type": 1}, {"id": 1362856614, "question_id": 874, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 22\u00c2\u00a0hours", "timestamp": 1724187353, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1362856614/", "is_pending": "Not Pending", "title": "Backspace String Compare", "memory": "7.8 MB", "code": "\nclass Solution {\npublic:\n    bool backspaceCompare(string s, string t) {\n        int i = s.size() - 1, j = t.size() - 1;\n        int skipS = 0, skipT = 0;\n\n        while (i >= 0 || j >= 0) { \n            while (i >= 0) { \n                if (s[i] == '#') {skipS++; i--;}\n                else if (skipS > 0) {skipS--; i--;}\n                else break;\n            }\n            while (j >= 0) { \n                if (t[j] == '#') {skipT++; j--;}\n                else if (skipT > 0) {skipT--; j--;}\n                else break;\n            }\n            if (i >= 0 && j >= 0 && s[i] != t[j])\n                return false;\n            if ((i >= 0) != (j >= 0))\n                return false;\n            i--; j--;\n        }\n        return true;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "backspace-string-compare", "has_notes": false, "flag_type": 1}, {"id": 1362856337, "question_id": 889, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 22\u00c2\u00a0hours", "timestamp": 1724187327, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1362856337/", "is_pending": "Not Pending", "title": "Buddy Strings", "memory": "8.4 MB", "code": "\nclass Solution {\npublic:\n    bool buddyStrings(string s, string goal) {\n        if (s.size() != goal.size()) return false;\n        if (s == goal) {\n            set<char> unique_chars(s.begin(), s.end());\n            return unique_chars.size() < s.size();\n        } else {\n            vector<int> diff;\n            for (int i = 0; i < s.size(); i++) {\n                if (s[i] != goal[i]) diff.push_back(i);\n            }\n            return diff.size() == 2 && s[diff[0]] == goal[diff[1]] && s[diff[1]] == goal[diff[0]];\n        }\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111", "title_slug": "buddy-strings", "has_notes": false, "flag_type": 1}, {"id": 1362856117, "question_id": 890, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 22\u00c2\u00a0hours", "timestamp": 1724187304, "status": 10, "status_display": "Accepted", "runtime": "72 ms", "url": "/submissions/detail/1362856117/", "is_pending": "Not Pending", "title": "Lemonade Change", "memory": "86.1 MB", "code": "\nclass Solution {\npublic:\n    bool lemonadeChange(vector<int>& bills) {\n        int five = 0, ten = 0;\n        for (int i = 0; i < bills.size(); i++) {\n            if (bills[i] == 5) {\n                five++;\n            } else if (bills[i] == 10) {\n                if (five == 0) {\n                    return false;\n                }\n                five--;\n                ten++;\n            } else {\n                if (five > 0 && ten > 0) {\n                    five--;\n                    ten--;\n                } else if (five >= 3) {\n                    five -= 3;\n                } else {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111", "title_slug": "lemonade-change", "has_notes": false, "flag_type": 1}, {"id": 1362822183, "question_id": 898, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 23\u00c2\u00a0hours", "timestamp": 1724184221, "status": 10, "status_display": "Accepted", "runtime": "4 ms", "url": "/submissions/detail/1362822183/", "is_pending": "Not Pending", "title": "Transpose Matrix", "memory": "13.6 MB", "code": "\nclass Solution {\npublic:\n    vector<vector<int>> transpose(vector<vector<int>>& matrix) {\n        int m = matrix.size();\n        int n = matrix[0].size();\n        vector<vector<int>> transposed(n, vector<int>(m));\n        for(int i=0; i<m; i++){\n            for(int j=0; j<n; j++){\n                transposed[j][i] = matrix[i][j];\n            }\n        }\n        return transposed;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111", "title_slug": "transpose-matrix", "has_notes": false, "flag_type": 1}, {"id": 1362821944, "question_id": 899, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 23\u00c2\u00a0hours", "timestamp": 1724184200, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1362821944/", "is_pending": "Not Pending", "title": "Binary Gap", "memory": "7.6 MB", "code": "\nclass Solution {\npublic:\n    int binaryGap(int n) {\n        int last = -1, res = 0;\n        for (int i = 0; i < 32; ++i) {\n            if ((n >> i) & 1) {\n                if (last >= 0) {\n                    res = max(res, i - last);\n                }\n                last = i;\n            }\n        }\n        return res;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "binary-gap", "has_notes": false, "flag_type": 1}, {"id": 1362821675, "question_id": 904, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 23\u00c2\u00a0hours", "timestamp": 1724184177, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1362821675/", "is_pending": "Not Pending", "title": "Leaf-Similar Trees", "memory": "14.5 MB", "code": "\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool leafSimilar(TreeNode* root1, TreeNode* root2) {\n        vector<int> leaves1;\n        vector<int> leaves2;\n        dfs(root1, leaves1);\n        dfs(root2, leaves2);\n        return leaves1 == leaves2;\n    }\n\nprivate:\n    void dfs(TreeNode* node, vector<int>& leaves) {\n        if (node == nullptr) {\n            return;\n        }\n        if (node->left == nullptr && node->right == nullptr) {\n            leaves.push_back(node->val);\n        }\n        dfs(node->left, leaves);\n        dfs(node->right, leaves);\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111", "title_slug": "leaf-similar-trees", "has_notes": false, "flag_type": 1}, {"id": 1362821215, "question_id": 908, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 23\u00c2\u00a0hours", "timestamp": 1724184140, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1362821215/", "is_pending": "Not Pending", "title": "Middle of the Linked List", "memory": "9.1 MB", "code": "\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* middleNode(ListNode* head) {\n        ListNode* slow = head;\n        ListNode* fast = head;\n        while(fast != nullptr && fast->next != nullptr) {\n            slow = slow->next;\n            fast = fast->next->next;\n        }\n        return slow;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111", "title_slug": "middle-of-the-linked-list", "has_notes": false, "flag_type": 1}, {"id": 1362820839, "question_id": 919, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 23\u00c2\u00a0hours", "timestamp": 1724184110, "status": 10, "status_display": "Accepted", "runtime": "9 ms", "url": "/submissions/detail/1362820839/", "is_pending": "Not Pending", "title": "Projection Area of 3D Shapes", "memory": "12.1 MB", "code": "\nclass Solution {\npublic:\n    int projectionArea(vector<vector<int>>& grid) {\n        int n = grid.size();\n        int area = 0;\n        \n        for(int i = 0; i < n; i++) {\n            int maxRow = 0;  // Initialize maxRow for each row\n            int maxCol = 0;  // Initialize maxCol for each column\n            for(int j = 0; j < n; j++) {\n                if(grid[i][j]) {\n                    area++;  // Count cell if height > 0\n                }\n                maxRow = max(maxRow, grid[i][j]);\n                maxCol = max(maxCol, grid[j][i]);\n            }\n            area += maxRow + maxCol;  // Add max heights of row and column\n        }\n        \n        return area;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "projection-area-of-3d-shapes", "has_notes": false, "flag_type": 1}, {"id": 1362820502, "question_id": 920, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 23\u00c2\u00a0hours", "timestamp": 1724184083, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1362820502/", "is_pending": "Not Pending", "title": "Uncommon Words from Two Sentences", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    vector<string> uncommonFromSentences(string s1, string s2) {\n        unordered_map<string, int> wordCount;\n        istringstream iss(s1 + \" \" + s2);\n        while (iss) {\n            string word;\n            iss >> word;\n            wordCount[word]++;\n        }\n        vector<string> result;\n        for (auto &p : wordCount) {\n            if (p.second == 1) {\n                result.push_back(p.first);\n            }\n        }\n        return result;\n    }\n};\n", "compare_result": "0000000000000000000000000000000000000000000000000000000", "title_slug": "uncommon-words-from-two-sentences", "has_notes": false, "flag_type": 1}, {"id": 1362820195, "question_id": 924, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 23\u00c2\u00a0hours", "timestamp": 1724184058, "status": 10, "status_display": "Accepted", "runtime": "62 ms", "url": "/submissions/detail/1362820195/", "is_pending": "Not Pending", "title": "Fair Candy Swap", "memory": "52.1 MB", "code": "\nclass Solution {\npublic:\n    vector<int> fairCandySwap(vector<int>& aliceSizes, vector<int>& bobSizes) {\n        int sumA = accumulate(aliceSizes.begin(), aliceSizes.end(), 0);\n        int sumB = accumulate(bobSizes.begin(), bobSizes.end(), 0);\n        int delta = (sumB - sumA) / 2;\n        unordered_set<int> setB(bobSizes.begin(), bobSizes.end());\n        for (auto& size : aliceSizes) {\n            if (setB.count(size + delta)) {\n                return {size, size + delta};\n            }\n        }\n        return {};\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "fair-candy-swap", "has_notes": false, "flag_type": 1}, {"id": 1362819907, "question_id": 928, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 23\u00c2\u00a0hours", "timestamp": 1724184033, "status": 10, "status_display": "Accepted", "runtime": "4 ms", "url": "/submissions/detail/1362819907/", "is_pending": "Not Pending", "title": "Surface Area of 3D Shapes", "memory": "11.9 MB", "code": "\nclass Solution {\npublic:\n    int surfaceArea(vector<vector<int>>& grid) {\n        int n = grid.size();\n        int area = 0;\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < n; j++){\n                if(grid[i][j] > 0){\n                    area += grid[i][j] * 4 + 2; // Surface area of a single cube stack\n                    if(i > 0) area -= min(grid[i][j], grid[i-1][j]) * 2; // Subtract overlapping area with cube stack on top\n                    if(j > 0) area -= min(grid[i][j], grid[i][j-1]) * 2; // Subtract overlapping area with cube stack on left\n                }\n            }\n        }\n        return area;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "surface-area-of-3d-shapes", "has_notes": false, "flag_type": 1}, {"id": 1362819614, "question_id": 932, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 23\u00c2\u00a0hours", "timestamp": 1724184006, "status": 10, "status_display": "Accepted", "runtime": "125 ms", "url": "/submissions/detail/1362819614/", "is_pending": "Not Pending", "title": "Monotonic Array", "memory": "99.3 MB", "code": "\nclass Solution {\npublic:\n    bool isMonotonic(vector<int>& nums) {\n        bool increasing = true;\n        bool decreasing = true;\n        \n        for (int i = 0; i < nums.size() - 1; ++i) {\n            if (nums[i] > nums[i + 1]) {\n                increasing = false;\n            }\n            if (nums[i] < nums[i + 1]) {\n                decreasing = false;\n            }\n        }\n        \n        return increasing || decreasing;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "monotonic-array", "has_notes": false, "flag_type": 1}, {"id": 1362819347, "question_id": 933, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 23\u00c2\u00a0hours", "timestamp": 1724183984, "status": 15, "status_display": "Runtime Error", "runtime": "N/A", "url": "/submissions/detail/1362819347/", "is_pending": "Not Pending", "title": "Increasing Order Search Tree", "memory": "N/A", "code": "\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* increasingBST(TreeNode* root) {\n        TreeNode* newRoot = nullptr;\n        TreeNode* prev = nullptr;\n        inorder(root, prev, newRoot);\n        return newRoot;\n    }\n    \n    void inorder(TreeNode* node, TreeNode*& prev, TreeNode*& newRoot) {\n        if (node == nullptr) {\n            return;\n        }\n        inorder(node->left, prev, newRoot);\n        if (prev != nullptr) {\n            prev->right = node;\n            prev->left = nullptr;\n        }\n        if (newRoot == nullptr) {\n            newRoot = node;\n        }\n        prev = node;\n        inorder(node->right, prev, newRoot);\n    }\n};\n", "compare_result": "11111111111100000000000000000000000000", "title_slug": "increasing-order-search-tree", "has_notes": false, "flag_type": 1}, {"id": 1362819015, "question_id": 941, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 23\u00c2\u00a0hours", "timestamp": 1724183956, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1362819015/", "is_pending": "Not Pending", "title": "Sort Array By Parity", "memory": "19.1 MB", "code": "\nclass Solution {\npublic:\n    vector<int> sortArrayByParity(vector<int>& nums) {\n        int i = 0, j = nums.size() - 1;\n        while (i < j) {\n            if (nums[i] % 2 > nums[j] % 2) {\n                swap(nums[i], nums[j]);\n            }\n\n            if (nums[i] % 2 == 0) i++;\n            if (nums[j] % 2 == 1) j--;\n        }\n\n        return nums;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "sort-array-by-parity", "has_notes": false, "flag_type": 1}, {"id": 1362818702, "question_id": 944, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 23\u00c2\u00a0hours", "timestamp": 1724183933, "status": 10, "status_display": "Accepted", "runtime": "16 ms", "url": "/submissions/detail/1362818702/", "is_pending": "Not Pending", "title": "Smallest Range I", "memory": "18.2 MB", "code": "\nclass Solution {\npublic:\n    int smallestRangeI(vector<int>& nums, int k) {\n        int minNum = *min_element(nums.begin(), nums.end());\n        int maxNum = *max_element(nums.begin(), nums.end());\n        return max(0, maxNum - minNum - 2*k);\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "smallest-range-i", "has_notes": false, "flag_type": 1}, {"id": 1362818380, "question_id": 950, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 23\u00c2\u00a0hours", "timestamp": 1724183909, "status": 10, "status_display": "Accepted", "runtime": "17 ms", "url": "/submissions/detail/1362818380/", "is_pending": "Not Pending", "title": "X of a Kind in a Deck of Cards", "memory": "21.2 MB", "code": "\nclass Solution {\npublic:\n    bool hasGroupsSizeX(vector<int>& deck) {\n        unordered_map<int, int> count;\n        int res = 0;\n        for (int i : deck) {\n            count[i]++;\n        }\n        for (auto i : count) {\n            res = __gcd(i.second, res);\n        }\n        return res > 1;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "x-of-a-kind-in-a-deck-of-cards", "has_notes": false, "flag_type": 1}, {"id": 1362818090, "question_id": 953, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 23\u00c2\u00a0hours", "timestamp": 1724183887, "status": 10, "status_display": "Accepted", "runtime": "1 ms", "url": "/submissions/detail/1362818090/", "is_pending": "Not Pending", "title": "Reverse Only Letters", "memory": "7.6 MB", "code": "\nclass Solution {\npublic:\n    string reverseOnlyLetters(string s) {\n        int i = 0, j = s.size() - 1;\n        while(i < j){\n            if(!isalpha(s[i])){\n                i++;\n            } else if(!isalpha(s[j])){\n                j--;\n            } else {\n                swap(s[i++], s[j--]);\n            }\n        }\n        return s;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "reverse-only-letters", "has_notes": false, "flag_type": 1}, {"id": 1362817830, "question_id": 958, "lang": "cpp", "lang_name": "C++", "time": "2\u00c2\u00a0days, 23\u00c2\u00a0hours", "timestamp": 1724183866, "status": 10, "status_display": "Accepted", "runtime": "15 ms", "url": "/submissions/detail/1362817830/", "is_pending": "Not Pending", "title": "Sort Array By Parity II", "memory": "24.2 MB", "code": "\nclass Solution {\npublic:\n    vector<int> sortArrayByParityII(vector<int>& nums) {\n        int n = nums.size();\n        int j = 1;\n        for (int i = 0; i < n; i += 2) {\n            if (nums[i] % 2) {\n                while (nums[j] % 2) {\n                    j += 2;\n                }\n                swap(nums[i], nums[j]);\n            }\n        }\n        return nums;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111", "title_slug": "sort-array-by-parity-ii", "has_notes": false, "flag_type": 1}, {"id": 1361891175, "question_id": 961, "lang": "cpp", "lang_name": "C++", "time": "3\u00c2\u00a0days, 18\u00c2\u00a0hours", "timestamp": 1724112884, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1361891175/", "is_pending": "Not Pending", "title": "Long Pressed Name", "memory": "7.9 MB", "code": "\nclass Solution {\npublic:\n    bool isLongPressedName(string name, string typed) {\n        int i = 0, j = 0;\n        while (i < name.size() && j < typed.size()) {\n            if (name[i] == typed[j]) {\n                i++;\n                j++;\n            } else if (j > 0 && typed[j] == typed[j - 1]) {\n                j++;\n            } else {\n                return false;\n            }\n        }\n        while (j < typed.size()) {\n            if (typed[j] != typed[j - 1]) {\n                return false;\n            }\n            j++;\n        }\n        return i == name.size();\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "long-pressed-name", "has_notes": false, "flag_type": 1}, {"id": 1361891025, "question_id": 965, "lang": "cpp", "lang_name": "C++", "time": "3\u00c2\u00a0days, 18\u00c2\u00a0hours", "timestamp": 1724112865, "status": 10, "status_display": "Accepted", "runtime": "28 ms", "url": "/submissions/detail/1361891025/", "is_pending": "Not Pending", "title": "Unique Email Addresses", "memory": "18.8 MB", "code": "\nclass Solution {\npublic:\n    int numUniqueEmails(vector<string>& emails) {\n        unordered_set<string> uniqueEmails;\n        for (string email : emails) {\n            string cleanEmail;\n            for (int i = 0; i < email.size(); ++i) {\n                if (email[i] == '.' && email.find('@') > i) {\n                    continue;\n                } else if (email[i] == '+' || email[i] == '@') {\n                    cleanEmail += email.substr(email.find('@'));\n                    break;\n                } else {\n                    cleanEmail += email[i];\n                }\n            }\n            uniqueEmails.insert(cleanEmail);\n        }\n        return uniqueEmails.size();\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "unique-email-addresses", "has_notes": false, "flag_type": 1}, {"id": 1361890912, "question_id": 969, "lang": "cpp", "lang_name": "C++", "time": "3\u00c2\u00a0days, 18\u00c2\u00a0hours", "timestamp": 1724112849, "status": 10, "status_display": "Accepted", "runtime": "108 ms", "url": "/submissions/detail/1361890912/", "is_pending": "Not Pending", "title": "Number of Recent Calls", "memory": "62.4 MB", "code": "\n#include <queue>\n\nclass RecentCounter {\npublic:\n    std::queue<int> q;\n    RecentCounter() {\n        \n    }\n    \n    int ping(int t) {\n        q.push(t);\n        while (q.front() < t - 3000) {\n            q.pop();\n        }\n        return q.size();\n    }\n};\n\n/**\n * Your RecentCounter object will be instantiated and called as such:\n * RecentCounter* obj = new RecentCounter();\n * int param_1 = obj->ping(t);\n */\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "number-of-recent-calls", "has_notes": false, "flag_type": 1}, {"id": 1361890800, "question_id": 975, "lang": "cpp", "lang_name": "C++", "time": "3\u00c2\u00a0days, 18\u00c2\u00a0hours", "timestamp": 1724112833, "status": 10, "status_display": "Accepted", "runtime": "89 ms", "url": "/submissions/detail/1361890800/", "is_pending": "Not Pending", "title": "Range Sum of BST", "memory": "63.3 MB", "code": "\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int rangeSumBST(TreeNode* root, int low, int high) {\n        if(root == nullptr) return 0;\n        if(root->val < low) return rangeSumBST(root->right, low, high);\n        if(root->val > high) return rangeSumBST(root->left, low, high);\n        return root->val + rangeSumBST(root->left, low, high) + rangeSumBST(root->right, low, high);\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111", "title_slug": "range-sum-of-bst", "has_notes": false, "flag_type": 1}, {"id": 1361890632, "question_id": 978, "lang": "cpp", "lang_name": "C++", "time": "3\u00c2\u00a0days, 18\u00c2\u00a0hours", "timestamp": 1724112807, "status": 10, "status_display": "Accepted", "runtime": "23 ms", "url": "/submissions/detail/1361890632/", "is_pending": "Not Pending", "title": "Valid Mountain Array", "memory": "25.1 MB", "code": "\nclass Solution {\npublic:\n    bool validMountainArray(vector<int>& arr) {\n        int n = arr.size();\n        int i = 0;\n\n        // walk up\n        while (i + 1 < n && arr[i] < arr[i + 1])\n            i++;\n\n        // peak can't be first or last\n        if (i == 0 || i == n - 1)\n            return false;\n\n        // walk down\n        while (i + 1 < n && arr[i] > arr[i + 1])\n            i++;\n\n        return i == n - 1;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111", "title_slug": "valid-mountain-array", "has_notes": false, "flag_type": 1}, {"id": 1361890487, "question_id": 979, "lang": "cpp", "lang_name": "C++", "time": "3\u00c2\u00a0days, 18\u00c2\u00a0hours", "timestamp": 1724112787, "status": 10, "status_display": "Accepted", "runtime": "7 ms", "url": "/submissions/detail/1361890487/", "is_pending": "Not Pending", "title": "DI String Match", "memory": "10.1 MB", "code": "\nclass Solution {\npublic:\n    vector<int> diStringMatch(string s) {\n        int n = s.size();\n        vector<int> result(n+1);\n        int low = 0, high = n;\n        for(int i=0; i<n; i++){\n            if(s[i] == 'I'){\n                result[i] = low++;\n            }else{\n                result[i] = high--;\n            }\n        }\n        result[n] = low;\n        return result;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "di-string-match", "has_notes": false, "flag_type": 1}, {"id": 1361326719, "question_id": 981, "lang": "cpp", "lang_name": "C++", "time": "4\u00c2\u00a0days, 6\u00c2\u00a0hours", "timestamp": 1724070565, "status": 10, "status_display": "Accepted", "runtime": "32 ms", "url": "/submissions/detail/1361326719/", "is_pending": "Not Pending", "title": "Delete Columns to Make Sorted", "memory": "14.7 MB", "code": "\nclass Solution {\npublic:\n    int minDeletionSize(vector<string>& strs) {\n        int count = 0;\n        for(int j = 0; j < strs[0].size(); j++) {\n            for(int i = 0; i < strs.size() - 1; i++) {\n                if(strs[i][j] > strs[i+1][j]) {\n                    count++;\n                    break;\n                }\n            }\n        }\n        return count;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "delete-columns-to-make-sorted", "has_notes": false, "flag_type": 1}, {"id": 1361326504, "question_id": 990, "lang": "cpp", "lang_name": "C++", "time": "4\u00c2\u00a0days, 6\u00c2\u00a0hours", "timestamp": 1724070548, "status": 10, "status_display": "Accepted", "runtime": "4 ms", "url": "/submissions/detail/1361326504/", "is_pending": "Not Pending", "title": "Verifying an Alien Dictionary", "memory": "12.2 MB", "code": "\nclass Solution {\npublic:\n    bool isAlienSorted(vector<string>& words, string order) {\n        vector<int> index(26);\n        for (int i = 0; i < order.size(); ++i)\n            index[order[i] - 'a'] = i;\n        for (string &w : words)\n            for (char &c : w)\n                c = index[c - 'a'];\n        return is_sorted(words.begin(), words.end());\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "verifying-an-alien-dictionary", "has_notes": false, "flag_type": 1}, {"id": 1361326264, "question_id": 1001, "lang": "cpp", "lang_name": "C++", "time": "4\u00c2\u00a0days, 6\u00c2\u00a0hours", "timestamp": 1724070530, "status": 10, "status_display": "Accepted", "runtime": "16 ms", "url": "/submissions/detail/1361326264/", "is_pending": "Not Pending", "title": "N-Repeated Element in Size 2N Array", "memory": "27.5 MB", "code": "\nclass Solution {\npublic:\n    int repeatedNTimes(vector<int>& nums) {\n        unordered_map<int, int> count;\n        for (int num : nums) {\n            if (++count[num] > 1) {\n                return num;\n            }\n        }\n        return -1;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "n-repeated-element-in-size-2n-array", "has_notes": false, "flag_type": 1}, {"id": 1360659636, "question_id": 1005, "lang": "cpp", "lang_name": "C++", "time": "4\u00c2\u00a0days, 23\u00c2\u00a0hours", "timestamp": 1724008487, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360659636/", "is_pending": "Not Pending", "title": "Univalued Binary Tree", "memory": "11.9 MB", "code": "\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isUnivalTree(TreeNode* root) {\n        if(root == nullptr) return true;\n        if(root->left != nullptr && root->val != root->left->val) return false;\n        if(root->right != nullptr && root->val != root->right->val) return false;\n        return isUnivalTree(root->left) && isUnivalTree(root->right);\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "univalued-binary-tree", "has_notes": false, "flag_type": 1}, {"id": 1360659447, "question_id": 1013, "lang": "cpp", "lang_name": "C++", "time": "4\u00c2\u00a0days, 23\u00c2\u00a0hours", "timestamp": 1724008472, "status": 10, "status_display": "Accepted", "runtime": "2 ms", "url": "/submissions/detail/1360659447/", "is_pending": "Not Pending", "title": "Fibonacci Number", "memory": "7.3 MB", "code": "\nclass Solution {\npublic:\n    int fib(int n) {\n        if(n <= 1)\n            return n;\n        int a = 0, b = 1;\n        for(int i = 2; i <= n; i++) {\n            int c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n};\n", "compare_result": "1111111111111111111111111111111", "title_slug": "fibonacci-number", "has_notes": false, "flag_type": 1}, {"id": 1360659266, "question_id": 1018, "lang": "cpp", "lang_name": "C++", "time": "4\u00c2\u00a0days, 23\u00c2\u00a0hours", "timestamp": 1724008460, "status": 10, "status_display": "Accepted", "runtime": "30 ms", "url": "/submissions/detail/1360659266/", "is_pending": "Not Pending", "title": "Largest Perimeter Triangle", "memory": "25.6 MB", "code": "\nclass Solution {\npublic:\n    int largestPerimeter(vector<int>& nums) {\n        sort(nums.begin(), nums.end());\n        for (int i = nums.size() - 3; i >= 0; --i)\n            if (nums[i] + nums[i+1] > nums[i+2])\n                return nums[i] + nums[i+1] + nums[i+2];\n        return 0;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "largest-perimeter-triangle", "has_notes": false, "flag_type": 1}, {"id": 1360659068, "question_id": 1019, "lang": "cpp", "lang_name": "C++", "time": "4\u00c2\u00a0days, 23\u00c2\u00a0hours", "timestamp": 1724008447, "status": 10, "status_display": "Accepted", "runtime": "11 ms", "url": "/submissions/detail/1360659068/", "is_pending": "Not Pending", "title": "Squares of a Sorted Array", "memory": "28.8 MB", "code": "\nclass Solution {\npublic:\n    vector<int> sortedSquares(vector<int>& nums) {\n        int n = nums.size();\n        vector<int> result(n);\n        int left = 0, right = n - 1;\n        for (int p = n - 1; p >= 0; p--) {\n            if (abs(nums[left]) > abs(nums[right])) {\n                result[p] = nums[left] * nums[left];\n                left++;\n            } else {\n                result[p] = nums[right] * nums[right];\n                right--;\n            }\n        }\n        return result;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "squares-of-a-sorted-array", "has_notes": false, "flag_type": 1}, {"id": 1360658836, "question_id": 1031, "lang": "cpp", "lang_name": "C++", "time": "4\u00c2\u00a0days, 23\u00c2\u00a0hours", "timestamp": 1724008432, "status": 10, "status_display": "Accepted", "runtime": "22 ms", "url": "/submissions/detail/1360658836/", "is_pending": "Not Pending", "title": "Add to Array-Form of Integer", "memory": "31.4 MB", "code": "\nclass Solution {\npublic:\n    vector<int> addToArrayForm(vector<int>& num, int k) {\n        int n = num.size();\n        vector<int> result;\n        int carry = k;\n        for(int i = n - 1; i >= 0 || carry > 0; --i) {\n            if(i >= 0) {\n                carry += num[i];\n            }\n            result.push_back(carry % 10);\n            carry /= 10;\n        }\n        reverse(result.begin(), result.end());\n        return result;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "add-to-array-form-of-integer", "has_notes": false, "flag_type": 1}, {"id": 1360658625, "question_id": 1035, "lang": "cpp", "lang_name": "C++", "time": "4\u00c2\u00a0days, 23\u00c2\u00a0hours", "timestamp": 1724008416, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360658625/", "is_pending": "Not Pending", "title": "Cousins in Binary Tree", "memory": "N/A", "code": "\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isCousins(TreeNode* root, int x, int y) {\n        queue<pair<TreeNode*, TreeNode*>> q;\n        q.push({root, nullptr});\n        \n        while (!q.empty()) {\n            int size = q.size();\n            TreeNode* xParent = nullptr;\n            TreeNode* yParent = nullptr;\n            \n            for (int i = 0; i < size; i++) {\n                TreeNode* node = q.front().first;\n                TreeNode* parent = q.front().second;\n                q.pop();\n                \n                if (node->val == x) xParent = parent;\n                if (node->val == y) yParent = parent;\n                \n                if (node->left) q.push({node->left, node});\n                if (node->right) q.push({node->right, node});\n            }\n            \n            if ((xParent && yParent && xParent != yParent) || \n                (xParent && !yParent) || \n                (!xParent && yParent)) return true;\n            if (xParent && yParent && xParent == yParent) return false;\n        }\n        \n        return false;\n    }\n};\n", "compare_result": "011001010100010110011101000000000010100100010101011000111000011010011100000011000000010111001111000000111", "title_slug": "cousins-in-binary-tree", "has_notes": false, "flag_type": 1}, {"id": 1360658297, "question_id": 1039, "lang": "cpp", "lang_name": "C++", "time": "4\u00c2\u00a0days, 23\u00c2\u00a0hours", "timestamp": 1724008395, "status": 10, "status_display": "Accepted", "runtime": "113 ms", "url": "/submissions/detail/1360658297/", "is_pending": "Not Pending", "title": "Find the Town Judge", "memory": "64.6 MB", "code": "\nclass Solution {\npublic:\n    int findJudge(int n, vector<vector<int>>& trust) {\n        vector<int> trustCount(n+1, 0);\n        for(auto &t : trust) {\n            trustCount[t[0]]--;\n            trustCount[t[1]]++;\n        }\n        for(int i = 1; i <= n; ++i) {\n            if(trustCount[i] == n-1) {\n                return i;\n            }\n        }\n        return -1;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "find-the-town-judge", "has_notes": false, "flag_type": 1}, {"id": 1360658060, "question_id": 1041, "lang": "cpp", "lang_name": "C++", "time": "4\u00c2\u00a0days, 23\u00c2\u00a0hours", "timestamp": 1724008379, "status": 10, "status_display": "Accepted", "runtime": "4 ms", "url": "/submissions/detail/1360658060/", "is_pending": "Not Pending", "title": "Available Captures for Rook", "memory": "8.8 MB", "code": "\nclass Solution {\npublic:\n    int numRookCaptures(vector<vector<char>>& board) {\n        int x = 0, y = 0, res = 0;\n        for (int i = 0; i < 8; ++i) {\n            for (int j = 0; j < 8; ++j) {\n                if (board[i][j] == 'R') {\n                    x = i;\n                    y = j;\n                    break;\n                }\n            }\n        }\n        vector<vector<int>> dirs = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n        for (auto dir : dirs) {\n            for (int i = x + dir[0], j = y + dir[1]; i >= 0 && i < 8 && j >= 0 && j < 8; i += dir[0], j += dir[1]) {\n                if (board[i][j] == 'B') break;\n                if (board[i][j] == 'p') {\n                    res++;\n                    break;\n                }\n            }\n        }\n        return res;\n    }\n};\n", "compare_result": "111111111111111111111111", "title_slug": "available-captures-for-rook", "has_notes": false, "flag_type": 1}, {"id": 1360657779, "question_id": 1044, "lang": "cpp", "lang_name": "C++", "time": "4\u00c2\u00a0days, 23\u00c2\u00a0hours", "timestamp": 1724008360, "status": 10, "status_display": "Accepted", "runtime": "9 ms", "url": "/submissions/detail/1360657779/", "is_pending": "Not Pending", "title": "Find Common Characters", "memory": "11.2 MB", "code": "\nclass Solution {\npublic:\n    vector<string> commonChars(vector<string>& words) {\n        vector<int> minfreq(26, INT_MAX);\n        vector<int> freq(26, 0);\n        for (const string& word: words) {\n            fill(freq.begin(), freq.end(), 0);\n            for (char ch: word) {\n                ++freq[ch - 'a'];\n            }\n            for (int i = 0; i < 26; ++i) {\n                minfreq[i] = min(minfreq[i], freq[i]);\n            }\n        }\n\n        vector<string> ans;\n        for (int i = 0; i < 26; ++i) {\n            for (int j = 0; j < minfreq[i]; ++j) {\n                ans.emplace_back(1, i + 'a');\n            }\n        }\n        return ans;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "find-common-characters", "has_notes": false, "flag_type": 1}, {"id": 1360657517, "question_id": 1047, "lang": "cpp", "lang_name": "C++", "time": "4\u00c2\u00a0days, 23\u00c2\u00a0hours", "timestamp": 1724008341, "status": 10, "status_display": "Accepted", "runtime": "4 ms", "url": "/submissions/detail/1360657517/", "is_pending": "Not Pending", "title": "Maximize Sum Of Array After K Negations", "memory": "13 MB", "code": "\nclass Solution {\npublic:\n    int largestSumAfterKNegations(vector<int>& nums, int k) {\n        priority_queue<int, vector<int>, greater<int>> pq(nums.begin(), nums.end());\n        while (k-- > 0) {\n            int temp = pq.top();\n            pq.pop();\n            temp *= -1;\n            pq.push(temp);\n        }\n        int sum = 0;\n        while (!pq.empty()) {\n            sum += pq.top();\n            pq.pop();\n        }\n        return sum;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "maximize-sum-of-array-after-k-negations", "has_notes": false, "flag_type": 1}, {"id": 1360657325, "question_id": 1054, "lang": "cpp", "lang_name": "C++", "time": "4\u00c2\u00a0days, 23\u00c2\u00a0hours", "timestamp": 1724008327, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1360657325/", "is_pending": "Not Pending", "title": "Complement of Base 10 Integer", "memory": "7.5 MB", "code": "\nclass Solution {\npublic:\n    int bitwiseComplement(int n) {\n        if(n == 0) return 1;\n        int mask = n;\n        mask |= (mask >> 1);\n        mask |= (mask >> 2);\n        mask |= (mask >> 4);\n        mask |= (mask >> 8);\n        mask |= (mask >> 16);\n        return n ^ mask;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "complement-of-base-10-integer", "has_notes": false, "flag_type": 1}, {"id": 1360657089, "question_id": 1062, "lang": "cpp", "lang_name": "C++", "time": "4\u00c2\u00a0days, 23\u00c2\u00a0hours", "timestamp": 1724008311, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360657089/", "is_pending": "Not Pending", "title": "Partition Array Into Three Parts With Equal Sum", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    bool canThreePartsEqualSum(vector<int>& arr) {\n        int sum = accumulate(arr.begin(), arr.end(), 0);\n        if (sum % 3 != 0) {\n            return false;\n        }\n        int target = sum / 3;\n        int n = arr.size(), i = 0, cur = 0;\n        while (i < n) {\n            cur += arr[i];\n            if (cur == target) {\n                break;\n            }\n            ++i;\n        }\n        if (cur != target) {\n            return false;\n        }\n        int j = i + 1;\n        cur = 0;\n        while (j + 1 < n) {\n            cur += arr[j];\n            if (cur == target) {\n                break;\n            }\n            ++j;\n        }\n        if (cur != target) {\n            return false;\n        }\n        return true;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111011111101111111111111111111111", "title_slug": "partition-array-into-three-parts-with-equal-sum", "has_notes": false, "flag_type": 1}, {"id": 1360656768, "question_id": 1071, "lang": "cpp", "lang_name": "C++", "time": "4\u00c2\u00a0days, 23\u00c2\u00a0hours", "timestamp": 1724008291, "status": 10, "status_display": "Accepted", "runtime": "8 ms", "url": "/submissions/detail/1360656768/", "is_pending": "Not Pending", "title": "Binary Prefix Divisible By 5", "memory": "16.5 MB", "code": "\nclass Solution {\npublic:\n    vector<bool> prefixesDivBy5(vector<int>& nums) {\n        vector<bool> result;\n        int prefix = 0;\n        for (int i = 0; i < nums.size(); ++i) {\n            prefix = ((prefix << 1) + nums[i]) % 5;\n            result.push_back(prefix == 0);\n        }\n        return result;\n    }\n};\n", "compare_result": "111111111111111111111111", "title_slug": "binary-prefix-divisible-by-5", "has_notes": false, "flag_type": 1}, {"id": 1360656545, "question_id": 1078, "lang": "cpp", "lang_name": "C++", "time": "4\u00c2\u00a0days, 23\u00c2\u00a0hours", "timestamp": 1724008277, "status": 10, "status_display": "Accepted", "runtime": "5 ms", "url": "/submissions/detail/1360656545/", "is_pending": "Not Pending", "title": "Remove Outermost Parentheses", "memory": "8.1 MB", "code": "\nclass Solution {\npublic:\n    string removeOuterParentheses(string s) {\n        string result = \"\";\n        int opened = 0;\n        for (char c : s) {\n            if (c == '(' && opened++ > 0) result += c;\n            if (c == ')' && opened-- > 1) result += c;\n        }\n        return result;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111", "title_slug": "remove-outermost-parentheses", "has_notes": false, "flag_type": 1}, {"id": 1360656340, "question_id": 1079, "lang": "cpp", "lang_name": "C++", "time": "4\u00c2\u00a0days, 23\u00c2\u00a0hours", "timestamp": 1724008263, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360656340/", "is_pending": "Not Pending", "title": "Sum of Root To Leaf Binary Numbers", "memory": "16.1 MB", "code": "\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int sumRootToLeaf(TreeNode* root) {\n        return dfs(root, 0);\n    }\n    \nprivate:\n    int dfs(TreeNode* node, int val) {\n        if (node == nullptr) return 0;\n        val = (val << 1) | node->val;\n        if (node->left == node->right) return val;\n        return dfs(node->left, val) + dfs(node->right, val);\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111", "title_slug": "sum-of-root-to-leaf-binary-numbers", "has_notes": false, "flag_type": 1}, {"id": 1360656082, "question_id": 1086, "lang": "cpp", "lang_name": "C++", "time": "4\u00c2\u00a0days, 23\u00c2\u00a0hours", "timestamp": 1724008245, "status": 10, "status_display": "Accepted", "runtime": "2 ms", "url": "/submissions/detail/1360656082/", "is_pending": "Not Pending", "title": "Divisor Game", "memory": "7.2 MB", "code": "\nclass Solution {\npublic:\n    bool divisorGame(int n) {\n        return n % 2 == 0;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111", "title_slug": "divisor-game", "has_notes": false, "flag_type": 1}, {"id": 1360655911, "question_id": 1094, "lang": "cpp", "lang_name": "C++", "time": "4\u00c2\u00a0days, 23\u00c2\u00a0hours", "timestamp": 1724008232, "status": 10, "status_display": "Accepted", "runtime": "27 ms", "url": "/submissions/detail/1360655911/", "is_pending": "Not Pending", "title": "Matrix Cells in Distance Order", "memory": "17.1 MB", "code": "\nclass Solution {\npublic:\n    vector<vector<int>> allCellsDistOrder(int rows, int cols, int rCenter, int cCenter) {\n        vector<vector<int>> res(rows * cols, vector<int>(2, 0));\n        for (int i = 0; i < rows; ++i) {\n            for (int j = 0; j < cols; ++j) {\n                res[i * cols + j] = {i, j};\n            }\n        }\n        sort(res.begin(), res.end(), [&](vector<int>& a, vector<int>& b) {\n            return abs(a[0] - rCenter) + abs(a[1] - cCenter) < abs(b[0] - rCenter) + abs(b[1] - cCenter);\n        });\n        return res;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "matrix-cells-in-distance-order", "has_notes": false, "flag_type": 1}, {"id": 1360655648, "question_id": 1112, "lang": "cpp", "lang_name": "C++", "time": "4\u00c2\u00a0days, 23\u00c2\u00a0hours", "timestamp": 1724008216, "status": 10, "status_display": "Accepted", "runtime": "40 ms", "url": "/submissions/detail/1360655648/", "is_pending": "Not Pending", "title": "Find Words That Can Be Formed by Characters", "memory": "24.2 MB", "code": "\nclass Solution {\npublic:\n    int countCharacters(vector<string>& words, string chars) {\n        vector<int> chars_count(26, 0);\n        int result = 0;\n        \n        // Count the occurrence of each character in chars\n        for (char c : chars) {\n            chars_count[c - 'a']++;\n        }\n        \n        for (string& word : words) {\n            vector<int> word_count(26, 0);\n            bool is_good = true;\n            \n            // Count the occurrence of each character in word\n            for (char c : word) {\n                word_count[c - 'a']++;\n                \n                // If the character occurs more times in word than in chars, it's not a good string\n                if (word_count[c - 'a'] > chars_count[c - 'a']) {\n                    is_good = false;\n                    break;\n                }\n            }\n            \n            // If it's a good string, add its length to the result\n            if (is_good) {\n                result += word.size();\n            }\n        }\n        \n        return result;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111", "title_slug": "find-words-that-can-be-formed-by-characters", "has_notes": false, "flag_type": 1}, {"id": 1360655401, "question_id": 1115, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724008197, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1360655401/", "is_pending": "Not Pending", "title": "Valid Boomerang", "memory": "12.2 MB", "code": "\nclass Solution {\npublic:\n    bool isBoomerang(vector<vector<int>>& points) {\n        return (points[0][0] - points[1][0]) * (points[1][1] - points[2][1]) != (points[1][0] - points[2][0]) * (points[0][1] - points[1][1]);\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "valid-boomerang", "has_notes": false, "flag_type": 1}, {"id": 1360655194, "question_id": 1127, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724008184, "status": 10, "status_display": "Accepted", "runtime": "4 ms", "url": "/submissions/detail/1360655194/", "is_pending": "Not Pending", "title": "Last Stone Weight", "memory": "9.5 MB", "code": "\nclass Solution {\npublic:\n    int lastStoneWeight(vector<int>& stones) {\n        priority_queue<int> pq(stones.begin(), stones.end());\n        while (pq.size() > 1) {\n            int y = pq.top(); pq.pop();\n            int x = pq.top(); pq.pop();\n            if (x != y) {\n                pq.push(y - x);\n            }\n        }\n        return pq.empty() ? 0 : pq.top();\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "last-stone-weight", "has_notes": false, "flag_type": 1}, {"id": 1360654946, "question_id": 1128, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724008168, "status": 10, "status_display": "Accepted", "runtime": "15 ms", "url": "/submissions/detail/1360654946/", "is_pending": "Not Pending", "title": "Remove All Adjacent Duplicates In String", "memory": "12.6 MB", "code": "\nclass Solution {\npublic:\n    string removeDuplicates(string s) {\n        string result;\n        for (char c : s) {\n            if (!result.empty() && result.back() == c) {\n                result.pop_back();\n            } else {\n                result.push_back(c);\n            }\n        }\n        return result;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "remove-all-adjacent-duplicates-in-string", "has_notes": false, "flag_type": 1}, {"id": 1360654729, "question_id": 1136, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724008153, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360654729/", "is_pending": "Not Pending", "title": "Actors and Directors Who Cooperated At Least Three Times", "memory": "N/A", "code": "sql\nSELECT actor_id, director_id\nFROM ActorDirector\nGROUP BY actor_id, director_id\nHAVING COUNT(timestamp) >= 3;\n", "compare_result": null, "title_slug": "actors-and-directors-who-cooperated-at-least-three-times", "has_notes": false, "flag_type": 1}, {"id": 1360654577, "question_id": 1137, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724008144, "status": 10, "status_display": "Accepted", "runtime": "5 ms", "url": "/submissions/detail/1360654577/", "is_pending": "Not Pending", "title": "Height Checker", "memory": "10.4 MB", "code": "\nclass Solution {\npublic:\n    int heightChecker(vector<int>& heights) {\n        vector<int> expected = heights;\n        sort(expected.begin(), expected.end());\n        int count = 0;\n        for(int i = 0; i < heights.size(); i++) {\n            if(heights[i] != expected[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "height-checker", "has_notes": false, "flag_type": 1}, {"id": 1360654231, "question_id": 1146, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724008120, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360654231/", "is_pending": "Not Pending", "title": "Greatest Common Divisor of Strings", "memory": "8.7 MB", "code": "\nclass Solution {\npublic:\n    string gcdOfStrings(string str1, string str2) {\n        if (str1 + str2 != str2 + str1) {\n            return \"\";\n        }\n        return str1.substr(0, gcd(str1.size(), str2.size()));\n    }\n    \n    int gcd(int a, int b) {\n        return b == 0 ? a : gcd(b, a % b);\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "greatest-common-divisor-of-strings", "has_notes": false, "flag_type": 1}, {"id": 1360654031, "question_id": 1153, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724008106, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360654031/", "is_pending": "Not Pending", "title": "Product Sales Analysis I", "memory": "N/A", "code": "sql\nSELECT Product.product_name, Sales.year, Sales.price\nFROM Sales\nJOIN Product ON Sales.product_id = Product.product_id;\n", "compare_result": null, "title_slug": "product-sales-analysis-i", "has_notes": false, "flag_type": 1}, {"id": 1360653887, "question_id": 1156, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724008096, "status": 10, "status_display": "Accepted", "runtime": "4 ms", "url": "/submissions/detail/1360653887/", "is_pending": "Not Pending", "title": "Occurrences After Bigram", "memory": "8.2 MB", "code": "\nclass Solution {\npublic:\n    vector<string> findOcurrences(string text, string first, string second) {\n        vector<string> words, result;\n        string word;\n        stringstream ss(text);\n        while (ss >> word) {\n            words.push_back(word);\n        }\n        for (int i = 0; i < words.size() - 2; i++) {\n            if (words[i] == first && words[i + 1] == second) {\n                result.push_back(words[i + 2]);\n            }\n        }\n        return result;\n    }\n};\n", "compare_result": "111111111111111111111111111111", "title_slug": "occurrences-after-bigram", "has_notes": false, "flag_type": 1}, {"id": 1360653681, "question_id": 1161, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724008080, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360653681/", "is_pending": "Not Pending", "title": "Project Employees I", "memory": "N/A", "code": "sql\nSELECT \n    p.project_id, \n    ROUND(AVG(e.experience_years), 2) AS average_years\nFROM \n    Project p\nJOIN \n    Employee e\nON \n    p.employee_id = e.employee_id\nGROUP BY \n    p.project_id;\n", "compare_result": null, "title_slug": "project-employees-i", "has_notes": false, "flag_type": 1}, {"id": 1360653527, "question_id": 1168, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724008069, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1360653527/", "is_pending": "Not Pending", "title": "Duplicate Zeros", "memory": "12.3 MB", "code": "\nclass Solution {\npublic:\n    void duplicateZeros(vector<int>& arr) {\n        int n = arr.size();\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == 0) {\n                arr.insert(arr.begin() + i, 0);\n                i++;\n                arr.pop_back();\n            }\n        }\n    }\n};\n", "compare_result": "1111111111111111111111111111111", "title_slug": "duplicate-zeros", "has_notes": false, "flag_type": 1}, {"id": 1360653351, "question_id": 1174, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724008056, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360653351/", "is_pending": "Not Pending", "title": "Sales Analysis III", "memory": "N/A", "code": "\n# Write your MySQL query statement below\nSELECT product_id, product_name\nFROM Product\nWHERE product_id NOT IN (\n    SELECT product_id\n    FROM Sales\n    WHERE sale_date < '2019-01-01' OR sale_date > '2019-03-31'\n) AND product_id IN (\n    SELECT product_id\n    FROM Sales\n    WHERE sale_date BETWEEN '2019-01-01' AND '2019-03-31'\n)\n", "compare_result": null, "title_slug": "sales-analysis-iii", "has_notes": false, "flag_type": 1}, {"id": 1360653160, "question_id": 1179, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724008041, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360653160/", "is_pending": "Not Pending", "title": "Game Play Analysis I", "memory": "N/A", "code": "sql\nSELECT player_id, MIN(event_date) AS first_login\nFROM Activity\nGROUP BY player_id;\n", "compare_result": null, "title_slug": "game-play-analysis-i", "has_notes": false, "flag_type": 1}, {"id": 1360653020, "question_id": 1195, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724008032, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360653020/", "is_pending": "Not Pending", "title": "Distribute Candies to People", "memory": "7.8 MB", "code": "\nclass Solution {\npublic:\n    vector<int> distributeCandies(int candies, int num_people) {\n        vector<int> distribution(num_people, 0);\n        int give = 0;\n        while (candies > 0) {\n            distribution[give % num_people] += min(candies, give + 1);\n            candies -= give + 1;\n            give++;\n        }\n        return distribution;\n    }\n};\n", "compare_result": "111111111111111111111111111", "title_slug": "distribute-candies-to-people", "has_notes": false, "flag_type": 1}, {"id": 1360652789, "question_id": 1203, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724008016, "status": 10, "status_display": "Accepted", "runtime": "5 ms", "url": "/submissions/detail/1360652789/", "is_pending": "Not Pending", "title": "Print in Order", "memory": "8.8 MB", "code": "\n#include <functional>\n#include <condition_variable>\n#include <mutex>\n\nclass Foo {\nprivate:\n    std::mutex mtx;\n    std::condition_variable cv;\n    int count;\npublic:\n    Foo() {\n        count = 1;\n    }\n\n    void first(function<void()> printFirst) {\n        std::unique_lock<std::mutex> lock(mtx);\n        // printFirst() outputs \"first\". Do not change or remove this line.\n        printFirst();\n        count++;\n        cv.notify_all();\n    }\n\n    void second(function<void()> printSecond) {\n        std::unique_lock<std::mutex> lock(mtx);\n        cv.wait(lock, [this](){ return count == 2; });\n        // printSecond() outputs \"second\". Do not change or remove this line.\n        printSecond();\n        count++;\n        cv.notify_all();\n    }\n\n    void third(function<void()> printThird) {\n        std::unique_lock<std::mutex> lock(mtx);\n        cv.wait(lock, [this](){ return count == 3; });\n        // printThird() outputs \"third\". Do not change or remove this line.\n        printThird();\n    }\n};\n", "compare_result": "111111111111111111111111111111111111", "title_slug": "print-in-order", "has_notes": false, "flag_type": 1}, {"id": 1360652556, "question_id": 1205, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007999, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360652556/", "is_pending": "Not Pending", "title": "Defanging an IP Address", "memory": "7.5 MB", "code": "\nclass Solution {\npublic:\n    string defangIPaddr(string address) {\n        string defangedIP = \"\";\n        for(char c : address) {\n            if(c == '.') {\n                defangedIP += \"[.]\";\n            } else {\n                defangedIP += c;\n            }\n        }\n        return defangedIP;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111", "title_slug": "defanging-an-ip-address", "has_notes": false, "flag_type": 1}, {"id": 1360652343, "question_id": 1210, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007986, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1360652343/", "is_pending": "Not Pending", "title": "Mean of Array After Removing Some Elements", "memory": "12.5 MB", "code": "\nclass Solution {\npublic:\n    double trimMean(vector<int>& arr) {\n        sort(arr.begin(), arr.end());\n        int n = arr.size();\n        int remove = n * 0.05;\n        double sum = 0;\n        for(int i = remove; i < n - remove; i++) {\n            sum += arr[i];\n        }\n        return sum / (n - 2 * remove);\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111", "title_slug": "mean-of-array-after-removing-some-elements", "has_notes": false, "flag_type": 1}, {"id": 1360652133, "question_id": 1217, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007972, "status": 10, "status_display": "Accepted", "runtime": "4 ms", "url": "/submissions/detail/1360652133/", "is_pending": "Not Pending", "title": "Relative Sort Array", "memory": "9.7 MB", "code": "\nclass Solution {\npublic:\n    vector<int> relativeSortArray(vector<int>& arr1, vector<int>& arr2) {\n        vector<int> freq(1001, 0);\n        for (int i : arr1) {\n            freq[i]++;\n        }\n        int idx = 0;\n        for (int i : arr2) {\n            while (freq[i]-- > 0) {\n                arr1[idx++] = i;\n            }\n        }\n        for (int i = 0; i < 1001; ++i) {\n            while (freq[i]-- > 0) {\n                arr1[idx++] = i;\n            }\n        }\n        return arr1;\n    }\n};\n", "compare_result": "11111111111111111", "title_slug": "relative-sort-array", "has_notes": false, "flag_type": 1}, {"id": 1360651879, "question_id": 1221, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007956, "status": 10, "status_display": "Accepted", "runtime": "6 ms", "url": "/submissions/detail/1360651879/", "is_pending": "Not Pending", "title": "Element Appearing More Than 25% In Sorted Array", "memory": "15.1 MB", "code": "\nclass Solution {\npublic:\n    int findSpecialInteger(vector<int>& arr) {\n        int n = arr.size();\n        int count = n / 4;\n        \n        for (int i = 0; i < n - count; ++i) {\n            if (arr[i] == arr[i + count]) {\n                return arr[i];\n            }\n        }\n        \n        return -1;\n    }\n};\n", "compare_result": "11111111111111111111111111111", "title_slug": "element-appearing-more-than-25-in-sorted-array", "has_notes": false, "flag_type": 1}, {"id": 1360651667, "question_id": 1227, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007942, "status": 10, "status_display": "Accepted", "runtime": "36 ms", "url": "/submissions/detail/1360651667/", "is_pending": "Not Pending", "title": "Number of Equivalent Domino Pairs", "memory": "25.8 MB", "code": "\nclass Solution {\npublic:\n    int numEquivDominoPairs(vector<vector<int>>& dominoes) {\n        vector<int> count(100, 0);\n        int res = 0;\n        for (auto& d : dominoes) {\n            if (d[0] > d[1])\n                swap(d[0], d[1]);\n            res += count[d[0] * 10 + d[1]]++;\n        }\n        return res;\n    }\n};\n", "compare_result": "1111111111111111111", "title_slug": "number-of-equivalent-domino-pairs", "has_notes": false, "flag_type": 1}, {"id": 1360651450, "question_id": 1231, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007926, "status": 10, "status_display": "Accepted", "runtime": "67 ms", "url": "/submissions/detail/1360651450/", "is_pending": "Not Pending", "title": "Replace Elements with Greatest Element on Right Side", "memory": "71.3 MB", "code": "\nclass Solution {\npublic:\n    vector<int> replaceElements(vector<int>& arr) {\n        int n = arr.size();\n        int max_from_right = -1;\n        for (int i = n - 1; i >= 0; --i) {\n            int current = arr[i];\n            arr[i] = max_from_right;\n            max_from_right = max(max_from_right, current);\n        }\n        return arr;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "replace-elements-with-greatest-element-on-right-side", "has_notes": false, "flag_type": 1}, {"id": 1360651239, "question_id": 1236, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007912, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360651239/", "is_pending": "Not Pending", "title": "N-th Tribonacci Number", "memory": "7.4 MB", "code": "\nclass Solution {\npublic:\n    int tribonacci(int n) {\n        if(n == 0) return 0;\n        if(n <= 2) return 1;\n        int t0 = 0, t1 = 1, t2 = 1, t3;\n        for(int i = 3; i <= n; i++){\n            t3 = t0 + t1 + t2;\n            t0 = t1;\n            t1 = t2;\n            t2 = t3;\n        }\n        return t2;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111", "title_slug": "n-th-tribonacci-number", "has_notes": false, "flag_type": 1}, {"id": 1360651066, "question_id": 1241, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007899, "status": 10, "status_display": "Accepted", "runtime": "7 ms", "url": "/submissions/detail/1360651066/", "is_pending": "Not Pending", "title": "Decompress Run-Length Encoded List", "memory": "11.9 MB", "code": "\nclass Solution {\npublic:\n    vector<int> decompressRLElist(vector<int>& nums) {\n        vector<int> result;\n        for (int i = 0; i < nums.size(); i += 2) {\n            for (int j = 0; j < nums[i]; j++) {\n                result.push_back(nums[i+1]);\n            }\n        }\n        return result;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111", "title_slug": "decompress-run-length-encoded-list", "has_notes": false, "flag_type": 1}, {"id": 1360650869, "question_id": 1245, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007886, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360650869/", "is_pending": "Not Pending", "title": "User Activity for the Past 30 Days I", "memory": "N/A", "code": "sql\nSELECT activity_date AS day, COUNT(DISTINCT user_id) AS active_users\nFROM Activity\nWHERE activity_date BETWEEN DATE_SUB('2019-07-27', INTERVAL 30 DAY) AND '2019-07-27'\nGROUP BY activity_date;\n", "compare_result": null, "title_slug": "user-activity-for-the-past-30-days-i", "has_notes": false, "flag_type": 1}, {"id": 1360650722, "question_id": 1256, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007875, "status": 10, "status_display": "Accepted", "runtime": "60 ms", "url": "/submissions/detail/1360650722/", "is_pending": "Not Pending", "title": "Rank Transform of an Array", "memory": "43 MB", "code": "\nclass Solution {\npublic:\n    vector<int> arrayRankTransform(vector<int>& arr) {\n        vector<int> sorted_arr(arr);\n        sort(sorted_arr.begin(), sorted_arr.end());\n        unordered_map<int, int> rank;\n        for (int& num : sorted_arr)\n            if (rank.find(num) == rank.end())\n                rank[num] = rank.size() + 1;\n        for (int& num : arr)\n            num = rank[num];\n        return arr;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111", "title_slug": "rank-transform-of-an-array", "has_notes": false, "flag_type": 1}, {"id": 1360650532, "question_id": 1258, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007861, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360650532/", "is_pending": "Not Pending", "title": "Article Views I", "memory": "N/A", "code": "sql\nSELECT DISTINCT author_id AS id\nFROM Views\nWHERE author_id = viewer_id\nORDER BY id;\n", "compare_result": null, "title_slug": "article-views-i", "has_notes": false, "flag_type": 1}, {"id": 1360650404, "question_id": 1260, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007852, "status": 10, "status_display": "Accepted", "runtime": "7 ms", "url": "/submissions/detail/1360650404/", "is_pending": "Not Pending", "title": "Day of the Year", "memory": "12.1 MB", "code": "\nclass Solution {\npublic:\n    int dayOfYear(string date) {\n        vector<int> daysInMonth = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n        int year = stoi(date.substr(0, 4));\n        int month = stoi(date.substr(5, 2));\n        int day = stoi(date.substr(8, 2));\n        if (month > 2 && year % 4 == 0 && (year % 100 != 0 || year % 400 == 0)) day++;\n        while (--month > 0) {\n            day += daysInMonth[month];\n        }\n        return day;\n    }\n};\n", "compare_resulttitle_slug": "day-of-the-year", "has_notes": false, "flag_type": 1}, {"id": 1360650146, "question_id": 1264, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007835, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360650146/", "is_pending": "Not Pending", "title": "Maximum Number of Words You Can Type", "memory": "8.4 MB", "code": "\nclass Solution {\npublic:\n    int canBeTypedWords(string text, string brokenLetters) {\n        int count = 0;\n        unordered_set<char> broken(brokenLetters.begin(), brokenLetters.end());\n        stringstream ss(text);\n        string word;\n        while (ss >> word) {\n            bool canType = true;\n            for (char c : word) {\n                if (broken.count(c)) {\n                    canType = false;\n                    break;\n                }\n            }\n            if (canType) {\n                count++;\n            }\n        }\n        return count;\n    }\n};\n", "compare_result": "11111111111111111111", "title_slug": "maximum-number-of-words-you-can-type", "has_notes": false, "flag_type": 1}, {"id": 1360649923, "question_id": 1274, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007819, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360649923/", "is_pending": "Not Pending", "title": "Number of Days Between Two Dates", "memory": "8 MB", "code": "\nclass Solution {\npublic:\n    int daysBetweenDates(string date1, string date2) {\n        return abs(daysFrom1971(date1) - daysFrom1971(date2));\n    }\n\nprivate:\n    int daysFrom1971(string date) {\n        int year = stoi(date.substr(0, 4));\n        int month = stoi(date.substr(5, 2));\n        int day = stoi(date.substr(8, 2));\n        int days = 0;\n        vector<int> monthDays = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n        for (int y = 1971; y < year; ++y) {\n            days += 365;\n            if (isLeap(y)) ++days;\n        }\n        for (int m = 1; m < month; ++m) {\n            days += monthDays[m];\n            if (m == 2 && isLeap(year)) ++days;\n        }\n        return days + day;\n    }\n\n    bool isLeap(int year) {\n        return year % 4 == 0 && (year % 100 != 0 || year % 400 == 0);\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "number-of-days-between-two-dates", "has_notes": false, "flag_type": 1}, {"id": 1360649611, "question_id": 1279, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007798, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360649611/", "is_pending": "Not Pending", "title": "Prime Arrangements", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    int numPrimeArrangements(int n) {\n        int primes[101] = {0,0,1,2,2,3,3,4,4,4,4,5,5,6,6,6,6,7,7,8,8,8,8,9,9,9,9,9,9,10,10,11,11,11,11,12,12,12,12,12,12,13,13,14,14,14,14,15,15,15,15,15,15,16,16,17,17,17,17,18,18,18,18,18,18,19,19,20,20,20,20,21,21,21,21,21,21,22,22,23,23,23,23,24,24,24,24,24,24,25,25,26,26,26,26,27,27,27,27,27,27,28,28,29,29,29,29,30,30,30,30,30,30,31};\n        long long fact[101] = {1};\n        for(int i = 1; i <= 100; ++i) fact[i] = fact[i-1] * i % (int)(1e9+7);\n        return fact[primes[n]] * fact[n-primes[n]] % (int)(1e9+7);\n    }\n};\n", "compare_result": null, "title_slug": "prime-arrangements", "has_notes": false, "flag_type": 1}, {"id": 1360649296, "question_id": 1283, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007775, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1360649296/", "is_pending": "Not Pending", "title": "Reformat Date", "memory": "8.6 MB", "code": "\nclass Solution {\npublic:\n    string reformatDate(string date) {\n        unordered_map<string, string> months = {{\"Jan\", \"01\"}, {\"Feb\", \"02\"}, {\"Mar\", \"03\"}, {\"Apr\", \"04\"}, {\"May\", \"05\"}, {\"Jun\", \"06\"}, {\"Jul\", \"07\"}, {\"Aug\", \"08\"}, {\"Sep\", \"09\"}, {\"Oct\", \"10\"}, {\"Nov\", \"11\"}, {\"Dec\", \"12\"}};\n        stringstream ss(date);\n        string day, month, year;\n        ss >> day >> month >> year;\n        day = day.size() == 3 ? \"0\" + day.substr(0, 1) : day.substr(0, 2);\n        return year + \"-\" + months[month] + \"-\" + day;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "reformat-date", "has_notes": false, "flag_type": 1}, {"id": 1360649075, "question_id": 1287, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007759, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360649075/", "is_pending": "Not Pending", "title": "Distance Between Bus Stops", "memory": "11.4 MB", "code": "\nclass Solution {\npublic:\n    int distanceBetweenBusStops(vector<int>& distance, int start, int destination) {\n        if(start > destination) {\n            swap(start, destination);\n        }\n        int total = 0;\n        int direct = 0;\n        for(int i = 0; i < distance.size(); i++) {\n            if(start <= i && i < destination) {\n                direct += distance[i];\n            }\n            total += distance[i];\n        }\n        return min(direct, total - direct);\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111", "title_slug": "distance-between-bus-stops", "has_notes": false, "flag_type": 1}, {"id": 1360648861, "question_id": 1289, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007744, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360648861/", "is_pending": "Not Pending", "title": "Day of the Week", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    string dayOfTheWeek(int day, int month, int year) {\n        if (month < 3) {\n            month += 12;\n            year -= 1;\n        }\n        int h = (day + 2 * month + 3 * (month + 1) / 5 + year + year / 4 - year / 100 + year / 400) % 7;\n        string daysOfWeek[7] = {\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"};\n        return daysOfWeek[h];\n    }\n};\n", "compare_result": "0000000000000000000000000000000000000000000", "title_slug": "day-of-the-week", "has_notes": false, "flag_type": 1}, {"id": 1360648608, "question_id": 1293, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007728, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1360648608/", "is_pending": "Not Pending", "title": "Three Consecutive Odds", "memory": "11 MB", "code": "\nclass Solution {\npublic:\n    bool threeConsecutiveOdds(vector<int>& arr) {\n        int count = 0;\n        for(int i = 0; i < arr.size(); i++){\n            if(arr[i] % 2 != 0){\n                count++;\n                if(count == 3)\n                    return true;\n            }\n            else\n                count = 0;\n        }\n        return false;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111", "title_slug": "three-consecutive-odds", "has_notes": false, "flag_type": 1}, {"id": 1360648395, "question_id": 1297, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007714, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360648395/", "is_pending": "Not Pending", "title": "Maximum Number of Balloons", "memory": "8.1 MB", "code": "\nclass Solution {\npublic:\n    int maxNumberOfBalloons(string text) {\n        vector<int> count(26, 0);\n        for (char c : text)\n            count[c - 'a']++;\n        return min({count[1], count[0], count[11] / 2, count[14] / 2, count[13]}); // b, a, l, o, n\n    }\n};\n", "compare_result": "111111111111111111111111111", "title_slug": "maximum-number-of-balloons", "has_notes": false, "flag_type": 1}, {"id": 1360648197, "question_id": 1301, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007700, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360648197/", "is_pending": "Not Pending", "title": "Reformat Department Table", "memory": "N/A", "code": "\n# Write your MySQL query statement below\nSELECT id,\n       MAX(IF(month = 'Jan', revenue, NULL)) AS Jan_Revenue,\n       MAX(IF(month = 'Feb', revenue, NULL)) AS Feb_Revenue,\n       MAX(IF(month = 'Mar', revenue, NULL)) AS Mar_Revenue,\n       MAX(IF(month = 'Apr', revenue, NULL)) AS Apr_Revenue,\n       MAX(IF(month = 'May', revenue, NULL)) AS May_Revenue,\n       MAX(IF(month = 'Jun', revenue, NULL)) AS Jun_Revenue,\n       MAX(IF(month = 'Jul', revenue, NULL)) AS Jul_Revenue,\n       MAX(IF(month = 'Aug', revenue, NULL)) AS Aug_Revenue,\n       MAX(IF(month = 'Sep', revenue, NULL)) AS Sep_Revenue,\n       MAX(IF(month = 'Oct', revenue, NULL)) AS Oct_Revenue,\n       MAX(IF(month = 'Nov', revenue, NULL)) AS Nov_Revenue,\n       MAX(IF(month = 'Dec', revenue, NULL)) AS Dec_Revenue\nFROM Department\nGROUP BY id\n", "compare_result": null, "title_slug": "reformat-department-table", "has_notes": false, "flag_type": 1}, {"id": 1360647882, "question_id": 1302, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007678, "status": 10, "status_display": "Accepted", "runtime": "129 ms", "url": "/submissions/detail/1360647882/", "is_pending": "Not Pending", "title": "Delete Characters to Make Fancy String", "memory": "42.8 MB", "code": "\nclass Solution {\npublic:\n    string makeFancyString(string s) {\n        string result = \"\";\n        int count = 1;\n        result += s[0];\n        for(int i = 1; i < s.length(); i++){\n            if(s[i] == s[i-1]){\n                count++;\n            } else {\n                count = 1;\n            }\n            if(count < 3){\n                result += s[i];\n            }\n        }\n        return result;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "delete-characters-to-make-fancy-string", "has_notes": false, "flag_type": 1}, {"id": 1360647646, "question_id": 1306, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007663, "status": 10, "status_display": "Accepted", "runtime": "50 ms", "url": "/submissions/detail/1360647646/", "is_pending": "Not Pending", "title": "Minimum Absolute Difference", "memory": "35.9 MB", "code": "\nclass Solution {\npublic:\n    vector<vector<int>> minimumAbsDifference(vector<int>& arr) {\n        sort(arr.begin(), arr.end());\n        vector<vector<int>> result;\n        int minDiff = INT_MAX;\n        for (int i = 1; i < arr.size(); i++) {\n            int diff = arr[i] - arr[i - 1];\n            if (diff < minDiff) {\n                minDiff = diff;\n                result.clear();\n                result.push_back({arr[i - 1], arr[i]});\n            } else if (diff == minDiff) {\n                result.push_back({arr[i - 1], arr[i]});\n            }\n        }\n        return result;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111", "title_slug": "minimum-absolute-difference", "has_notes": false, "flag_type": 1}, {"id": 1360647381, "question_id": 1319, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007647, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360647381/", "is_pending": "Not Pending", "title": "Unique Number of Occurrences", "memory": "11.6 MB", "code": "\nclass Solution {\npublic:\n    bool uniqueOccurrences(vector<int>& arr) {\n        unordered_map<int, int> count;\n        for (int a : arr) {\n            count[a]++;\n        }\n        unordered_set<int> unique;\n        for (auto c : count) {\n            if (!unique.insert(c.second).second) {\n                return false;\n            }\n        }\n        return true;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "unique-number-of-occurrences", "has_notes": false, "flag_type": 1}, {"id": 1360647180, "question_id": 1329, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007634, "status": 10, "status_display": "Accepted", "runtime": "4 ms", "url": "/submissions/detail/1360647180/", "is_pending": "Not Pending", "title": "Minimum Cost to Move Chips to The Same Position", "memory": "9.2 MB", "code": "\nclass Solution {\npublic:\n    int minCostToMoveChips(vector<int>& position) {\n        int even = 0, odd = 0;\n        for (int i : position) {\n            if (i % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n        }\n        return min(even, odd);\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111", "title_slug": "minimum-cost-to-move-chips-to-the-same-position", "has_notes": false, "flag_type": 1}, {"id": 1360647016, "question_id": 1338, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007620, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360647016/", "is_pending": "Not Pending", "title": "Queries Quality and Percentage", "memory": "N/A", "code": "\n# Write your MySQL query statement below\nSELECT query_name, \n       ROUND(AVG(rating / position), 2) AS quality, \n       ROUND(SUM(IF(rating < 3, 1, 0)) / COUNT(*) * 100, 2) AS poor_query_percentage\nFROM Queries\nGROUP BY query_name;\n", "compare_result": null, "title_slug": "queries-quality-and-percentage", "has_notes": false, "flag_type": 1}, {"id": 1360646835, "question_id": 1341, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007607, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360646835/", "is_pending": "Not Pending", "title": "Split a String in Balanced Strings", "memory": "7.5 MB", "code": "\nclass Solution {\npublic:\n    int balancedStringSplit(string s) {\n        int count = 0, balance = 0;\n        for (char c : s) {\n            balance += (c == 'L') ? 1 : -1;\n            if (balance == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111", "title_slug": "split-a-string-in-balanced-strings", "has_notes": false, "flag_type": 1}, {"id": 1360646586, "question_id": 1349, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007591, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1360646586/", "is_pending": "Not Pending", "title": "Check If It Is a Straight Line", "memory": "13.6 MB", "code": "\nclass Solution {\npublic:\n    bool checkStraightLine(vector<vector<int>>& coordinates) {\n        int size = coordinates.size();\n        int xDiff = coordinates[1][0] - coordinates[0][0];\n        int yDiff = coordinates[1][1] - coordinates[0][1]; \n        \n        for(int i = 2; i < size; i++){\n            auto p = coordinates[i];\n            if(xDiff * (p[1] - coordinates[0][1]) != yDiff * (p[0] - coordinates[0][0])){\n                return false;\n            }\n        }\n        return true;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "check-if-it-is-a-straight-line", "has_notes": false, "flag_type": 1}, {"id": 1360646288, "question_id": 1353, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007572, "status": 10, "status_display": "Accepted", "runtime": "4 ms", "url": "/submissions/detail/1360646288/", "is_pending": "Not Pending", "title": "Find Resultant Array After Removing Anagrams", "memory": "16.3 MB", "code": "\nclass Solution {\npublic:\n    vector<string> removeAnagrams(vector<string>& words) {\n        for (int i = 1; i < words.size(); i++) {\n            string s1 = words[i];\n            string s2 = words[i - 1];\n            sort(s1.begin(), s1.end());\n            sort(s2.begin(), s2.end());\n            if (s1 == s2) {\n                words.erase(words.begin() + i);\n                i--;\n            }\n        }\n        return words;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "find-resultant-array-after-removing-anagrams", "has_notes": false, "flag_type": 1}, {"id": 1360645970, "question_id": 1363, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007552, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1360645970/", "is_pending": "Not Pending", "title": "Greatest English Letter in Upper and Lower Case", "memory": "8.2 MB", "code": "\nclass Solution {\npublic:\n    string greatestLetter(string s) {\n        vector<int> lower(26, 0), upper(26, 0);\n        for (char c : s) {\n            if (islower(c)) lower[c - 'a']++;\n            else upper[c - 'A']++;\n        }\n        for (int i = 25; i >= 0; i--) {\n            if (lower[i] > 0 && upper[i] > 0) return string(1, 'A' + i);\n        }\n        return \"\";\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "greatest-english-letter-in-upper-and-lower-case", "has_notes": false, "flag_type": 1}, {"id": 1360645729, "question_id": 1378, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007536, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360645729/", "is_pending": "Not Pending", "title": "Cells with Odd Values in a Matrix", "memory": "10.1 MB", "code": "\nclass Solution {\npublic:\n    int oddCells(int m, int n, vector<vector<int>>& indices) {\n        vector<int> rows(m, 0);\n        vector<int> cols(n, 0);\n        for(auto& index : indices) {\n            rows[index[0]]++;\n            cols[index[1]]++;\n        }\n        int oddCount = 0;\n        for(int i = 0; i < m; i++) {\n            for(int j = 0; j < n; j++) {\n                if((rows[i] + cols[j]) % 2 != 0) {\n                    oddCount++;\n                }\n            }\n        }\n        return oddCount;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111", "title_slug": "cells-with-odd-values-in-a-matrix", "has_notes": false, "flag_type": 1}, {"id": 1360645486, "question_id": 1382, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007518, "status": 10, "status_display": "Accepted", "runtime": "5 ms", "url": "/submissions/detail/1360645486/", "is_pending": "Not Pending", "title": "Calculate Amount Paid in Taxes", "memory": "17.6 MB", "code": "\nclass Solution {\npublic:\n    double calculateTax(vector<vector<int>>& brackets, int income) {\n        double tax = 0;\n        int prev = 0;\n        for (auto& bracket : brackets) {\n            if (income > bracket[0]) {\n                tax += (bracket[0] - prev) * bracket[1] / 100.0;\n                prev = bracket[0];\n            } else {\n                tax += (income - prev) * bracket[1] / 100.0;\n                return tax;\n            }\n        }\n        return tax;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "calculate-amount-paid-in-taxes", "has_notes": false, "flag_type": 1}, {"id": 1360645240, "question_id": 1386, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007503, "status": 10, "status_display": "Accepted", "runtime": "13 ms", "url": "/submissions/detail/1360645240/", "is_pending": "Not Pending", "title": "Shift 2D Grid", "memory": "16.8 MB", "code": "\nclass Solution {\npublic:\n    vector<vector<int>> shiftGrid(vector<vector<int>>& grid, int k) {\n        int m = grid.size();\n        int n = grid[0].size();\n        vector<vector<int>> newGrid(m, vector<int>(n, 0));\n        \n        for(int i = 0; i < m; i++) {\n            for(int j = 0; j < n; j++) {\n                int newColumn = (j + k) % n;\n                int newRow = (i + (j + k) / n) % m;\n                newGrid[newRow][newColumn] = grid[i][j];\n            }\n        }\n        \n        return newGrid;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "shift-2d-grid", "has_notes": false, "flag_type": 1}, {"id": 1360644993, "question_id": 1390, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007487, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360644993/", "is_pending": "Not Pending", "title": "Average Selling Price", "memory": "N/A", "code": "\n# Write your MySQL query statement below\nSELECT UnitsSold.product_id, ROUND(SUM(UnitsSold.units * Prices.price) / SUM(UnitsSold.units), 2) AS average_price\nFROM UnitsSold\nJOIN Prices ON UnitsSold.product_id = Prices.product_id\nWHERE UnitsSold.purchase_date BETWEEN Prices.start_date AND Prices.end_date\nGROUP BY UnitsSold.product_id;\n", "compare_result": null, "title_slug": "average-selling-price", "has_notes": false, "flag_type": 1}, {"id": 1360644738, "question_id": 1392, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007469, "status": 10, "status_display": "Accepted", "runtime": "30 ms", "url": "/submissions/detail/1360644738/", "is_pending": "Not Pending", "title": "Find the Difference of Two Arrays", "memory": "37.3 MB", "code": "\nclass Solution {\npublic:\n    vector<vector<int>> findDifference(vector<int>& nums1, vector<int>& nums2) {\n        unordered_set<int> set1(nums1.begin(), nums1.end());\n        unordered_set<int> set2(nums2.begin(), nums2.end());\n        \n        vector<int> diff1, diff2;\n        for (int num : set1) {\n            if (set2.find(num) == set2.end()) {\n                diff1.push_back(num);\n            }\n        }\n        for (int num : set2) {\n            if (set1.find(num) == set1.end()) {\n                diff2.push_back(num);\n            }\n        }\n        \n        return {diff1, diff2};\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "find-the-difference-of-two-arrays", "has_notes": false, "flag_type": 1}, {"id": 1360644520, "question_id": 1395, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007455, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1360644520/", "is_pending": "Not Pending", "title": "Minimum Time Visiting All Points", "memory": "13.5 MB", "code": "\nclass Solution {\npublic:\n    int minTimeToVisitAllPoints(vector<vector<int>>& points) {\n        int time = 0;\n        for(int i = 0; i < points.size() - 1; i++) {\n            int dx = abs(points[i][0] - points[i+1][0]);\n            int dy = abs(points[i][1] - points[i+1][1]);\n            time += max(dx, dy);\n        }\n        return time;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "minimum-time-visiting-all-points", "has_notes": false, "flag_type": 1}, {"id": 1360644314, "question_id": 1400, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007441, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360644314/", "is_pending": "Not Pending", "title": "Find Winner on a Tic Tac Toe Game", "memory": "10.2 MB", "code": "\nclass Solution {\npublic:\n    string tictactoe(vector<vector<int>>& moves) {\n        vector<vector<int>> grid(3, vector<int>(3, 0));\n        int player = 1;\n        for(auto& move : moves) {\n            grid[move[0]][move[1]] = player;\n            if(checkWin(grid, player)) {\n                return player == 1 ? \"A\" : \"B\";\n            }\n            player = player == 1 ? 2 : 1;\n        }\n        return moves.size() == 9 ? \"Draw\" : \"Pending\";\n    }\n    \n    bool checkWin(vector<vector<int>>& grid, int player) {\n        for(int i = 0; i < 3; ++i) {\n            if(grid[i][0] == player && grid[i][1] == player && grid[i][2] == player) {\n                return true;\n            }\n            if(grid[0][i] == player && grid[1][i] == player && grid[2][i] == player) {\n                return true;\n            }\n        }\n        if(grid[0][0] == player && grid[1][1] == player && grid[2][2] == player) {\n            return true;\n        }\n        if(grid[0][2] == player && grid[1][1] == player && grid[2][0] == player) {\n            return true;\n        }\n        return false;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "find-winner-on-a-tic-tac-toe-game", "has_notes": false, "flag_type": 1}, {"id": 1360643933, "question_id": 1406, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007414, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360643933/", "is_pending": "Not Pending", "title": "Subtract the Product and Sum of Digits of an Integer", "memory": "7.5 MB", "code": "\nclass Solution {\npublic:\n    int subtractProductAndSum(int n) {\n        int product = 1;\n        int sum = 0;\n        while (n > 0) {\n            int digit = n % 10;\n            product *= digit;\n            sum += digit;\n            n /= 10;\n        }\n        return product - sum;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "subtract-the-product-and-sum-of-digits-of-an-integer", "has_notes": false, "flag_type": 1}, {"id": 1360643752, "question_id": 1411, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007403, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360643752/", "is_pending": "Not Pending", "title": "Convert Binary Number in a Linked List to Integer", "memory": "10 MB", "code": "\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    int getDecimalValue(ListNode* head) {\n        int result = 0;\n        while(head != nullptr) {\n            result = (result << 1) | head->val;\n            head = head->next;\n        }\n        return result;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "convert-binary-number-in-a-linked-list-to-integer", "has_notes": false, "flag_type": 1}, {"id": 1360643548, "question_id": 1415, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007388, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360643548/", "is_pending": "Not Pending", "title": "Students and Examinations", "memory": "N/A", "code": "sql\nSELECT s.student_id, s.student_name, sb.subject_name, IFNULL(e.attended_exams, 0) AS attended_exams\nFROM Students s\nCROSS JOIN Subjects sb\nLEFT JOIN (\n    SELECT student_id, subject_name, COUNT(*) AS attended_exams\n    FROM Examinations\n    GROUP BY student_id, subject_name\n) e\nON s.student_id = e.student_id AND sb.subject_name = e.subject_name\nORDER BY s.student_id, sb.subject_name;\n", "compare_result": null, "title_slug": "students-and-examinations", "has_notes": false, "flag_type": 1}, {"id": 1360643325, "question_id": 1421, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007374, "status": 10, "status_display": "Accepted", "runtime": "5 ms", "url": "/submissions/detail/1360643325/", "is_pending": "Not Pending", "title": "Find Numbers with Even Number of Digits", "memory": "14.8 MB", "code": "\nclass Solution {\npublic:\n    int findNumbers(vector<int>& nums) {\n        int count = 0;\n        for(int num : nums){\n            if(to_string(num).size() % 2 == 0){\n                count++;\n            }\n        }\n        return count;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "find-numbers-with-even-number-of-digits", "has_notes": false, "flag_type": 1}, {"id": 1360643123, "question_id": 1426, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007361, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360643123/", "is_pending": "Not Pending", "title": "Find N Unique Integers Sum up to Zero", "memory": "8.2 MB", "code": "\nclass Solution {\npublic:\n    vector<int> sumZero(int n) {\n        vector<int> result(n, 0);\n        for(int i = 0; i < n; i++){\n            result[i] = i * 2 - n + 1;\n        }\n        return result;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111", "title_slug": "find-n-unique-integers-sum-up-to-zero", "has_notes": false, "flag_type": 1}, {"id": 1360642946, "question_id": 1430, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007350, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360642946/", "is_pending": "Not Pending", "title": "Find the K-Beauty of a Number", "memory": "7.8 MB", "code": "\nclass Solution {\npublic:\n    int divisorSubstrings(int num, int k) {\n        string numStr = to_string(num);\n        int count = 0;\n        for (int i = 0; i <= numStr.size() - k; i++) {\n            int subNum = stoi(numStr.substr(i, k));\n            if (subNum != 0 && num % subNum == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "find-the-k-beauty-of-a-number", "has_notes": false, "flag_type": 1}, {"id": 1360642709, "question_id": 1434, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007334, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360642709/", "is_pending": "Not Pending", "title": "Decrypt String from Alphabet to Integer Mapping", "memory": "7.7 MB", "code": "\nclass Solution {\npublic:\n    string freqAlphabets(string s) {\n        string result = \"\";\n        for(int i = 0; i < s.size(); i++){\n            if(i+2 < s.size() && s[i+2] == '#'){\n                result += 'j' + (s[i] - '1')*10 + s[i+1] - '0';\n                i += 2;\n            }\n            else{\n                result += 'a' + s[i] - '1';\n            }\n        }\n        return result;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111", "title_slug": "decrypt-string-from-alphabet-to-integer-mapping", "has_notes": false, "flag_type": 1}, {"id": 1360642505, "question_id": 1440, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007320, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1360642505/", "is_pending": "Not Pending", "title": "Convert Integer to the Sum of Two No-Zero Integers", "memory": "7.8 MB", "code": "\nclass Solution {\npublic:\n    vector<int> getNoZeroIntegers(int n) {\n        for (int i = 1; i < n; ++i) {\n            if (check(i) && check(n - i)) {\n                return {i, n - i};\n            }\n        }\n        return {};\n    }\n\nprivate:\n    bool check(int n) {\n        while (n > 0) {\n            if (n % 10 == 0) {\n                return false;\n            }\n            n /= 10;\n        }\n        return true;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "convert-integer-to-the-sum-of-two-no-zero-integers", "has_notes": false, "flag_type": 1}, {"id": 1360642282, "question_id": 1444, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007304, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1360642282/", "is_pending": "Not Pending", "title": "Number of Steps to Reduce a Number to Zero", "memory": "7.6 MB", "code": "\nclass Solution {\npublic:\n    int numberOfSteps(int num) {\n        int steps = 0;\n        while(num != 0) {\n            if(num % 2 == 0) {\n                num /= 2;\n            } else {\n                num -= 1;\n            }\n            steps++;\n        }\n        return steps;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "number-of-steps-to-reduce-a-number-to-zero", "has_notes": false, "flag_type": 1}, {"id": 1360642105, "question_id": 1448, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007292, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1360642105/", "is_pending": "Not Pending", "title": "Maximum 69 Number", "memory": "7.8 MB", "code": "\nclass Solution {\npublic:\n    int maximum69Number (int num) {\n        string numStr = to_string(num);\n        for (char &c : numStr) {\n            if (c == '6') {\n                c = '9';\n                break;\n            }\n        }\n        return stoi(numStr);\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "maximum-69-number", "has_notes": false, "flag_type": 1}, {"id": 1360641928, "question_id": 1454, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007278, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360641928/", "is_pending": "Not Pending", "title": "Remove Palindromic Subsequences", "memory": "7.6 MB", "code": "\nclass Solution {\npublic:\n    int removePalindromeSub(string s) {\n        if (s.empty()) return 0;\n        for (int i = 0, j = s.size() - 1; i < j; ++i, --j)\n            if (s[i] != s[j]) return 2;\n        return 1;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111", "title_slug": "remove-palindromic-subsequences", "has_notes": false, "flag_type": 1}, {"id": 1360641686, "question_id": 1458, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007264, "status": 10, "status_display": "Accepted", "runtime": "5 ms", "url": "/submissions/detail/1360641686/", "is_pending": "Not Pending", "title": "Sort Integers by The Number of 1 Bits", "memory": "13 MB", "code": "\nclass Solution {\npublic:\n    vector<int> sortByBits(vector<int>& arr) {\n        sort(arr.begin(), arr.end(), [](int a, int b) {\n            int countA = __builtin_popcount(a);\n            int countB = __builtin_popcount(b);\n            if (countA == countB) {\n                return a < b;\n            }\n            return countA < countB;\n        });\n        return arr;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "sort-integers-by-the-number-of-1-bits", "has_notes": false, "flag_type": 1}, {"id": 1360641483, "question_id": 1462, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007251, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360641483/", "is_pending": "Not Pending", "title": "List the Products Ordered in a Period", "memory": "N/A", "code": "\n# Write your MySQL query statement below\nSELECT p.product_name, SUM(o.unit) AS unit\nFROM Products p\nJOIN Orders o\nON p.product_id = o.product_id\nWHERE o.order_date BETWEEN '2020-02-01' AND '2020-02-29'\nGROUP BY p.product_id\nHAVING SUM(o.unit) >= 100\n", "compare_result": null, "title_slug": "list-the-products-ordered-in-a-period", "has_notes": false, "flag_type": 1}, {"id": 1360641314, "question_id": 1463, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007238, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1360641314/", "is_pending": "Not Pending", "title": "The K Weakest Rows in a Matrix", "memory": "13.2 MB", "code": "\nclass Solution {\npublic:\n    vector<int> kWeakestRows(vector<vector<int>>& mat, int k) {\n        vector<pair<int, int>> soldiers;\n        for(int i = 0; i < mat.size(); i++) {\n            int count = 0;\n            for(int j = 0; j < mat[i].size(); j++) {\n                if(mat[i][j] == 1) {\n                    count++;\n                } else {\n                    break;\n                }\n            }\n            soldiers.push_back({count, i});\n        }\n        sort(soldiers.begin(), soldiers.end());\n        vector<int> result;\n        for(int i = 0; i < k; i++) {\n            result.push_back(soldiers[i].second);\n        }\n        return result;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111", "title_slug": "the-k-weakest-rows-in-a-matrix", "has_notes": false, "flag_type": 1}, {"id": 1360641065, "question_id": 1468, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007222, "status": 10, "status_display": "Accepted", "runtime": "9 ms", "url": "/submissions/detail/1360641065/", "is_pending": "Not Pending", "title": "Check If N and Its Double Exist", "memory": "13.5 MB", "code": "\nclass Solution {\npublic:\n    bool checkIfExist(vector<int>& arr) {\n        unordered_set<int> s;\n        for (int i : arr) {\n            if (s.count(2 * i) || (i % 2 == 0 && s.count(i / 2)))\n                return true;\n            s.insert(i);\n        }\n        return false;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "check-if-n-and-its-double-exist", "has_notes": false, "flag_type": 1}, {"id": 1360640874, "question_id": 1472, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007209, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360640874/", "is_pending": "Not Pending", "title": "Increasing Decreasing String", "memory": "9.3 MB", "code": "\nclass Solution {\npublic:\n    string sortString(string s) {\n        vector<int> freq(26, 0);\n        for (char c : s) {\n            freq[c - 'a']++;\n        }\n        \n        string result = \"\";\n        while (result.size() < s.size()) {\n            for (int i = 0; i < 26; i++) {\n                if (freq[i] > 0) {\n                    result += (char)(i + 'a');\n                    freq[i]--;\n                }\n            }\n            for (int i = 25; i >= 0; i--) {\n                if (freq[i] > 0) {\n                    result += (char)(i + 'a');\n                    freq[i]--;\n                }\n            }\n        }\n        return result;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "increasing-decreasing-string", "has_notes": false, "flag_type": 1}, {"id": 1360640664, "question_id": 1476, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007194, "status": 10, "status_display": "Accepted", "runtime": "15 ms", "url": "/submissions/detail/1360640664/", "is_pending": "Not Pending", "title": "Count Negative Numbers in a Sorted Matrix", "memory": "13.2 MB", "code": "\nclass Solution {\npublic:\n    int countNegatives(vector<vector<int>>& grid) {\n        int m = grid.size();\n        int n = grid[0].size();\n        int i = 0, j = n - 1;\n        int count = 0;\n        while(i < m && j >= 0) {\n            if(grid[i][j] < 0) {\n                count += m - i;\n                j--;\n            } else {\n                i++;\n            }\n        }\n        return count;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111", "title_slug": "count-negative-numbers-in-a-sorted-matrix", "has_notes": false, "flag_type": 1}, {"id": 1360640429, "question_id": 1482, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007179, "status": 10, "status_display": "Accepted", "runtime": "4 ms", "url": "/submissions/detail/1360640429/", "is_pending": "Not Pending", "title": "How Many Numbers Are Smaller Than the Current Number", "memory": "12.9 MB", "code": "\nclass Solution {\npublic:\n    vector<int> smallerNumbersThanCurrent(vector<int>& nums) {\n        vector<int> count(101, 0);\n        vector<int> res(nums.size(), 0);\n        \n        for (int i = 0; i < nums.size(); i++) {\n            count[nums[i]]++;\n        }\n        \n        for (int i = 1 ; i <= 100; i++) {\n            count[i] += count[i-1];    \n        }\n        \n        for (int i = 0; i < nums.size(); i++) {\n            if (nums[i] == 0) {\n                res[i] = 0;\n            } else {\n                res[i] = count[nums[i] - 1];\n            }\n        }\n        \n        return res;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "how-many-numbers-are-smaller-than-the-current-number", "has_notes": false, "flag_type": 1}, {"id": 1360640166, "question_id": 1486, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007162, "status": 10, "status_display": "Accepted", "runtime": "12 ms", "url": "/submissions/detail/1360640166/", "is_pending": "Not Pending", "title": "Find the Distance Value Between Two Arrays", "memory": "15.8 MB", "code": "\nclass Solution {\npublic:\n    int findTheDistanceValue(vector<int>& arr1, vector<int>& arr2, int d) {\n        int count = 0;\n        for (int i = 0; i < arr1.size(); i++) {\n            bool flag = true;\n            for (int j = 0; j < arr2.size(); j++) {\n                if (abs(arr1[i] - arr2[j]) <= d) {\n                    flag = false;\n                    break;\n                }\n            }\n            if (flag) {\n                count++;\n            }\n        }\n        return count;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "find-the-distance-value-between-two-arrays", "has_notes": false, "flag_type": 1}, {"id": 1360639980, "question_id": 1490, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007147, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1360639980/", "is_pending": "Not Pending", "title": "Generate a String With Characters That Have Odd Counts", "memory": "7.8 MB", "code": "\nclass Solution {\npublic:\n    string generateTheString(int n) {\n        string result(n, 'a');\n        if (n % 2 == 0) {\n            result[n - 1] = 'b';\n        }\n        return result;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "generate-a-string-with-characters-that-have-odd-counts", "has_notes": false, "flag_type": 1}, {"id": 1360639832, "question_id": 1496, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007136, "status": 10, "status_display": "Accepted", "runtime": "16 ms", "url": "/submissions/detail/1360639832/", "is_pending": "Not Pending", "title": "Lucky Numbers in a Matrix", "memory": "14.5 MB", "code": "\nclass Solution {\npublic:\n    vector<int> luckyNumbers (vector<vector<int>>& matrix) {\n        int m = matrix.size();\n        int n = matrix[0].size();\n        vector<int> minRow(m, INT_MAX);\n        vector<int> maxCol(n, INT_MIN);\n        vector<int> res;\n\n        for(int i = 0; i < m; i++){\n            for(int j = 0; j < n; j++){\n                minRow[i] = min(minRow[i], matrix[i][j]);\n                maxCol[j] = max(maxCol[j], matrix[i][j]);\n            }\n        }\n\n        for(int i = 0; i < m; i++){\n            for(int j = 0; j < n; j++){\n                if(matrix[i][j] == minRow[i] && matrix[i][j] == maxCol[j]){\n                    res.push_back(matrix[i][j]);\n                }\n            }\n        }\n\n        return res;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "lucky-numbers-in-a-matrix", "has_notes": false, "flag_type": 1}, {"id": 1360639546, "question_id": 1498, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007116, "status": 10, "status_display": "Accepted", "runtime": "380 ms", "url": "/submissions/detail/1360639546/", "is_pending": "Not Pending", "title": "Find a Corresponding Node of a Binary Tree in a Clone of That Tree", "memory": "164.2 MB", "code": "\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\n\nclass Solution {\npublic:\n    TreeNode* getTargetCopy(TreeNode* original, TreeNode* cloned, TreeNode* target) {\n        if (original == NULL)\n            return NULL;\n        if (original == target)\n            return cloned;\n        TreeNode* left = getTargetCopy(original->left, cloned->left, target);\n        if (left != NULL)\n            return left;\n        return getTargetCopy(original->right, cloned->right, target);\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111", "title_slug": "find-a-corresponding-node-of-a-binary-tree-in-a-clone-of-that-tree", "has_notes": false, "flag_type": 1}, {"id": 1360639335, "question_id": 1500, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007102, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1360639335/", "is_pending": "Not Pending", "title": "Count Largest Group", "memory": "7.5 MB", "code": "\nclass Solution {\npublic:\n    int countLargestGroup(int n) {\n        vector<int> count(37, 0);\n        int maxCount = 0, res = 0;\n        for (int i = 1; i <= n; ++i) {\n            int sum = 0, j = i;\n            while (j) {\n                sum += j % 10;\n                j /= 10;\n            }\n            maxCount = max(maxCount, ++count[sum]);\n        }\n        for (int c: count) {\n            if (c == maxCount) {\n                ++res;\n            }\n        }\n        return res;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "count-largest-group", "has_notes": false, "flag_type": 1}, {"id": 1360639091, "question_id": 1505, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007086, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360639091/", "is_pending": "Not Pending", "title": "Create Target Array in the Given Order", "memory": "10.5 MB", "code": "\nclass Solution {\npublic:\n    vector<int> createTargetArray(vector<int>& nums, vector<int>& index) {\n        vector<int> target;\n        for(int i=0; i<nums.size(); i++){\n            target.insert(target.begin()+index[i], nums[i]);\n        }\n        return target;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111", "title_slug": "create-target-array-in-the-given-order", "has_notes": false, "flag_type": 1}, {"id": 1360638940, "question_id": 1509, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007074, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360638940/", "is_pending": "Not Pending", "title": "Replace Employee ID With The Unique Identifier", "memory": "N/A", "code": "sql\nSELECT EmployeeUNI.unique_id, Employees.name\nFROM Employees\nLEFT JOIN EmployeeUNI\nON Employees.id = EmployeeUNI.id;\n", "compare_result": null, "title_slug": "replace-employee-id-with-the-unique-identifier", "has_notes": false, "flag_type": 1}, {"id": 1360638736, "question_id": 1510, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007061, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1360638736/", "is_pending": "Not Pending", "title": "Find Lucky Integer in an Array", "memory": "14.3 MB", "code": "\nclass Solution {\npublic:\n    int findLucky(vector<int>& arr) {\n        unordered_map<int, int> freq;\n        for (int num : arr) {\n            freq[num]++;\n        }\n        int lucky = -1;\n        for (auto& [num, count] : freq) {\n            if (num == count) {\n                lucky = max(lucky, num);\n            }\n        }\n        return lucky;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "find-lucky-integer-in-an-array", "has_notes": false, "flag_type": 1}, {"id": 1360638529, "question_id": 1514, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007047, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360638529/", "is_pending": "Not Pending", "title": "Minimum Value to Get Positive Step by Step Sum", "memory": "9.2 MB", "code": "\nclass Solution {\npublic:\n    int minStartValue(vector<int>& nums) {\n        int minSum = 0, sum = 0;\n        for (int num : nums) {\n            sum += num;\n            minSum = min(minSum, sum);\n        }\n        return 1 - minSum;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111", "title_slug": "minimum-value-to-get-positive-step-by-step-sum", "has_notes": false, "flag_type": 1}, {"id": 1360638293, "question_id": 1519, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007033, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1360638293/", "is_pending": "Not Pending", "title": "Minimum Subsequence in Non-Increasing Order", "memory": "13.5 MB", "code": "\nclass Solution {\npublic:\n    vector<int> minSubsequence(vector<int>& nums) {\n        sort(nums.begin(), nums.end());\n        int total = accumulate(nums.begin(), nums.end(), 0);\n        int subTotal = 0;\n        vector<int> result;\n        for (int i = nums.size() - 1; i >= 0; --i) {\n            subTotal += nums[i];\n            result.push_back(nums[i]);\n            if (subTotal > total - subTotal) {\n                break;\n            }\n        }\n        return result;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "minimum-subsequence-in-non-increasing-order", "has_notes": false, "flag_type": 1}, {"id": 1360638064, "question_id": 1524, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007018, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1360638064/", "is_pending": "Not Pending", "title": "String Matching in an Array", "memory": "10.5 MB", "code": "\nclass Solution {\npublic:\n    vector<string> stringMatching(vector<string>& words) {\n        vector<string> res;\n        for (int i = 0; i < words.size(); i++) {\n            for (int j = 0; j < words.size(); j++) {\n                if (i != j && words[j].find(words[i]) != string::npos) {\n                    res.push_back(words[i]);\n                    break;\n                }\n            }\n        }\n        return res;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "string-matching-in-an-array", "has_notes": false, "flag_type": 1}, {"id": 1360637854, "question_id": 1528, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724007003, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360637854/", "is_pending": "Not Pending", "title": "Kids With the Greatest Number of Candies", "memory": "11.2 MB", "code": "\nclass Solution {\npublic:\n    vector<bool> kidsWithCandies(vector<int>& candies, int extraCandies) {\n        int maxCandies = *max_element(candies.begin(), candies.end());\n        vector<bool> result;\n        for(int i=0; i<candies.size(); i++){\n            if(candies[i] + extraCandies >= maxCandies){\n                result.push_back(true);\n            } else {\n                result.push_back(false);\n            }\n        }\n        return result;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "kids-with-the-greatest-number-of-candies", "has_notes": false, "flag_type": 1}, {"id": 1360637555, "question_id": 1532, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006985, "status": 10, "status_display": "Accepted", "runtime": "4 ms", "url": "/submissions/detail/1360637555/", "is_pending": "Not Pending", "title": "Reformat The String", "memory": "9.5 MB", "code": "\nclass Solution {\npublic:\n    string reformat(string s) {\n        string letters = \"\", digits = \"\";\n        for (char c : s) {\n            if (isdigit(c)) digits += c;\n            else letters += c;\n        }\n        if (abs((int)letters.size() - (int)digits.size()) > 1) return \"\";\n        bool digitFirst = digits.size() > letters.size();\n        string res = \"\";\n        for (int i = 0; i < s.size(); i++) {\n            if (digitFirst) {\n                if (i < digits.size()) res += digits[i];\n                if (i < letters.size()) res += letters[i];\n            } else {\n                if (i < letters.size()) res += letters[i];\n                if (i < digits.size()) res += digits[i];\n            }\n        }\n        return res;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "reformat-the-string", "has_notes": false, "flag_type": 1}, {"id": 1360637258, "question_id": 1537, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006966, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360637258/", "is_pending": "Not Pending", "title": "Maximum Score After Splitting a String", "memory": "7.8 MB", "code": "\nclass Solution {\npublic:\n    int maxScore(string s) {\n        int ones = 0, zeros = 0, maxScore = 0;\n        for(char c : s) {\n            if(c == '1') ones++;\n        }\n        for(int i = 0; i < s.size() - 1; i++) {\n            if(s[i] == '0') zeros++;\n            else ones--;\n            maxScore = max(maxScore, zeros + ones);\n        }\n        return maxScore;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "maximum-score-after-splitting-a-string", "has_notes": false, "flag_type": 1}, {"id": 1360637027, "question_id": 1541, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006952, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360637027/", "is_pending": "Not Pending", "title": "Top Travellers", "memory": "N/A", "code": "sql\nSELECT u.name, IFNULL(SUM(r.distance), 0) AS travelled_distance\nFROM Users u\nLEFT JOIN Rides r\nON u.id = r.user_id\nGROUP BY u.id\nORDER BY travelled_distance DESC, u.name ASC;\n", "compare_result": null, "title_slug": "top-travellers", "has_notes": false, "flag_type": 1}, {"id": 1360636885, "question_id": 1542, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006942, "status": 10, "status_display": "Accepted", "runtime": "6 ms", "url": "/submissions/detail/1360636885/", "is_pending": "Not Pending", "title": "Consecutive Characters", "memory": "8.7 MB", "code": "\nclass Solution {\npublic:\n    int maxPower(string s) {\n        int max_power = 0, power = 0;\n        char prev_char = ' ';\n        for (char c : s) {\n            if (c == prev_char) {\n                power++;\n            } else {\n                prev_char = c;\n                power = 1;\n            }\n            max_power = max(max_power, power);\n        }\n        return max_power;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "consecutive-characters", "has_notes": false, "flag_type": 1}, {"id": 1360636659, "question_id": 1547, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006928, "status": 10, "status_display": "Accepted", "runtime": "7 ms", "url": "/submissions/detail/1360636659/", "is_pending": "Not Pending", "title": "Destination City", "memory": "14.4 MB", "code": "\nclass Solution {\npublic:\n    string destCity(vector<vector<string>>& paths) {\n        unordered_set<string> citiesA;\n        for(auto &path : paths)\n            citiesA.insert(path[0]);\n        for(auto &path : paths)\n            if(citiesA.find(path[1]) == citiesA.end())\n                return path[1];\n        return \"\";\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "destination-city", "has_notes": false, "flag_type": 1}, {"id": 1360636423, "question_id": 1548, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006914, "status": 10, "status_display": "Accepted", "runtime": "47 ms", "url": "/submissions/detail/1360636423/", "is_pending": "Not Pending", "title": "Check If All 1's Are at Least Length K Places Away", "memory": "60.3 MB", "code": "\nclass Solution {\npublic:\n    bool kLengthApart(vector<int>& nums, int k) {\n        int count = k;\n        for (int num : nums) {\n            if (num == 1) {\n                if (count < k) {\n                    return false;\n                }\n                count = 0;\n            } else {\n                ++count;\n            }\n        }\n        return true;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "check-if-all-1s-are-at-least-length-k-places-away", "has_notes": false, "flag_type": 1}, {"id": 1360636206, "question_id": 1556, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006902, "status": 10, "status_display": "Accepted", "runtime": "11 ms", "url": "/submissions/detail/1360636206/", "is_pending": "Not Pending", "title": "Make Two Arrays Equal by Reversing Subarrays", "memory": "17.6 MB", "code": "\nclass Solution {\npublic:\n    bool canBeEqual(vector<int>& target, vector<int>& arr) {\n        sort(target.begin(), target.end());\n        sort(arr.begin(), arr.end());\n        return target == arr;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "make-two-arrays-equal-by-reversing-subarrays", "has_notes": false, "flag_type": 1}, {"id": 1360636017, "question_id": 1560, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006890, "status": 10, "status_display": "Accepted", "runtime": "7 ms", "url": "/submissions/detail/1360636017/", "is_pending": "Not Pending", "title": "Number of Students Doing Homework at a Given Time", "memory": "13.5 MB", "code": "\nclass Solution {\npublic:\n    int busyStudent(vector<int>& startTime, vector<int>& endTime, int queryTime) {\n        int count = 0;\n        for(int i = 0; i < startTime.size(); i++) {\n            if(startTime[i] <= queryTime && endTime[i] >= queryTime) {\n                count++;\n            }\n        }\n        return count;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "number-of-students-doing-homework-at-a-given-time", "has_notes": false, "flag_type": 1}, {"id": 1360635826, "question_id": 1566, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006878, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1360635826/", "is_pending": "Not Pending", "title": "Check If a Word Occurs As a Prefix of Any Word in a Sentence", "memory": "7.7 MB", "code": "\nclass Solution {\npublic:\n    int isPrefixOfWord(string sentence, string searchWord) {\n        stringstream ss(sentence);\n        string word;\n        int index = 1;\n        while (ss >> word) {\n            if (word.substr(0, searchWord.size()) == searchWord) {\n                return index;\n            }\n            index++;\n        }\n        return -1;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111", "title_slug": "check-if-a-word-occurs-as-a-prefix-of-any-word-in-a-sentence", "has_notes": false, "flag_type": 1}, {"id": 1360635591, "question_id": 1570, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006864, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360635591/", "is_pending": "Not Pending", "title": "Final Prices With a Special Discount in a Shop", "memory": "12.6 MB", "code": "\nclass Solution {\npublic:\n    vector<int> finalPrices(vector<int>& prices) {\n        int n = prices.size();\n        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                if(prices[j] <= prices[i]) {\n                    prices[i] -= prices[j];\n                    break;\n                }\n            }\n        }\n        return prices;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "final-prices-with-a-special-discount-in-a-shop", "has_notes": false, "flag_type": 1}, {"id": 1360635390, "question_id": 1574, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006850, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1360635390/", "is_pending": "Not Pending", "title": "Maximum Product of Two Elements in an Array", "memory": "12.5 MB", "code": "\nclass Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        int max1 = 0, max2 = 0;\n        for (int num : nums) {\n            if (num > max1) {\n                max2 = max1;\n                max1 = num;\n            } else if (num > max2) {\n                max2 = num;\n            }\n        }\n        return (max1 - 1) * (max2 - 1);\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "maximum-product-of-two-elements-in-an-array", "has_notes": false, "flag_type": 1}, {"id": 1360635174, "question_id": 1580, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006836, "status": 10, "status_display": "Accepted", "runtime": "4 ms", "url": "/submissions/detail/1360635174/", "is_pending": "Not Pending", "title": "Shuffle the Array", "memory": "12.5 MB", "code": "\nclass Solution {\npublic:\n    vector<int> shuffle(vector<int>& nums, int n) {\n        vector<int> result;\n        for(int i = 0; i < n; i++) {\n            result.push_back(nums[i]);\n            result.push_back(nums[i + n]);\n        }\n        return result;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111", "title_slug": "shuffle-the-array", "has_notes": false, "flag_type": 1}, {"id": 1360634975, "question_id": 1584, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006824, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360634975/", "is_pending": "Not Pending", "title": "Average Salary Excluding the Minimum and Maximum Salary", "memory": "9.1 MB", "code": "\nclass Solution {\npublic:\n    double average(vector<int>& salary) {\n        int min_salary = *min_element(salary.begin(), salary.end());\n        int max_salary = *max_element(salary.begin(), salary.end());\n        double sum = 0;\n        for(int i = 0; i < salary.size(); i++) {\n            if(salary[i] != min_salary && salary[i] != max_salary) {\n                sum += salary[i];\n            }\n        }\n        return sum / (salary.size() - 2);\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111", "title_slug": "average-salary-excluding-the-minimum-and-maximum-salary", "has_notes": false, "flag_type": 1}, {"id": 1360634745, "question_id": 1603, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006809, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1360634745/", "is_pending": "Not Pending", "title": "Running Sum of 1d Array", "memory": "10.8 MB", "code": "\nclass Solution {\npublic:\n    vector<int> runningSum(vector<int>& nums) {\n        for(int i = 1; i < nums.size(); i++) {\n            nums[i] += nums[i - 1];\n        }\n        return nums;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111", "title_slug": "running-sum-of-1d-array", "has_notes": false, "flag_type": 1}, {"id": 1360634566, "question_id": 1610, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006798, "status": 10, "status_display": "Accepted", "runtime": "2 ms", "url": "/submissions/detail/1360634566/", "is_pending": "Not Pending", "title": "XOR Operation in an Array", "memory": "7.4 MB", "code": "\nclass Solution {\npublic:\n    int xorOperation(int n, int start) {\n        int xor_result = 0;\n        for(int i = 0; i < n; i++) {\n            xor_result ^= start + 2 * i;\n        }\n        return xor_result;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111", "title_slug": "xor-operation-in-an-array", "has_notes": false, "flag_type": 1}, {"id": 1360634382, "question_id": 1619, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006786, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360634382/", "is_pending": "Not Pending", "title": "Path Crossing", "memory": "8.2 MB", "code": "\nclass Solution {\npublic:\n    bool isPathCrossing(string path) {\n        set<pair<int, int>> visited;\n        pair<int, int> point = {0, 0};\n        visited.insert(point);\n        \n        for(char& c : path) {\n            if(c == 'N') point.second++;\n            else if(c == 'S') point.second--;\n            else if(c == 'E') point.first++;\n            else if(c == 'W') point.first--;\n            \n            if(visited.find(point) != visited.end()) return true;\n            visited.insert(point);\n        }\n        \n        return false;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "path-crossing", "has_notes": false, "flag_type": 1}, {"id": 1360634153, "question_id": 1625, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006771, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360634153/", "is_pending": "Not Pending", "title": "Group Sold Products By The Date", "memory": "N/A", "code": "sql\nSELECT sell_date, COUNT(DISTINCT product) AS num_sold, \nGROUP_CONCAT(DISTINCT product ORDER BY product ASC SEPARATOR ',') AS products\nFROM Activities\nGROUP BY sell_date\nORDER BY sell_date;\n", "compare_result": null, "title_slug": "group-sold-products-by-the-date", "has_notes": false, "flag_type": 1}, {"id": 1360633926, "question_id": 1626, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006758, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360633926/", "is_pending": "Not Pending", "title": "Can Make Arithmetic Progression From Sequence", "memory": "12 MB", "code": "\nclass Solution {\npublic:\n    bool canMakeArithmeticProgression(vector<int>& arr) {\n        sort(arr.begin(), arr.end());\n        int diff = arr[1] - arr[0];\n        for(int i = 2; i < arr.size(); i++) {\n            if(arr[i] - arr[i-1] != diff)\n                return false;\n        }\n        return true;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "can-make-arithmetic-progression-from-sequence", "has_notes": false, "flag_type": 1}, {"id": 1360633706, "question_id": 1630, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006745, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1360633706/", "is_pending": "Not Pending", "title": "Count Odd Numbers in an Interval Range", "memory": "7.3 MB", "code": "\nclass Solution {\npublic:\n    int countOdds(int low, int high) {\n        return (high + 1) / 2 - low / 2;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "count-odd-numbers-in-an-interval-range", "has_notes": false, "flag_type": 1}, {"id": 1360633525, "question_id": 1635, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006733, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360633525/", "is_pending": "Not Pending", "title": "Number of Good Pairs", "memory": "9.2 MB", "code": "\nclass Solution {\npublic:\n    int numIdenticalPairs(vector<int>& nums) {\n        unordered_map<int, int> count;\n        int pairs = 0;\n        for (int num : nums) {\n            pairs += count[num]++;\n        }\n        return pairs;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111", "title_slug": "number-of-good-pairs", "has_notes": false, "flag_type": 1}, {"id": 1360633333, "question_id": 1642, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006720, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1360633333/", "is_pending": "Not Pending", "title": "Water Bottles", "memory": "7.5 MB", "code": "\nclass Solution {\npublic:\n    int numWaterBottles(int numBottles, int numExchange) {\n        int total = numBottles;\n        while(numBottles >= numExchange) {\n            int newBottles = numBottles / numExchange;\n            total += newBottles;\n            numBottles = newBottles + numBottles % numExchange;\n        }\n        return total;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "water-bottles", "has_notes": false, "flag_type": 1}, {"id": 1360633120, "question_id": 1646, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006706, "status": 10, "status_display": "Accepted", "runtime": "8 ms", "url": "/submissions/detail/1360633120/", "is_pending": "Not Pending", "title": "Kth Missing Positive Number", "memory": "12.4 MB", "code": "\nclass Solution {\npublic:\n    int findKthPositive(vector<int>& arr, int k) {\n        int missingCount = 0;\n        int lastMissingNum = 0;\n        int i = 0;\n        while(missingCount < k){\n            if(i < arr.size() && arr[i] == lastMissingNum + 1){\n                i++;\n            } else {\n                missingCount++;\n            }\n            lastMissingNum++;\n        }\n        return lastMissingNum;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "kth-missing-positive-number", "has_notes": false, "flag_type": 1}, {"id": 1360632896, "question_id": 1651, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006692, "status": 10, "status_display": "Accepted", "runtime": "6 ms", "url": "/submissions/detail/1360632896/", "is_pending": "Not Pending", "title": "Shuffle String", "memory": "18.3 MB", "code": "\nclass Solution {\npublic:\n    string restoreString(string s, vector<int>& indices) {\n        string result(s.size(), ' ');\n        for(int i = 0; i < s.size(); i++) {\n            result[indices[i]] = s[i];\n        }\n        return result;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "shuffle-string", "has_notes": false, "flag_type": 1}, {"id": 1360632683, "question_id": 1656, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006679, "status": 10, "status_display": "Accepted", "runtime": "6 ms", "url": "/submissions/detail/1360632683/", "is_pending": "Not Pending", "title": "Count Good Triplets", "memory": "10.4 MB", "code": "\nclass Solution {\npublic:\n    int countGoodTriplets(vector<int>& arr, int a, int b, int c) {\n        int count = 0;\n        for(int i = 0; i < arr.size(); i++) {\n            for(int j = i + 1; j < arr.size(); j++) {\n                if(abs(arr[i] - arr[j]) <= a) {\n                    for(int k = j + 1; k < arr.size(); k++) {\n                        if(abs(arr[j] - arr[k]) <= b && abs(arr[i] - arr[k]) <= c) {\n                            count++;\n                        }\n                    }\n                }\n            }\n        }\n        return count;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "count-good-triplets", "has_notes": false, "flag_type": 1}, {"id": 1360632429, "question_id": 1660, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006664, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360632429/", "is_pending": "Not Pending", "title": "Thousand Separator", "memory": "7.6 MB", "code": "\nclass Solution {\npublic:\n    string thousandSeparator(int n) {\n        if(n == 0) return \"0\";\n        string res = \"\";\n        int count = 0;\n        while(n > 0){\n            if(count == 3){\n                res = '.' + res;\n                count = 0;\n            }\n            res = to_string(n % 10) + res;\n            n /= 10;\n            count++;\n        }\n        return res;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "thousand-separator", "has_notes": false, "flag_type": 1}, {"id": 1360632209, "question_id": 1664, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006651, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360632209/", "is_pending": "Not Pending", "title": "Find Users With Valid E-Mails", "memory": "N/A", "code": "sql\nSELECT *\nFROM Users\nWHERE mail REGEXP '^[a-zA-Z][a-zA-Z0-9_.-]*@leetcode.com$';\n", "compare_result": null, "title_slug": "find-users-with-valid-e-mails", "has_notes": false, "flag_type": 1}, {"id": 1360632018, "question_id": 1666, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006638, "status": 10, "status_display": "Accepted", "runtime": "6 ms", "url": "/submissions/detail/1360632018/", "is_pending": "Not Pending", "title": "Make The String Great", "memory": "8.8 MB", "code": "\nclass Solution {\npublic:\n    string makeGood(string s) {\n        stack<char> st;\n        for (char c : s) {\n            if (!st.empty() && abs(st.top() - c) == 32) {\n                st.pop();\n            } else {\n                st.push(c);\n            }\n        }\n        string res = \"\";\n        while (!st.empty()) {\n            res = st.top() + res;\n            st.pop();\n        }\n        return res;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "make-the-string-great", "has_notes": false, "flag_type": 1}, {"id": 1360631695, "question_id": 1670, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006622, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360631695/", "is_pending": "Not Pending", "title": "Patients With a Condition", "memory": "N/A", "code": "sql\nSELECT patient_id, patient_name, conditions\nFROM Patients\nWHERE conditions LIKE '%DIAB1%';\n", "compare_result": null, "title_slug": "patients-with-a-condition", "has_notes": false, "flag_type": 1}, {"id": 1360631522, "question_id": 1677, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006611, "status": 10, "status_display": "Accepted", "runtime": "11 ms", "url": "/submissions/detail/1360631522/", "is_pending": "Not Pending", "title": "Matrix Diagonal Sum", "memory": "14.1 MB", "code": "\nclass Solution {\npublic:\n    int diagonalSum(vector<vector<int>>& mat) {\n        int n = mat.size();\n        int sum = 0;\n        for(int i = 0; i < n; i++) {\n            sum += mat[i][i]; // primary diagonal\n            sum += mat[i][n-i-1]; // secondary diagonal\n        }\n        // If n is odd, subtract the center element as it is counted twice\n        if(n % 2 == 1) {\n            sum -= mat[n/2][n/2];\n        }\n        return sum;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "matrix-diagonal-sum", "has_notes": false, "flag_type": 1}, {"id": 1360631279, "question_id": 1682, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006596, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360631279/", "is_pending": "Not Pending", "title": "Most Visited Sector in  a Circular Track", "memory": "14 MB", "code": "\nclass Solution {\npublic:\n    vector<int> mostVisited(int n, vector<int>& rounds) {\n        vector<int> count(n + 1, 0);\n        int size = rounds.size();\n        count[rounds[0]]++;\n        for (int i = 1; i < size; i++) {\n            int start = rounds[i - 1], end = rounds[i];\n            if (start < end) {\n                for (int j = start + 1; j <= end; j++) {\n                    count[j]++;\n                }\n            } else {\n                for (int j = start + 1; j <= n; j++) {\n                    count[j]++;\n                }\n                for (int j = 1; j <= end; j++) {\n                    count[j]++;\n                }\n            }\n        }\n        int maxCount = *max_element(count.begin(), count.end());\n        vector<int> result;\n        for (int i = 1; i <= n; i++) {\n            if (count[i] == maxCount) {\n                result.push_back(i);\n            }\n        }\n        return result;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "most-visited-sector-in-a-circular-track", "has_notes": false, "flag_type": 1}, {"id": 1360630884, "question_id": 1689, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006574, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360630884/", "is_pending": "Not Pending", "title": "Detect Pattern of Length M Repeated K or More Times", "memory": "10.4 MB", "code": "\nclass Solution {\npublic:\n    bool containsPattern(vector<int>& arr, int m, int k) {\n        int n = arr.size();\n        for (int i = 0; i <= n - m * k; ++i) {\n            bool match = true;\n            for (int j = i; j < i + m * k; ++j) {\n                if (arr[j] != arr[i + (j - i) % m]) {\n                    match = false;\n                    break;\n                }\n            }\n            if (match) {\n                return true;\n            }\n        }\n        return false;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "detect-pattern-of-length-m-repeated-k-or-more-times", "has_notes": false, "flag_type": 1}, {"id": 1360630609, "question_id": 1693, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006558, "status": 10, "status_display": "Accepted", "runtime": "5 ms", "url": "/submissions/detail/1360630609/", "is_pending": "Not Pending", "title": "Sum of All Odd Length Subarrays", "memory": "10.4 MB", "code": "\nclass Solution {\npublic:\n    int sumOddLengthSubarrays(vector<int>& arr) {\n        int n = arr.size();\n        int total_sum = 0;\n        for(int i = 0; i < n; i++) {\n            int sum = 0;\n            for(int j = i; j < n; j++) {\n                sum += arr[j];\n                if((j - i + 1) % 2 == 1) {\n                    total_sum += sum;\n                }\n            }\n        }\n        return total_sum;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "sum-of-all-odd-length-subarrays", "has_notes": false, "flag_type": 1}, {"id": 1360630389, "question_id": 1698, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006543, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360630389/", "is_pending": "Not Pending", "title": "Replace All ?'s to Avoid Consecutive Repeating Characters", "memory": "8 MB", "code": "\nclass Solution {\npublic:\n    string modifyString(string s) {\n        for (int i = 0; i < s.size(); ++i) {\n            if (s[i] == '?') {\n                for (s[i] = 'a'; s[i] <= 'z'; ++s[i]) {\n                    if ((i == 0 || s[i - 1] != s[i]) && (i == s.size() - 1 || s[i + 1] != s[i])) {\n                        break;\n                    }\n                }\n            }\n        }\n        return s;\n    }\n};\n", "compare_resulttitle_slug": "replace-all-s-to-avoid-consecutive-repeating-characters", "has_notes": false, "flag_type": 1}, {"id": 1360630191, "question_id": 1704, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006528, "status": 10, "status_display": "Accepted", "runtime": "11 ms", "url": "/submissions/detail/1360630191/", "is_pending": "Not Pending", "title": "Special Positions in a Binary Matrix", "memory": "15.9 MB", "code": "\nclass Solution {\npublic:\n    int numSpecial(vector<vector<int>>& mat) {\n        int m = mat.size();\n        int n = mat[0].size();\n        vector<int> row(m, 0);\n        vector<int> col(n, 0);\n        for(int i = 0; i < m; i++) {\n            for(int j = 0; j < n; j++) {\n                if(mat[i][j] == 1) {\n                    row[i]++;\n                    col[j]++;\n                }\n            }\n        }\n        int count = 0;\n        for(int i = 0; i < m; i++) {\n            for(int j = 0; j < n; j++) {\n                if(mat[i][j] == 1 && row[i] == 1 && col[j] == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "special-positions-in-a-binary-matrix", "has_notes": false, "flag_type": 1}, {"id": 1360629999, "question_id": 1708, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006511, "status": 10, "status_display": "Accepted", "runtime": "40 ms", "url": "/submissions/detail/1360629999/", "is_pending": "Not Pending", "title": "Design Parking System", "memory": "37.1 MB", "code": "\nclass ParkingSystem {\nprivate:\n    int big, medium, small;\npublic:\n    ParkingSystem(int big, int medium, int small) {\n        this->big = big;\n        this->medium = medium;\n        this->small = small;\n    }\n    \n    bool addCar(int carType) {\n        if(carType == 1 && big > 0) {\n            big--;\n            return true;\n        } else if(carType == 2 && medium > 0) {\n            medium--;\n            return true;\n        } else if(carType == 3 && small > 0) {\n            small--;\n            return true;\n        }\n        return false;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "design-parking-system", "has_notes": false, "flag_type": 1}, {"id": 1360629828, "question_id": 1714, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006497, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360629828/", "is_pending": "Not Pending", "title": "Rearrange Spaces Between Words", "memory": "7.9 MB", "code": "\nclass Solution {\npublic:\n    string reorderSpaces(string text) {\n        int spaceCount = 0;\n        for (char c : text) {\n            if (c == ' ') {\n                spaceCount++;\n            }\n        }\n        \n        vector<string> words;\n        stringstream ss(text);\n        string word;\n        while (ss >> word) {\n            words.push_back(word);\n        }\n        \n        int gap = words.size() == 1 ? 0 : spaceCount / (words.size() - 1);\n        int trailingSpaces = words.size() == 1 ? spaceCount : spaceCount % (words.size() - 1);\n        \n        string result;\n        for (int i = 0; i < words.size(); i++) {\n            result += words[i];\n            if (i < words.size() - 1) {\n                result += string(gap, ' ');\n            }\n        }\n        result += string(trailingSpaces, ' ');\n        \n        return result;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "rearrange-spaces-between-words", "has_notes": false, "flag_type": 1}, {"id": 1360629639, "question_id": 1720, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006482, "status": 10, "status_display": "Accepted", "runtime": "9 ms", "url": "/submissions/detail/1360629639/", "is_pending": "Not Pending", "title": "Crawler Log Folder", "memory": "14.3 MB", "code": "\nclass Solution {\npublic:\n    int minOperations(vector<string>& logs) {\n        int depth = 0;\n        for (auto& log : logs) {\n            if (log == \"../\") {\n                if (depth > 0) {\n                    depth--;\n                }\n            } else if (log != \"./\") {\n                depth++;\n            }\n        }\n        return depth;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "crawler-log-folder", "has_notes": false, "flag_type": 1}, {"id": 1360629417, "question_id": 1724, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006464, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360629417/", "is_pending": "Not Pending", "title": "Customer Who Visited but Did Not Make Any Transactions", "memory": "N/A", "code": "sql\nSELECT customer_id, COUNT(*) AS count_no_trans\nFROM Visits\nWHERE visit_id NOT IN (SELECT visit_id FROM Transactions)\nGROUP BY customer_id;\n", "compare_result": null, "title_slug": "customer-who-visited-but-did-not-make-any-transactions", "has_notes": false, "flag_type": 1}, {"id": 1360629293, "question_id": 1730, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006454, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360629293/", "is_pending": "Not Pending", "title": "Special Array With X Elements Greater Than or Equal X", "memory": "10.5 MB", "code": "\nclass Solution {\npublic:\n    int specialArray(vector<int>& nums) {\n        for (int i = 0; i <= nums.size(); ++i) {\n            int count = 0;\n            for (int j = 0; j < nums.size(); ++j) {\n                if (nums[j] >= i) {\n                    ++count;\n                }\n            }\n            if (count == i) {\n                return i;\n            }\n        }\n        return -1;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "special-array-with-x-elements-greater-than-or-equal-x", "has_notes": false, "flag_type": 1}, {"id": 1360629081, "question_id": 1734, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006438, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360629081/", "is_pending": "Not Pending", "title": "Bank Account Summary II", "memory": "N/A", "code": "sql\nSELECT u.name, SUM(t.amount) as balance\nFROM Users u\nJOIN Transactions t\nON u.account = t.account\nGROUP BY u.account\nHAVING balance > 10000;\n", "compare_result": null, "title_slug": "bank-account-summary-ii", "has_notes": false, "flag_type": 1}, {"id": 1360628893, "question_id": 1737, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006425, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1360628893/", "is_pending": "Not Pending", "title": "Maximum Nesting Depth of the Parentheses", "memory": "7.8 MB", "code": "\nclass Solution {\npublic:\n    int maxDepth(string s) {\n        int current_depth = 0;\n        int max_depth = 0;\n        for (char c : s) {\n            if (c == '(') {\n                current_depth++;\n                if (current_depth > max_depth) {\n                    max_depth = current_depth;\n                }\n            } else if (c == ')') {\n                current_depth--;\n            }\n        }\n        return max_depth;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "maximum-nesting-depth-of-the-parentheses", "has_notes": false, "flag_type": 1}, {"id": 1360628653, "question_id": 1741, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006412, "status": 10, "status_display": "Accepted", "runtime": "14 ms", "url": "/submissions/detail/1360628653/", "is_pending": "Not Pending", "title": "Sort Array by Increasing Frequency", "memory": "15.1 MB", "code": "\nclass Solution {\npublic:\n    vector<int> frequencySort(vector<int>& nums) {\n        unordered_map<int, int> freq;\n        for (int num : nums) {\n            freq[num]++;\n        }\n        \n        sort(nums.begin(), nums.end(), [&](int a, int b) {\n            if (freq[a] == freq[b]) {\n                return a > b;\n            }\n            return freq[a] < freq[b];\n        });\n        \n        return nums;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "sort-array-by-increasing-frequency", "has_notes": false, "flag_type": 1}, {"id": 1360628471, "question_id": 1742, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006399, "status": 10, "status_display": "Accepted", "runtime": "157 ms", "url": "/submissions/detail/1360628471/", "is_pending": "Not Pending", "title": "Widest Vertical Area Between Two Points Containing No Points", "memory": "72.3 MB", "code": "\nclass Solution {\npublic:\n    int maxWidthOfVerticalArea(vector<vector<int>>& points) {\n        vector<int> x_coordinates;\n        for(auto &point : points)\n            x_coordinates.push_back(point[0]);\n        sort(x_coordinates.begin(), x_coordinates.end());\n        int max_width = 0;\n        for(int i = 1; i < x_coordinates.size(); i++)\n            max_width = max(max_width, x_coordinates[i] - x_coordinates[i-1]);\n        return max_width;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111", "title_slug": "widest-vertical-area-between-two-points-containing-no-points", "has_notes": false, "flag_type": 1}, {"id": 1360628201, "question_id": 1746, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006383, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360628201/", "is_pending": "Not Pending", "title": "Largest Substring Between Two Equal Characters", "memory": "7.6 MB", "code": "\nclass Solution {\npublic:\n    int maxLengthBetweenEqualCharacters(string s) {\n        int res = -1;\n        vector<int> pos(26, -1);\n        for (int i = 0; i < s.size(); ++i) {\n            if (pos[s[i] - 'a'] >= 0)\n                res = max(res, i - pos[s[i] - 'a'] - 1);\n            else\n                pos[s[i] - 'a'] = i;\n        }\n        return res;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111", "title_slug": "largest-substring-between-two-equal-characters", "has_notes": false, "flag_type": 1}, {"id": 1360627961, "question_id": 1751, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006367, "status": 10, "status_display": "Accepted", "runtime": "11 ms", "url": "/submissions/detail/1360627961/", "is_pending": "Not Pending", "title": "Slowest Key", "memory": "13.4 MB", "code": "\nclass Solution {\npublic:\n    char slowestKey(vector<int>& releaseTimes, string keysPressed) {\n        int n = releaseTimes.size();\n        int maxTime = releaseTimes[0];\n        char maxChar = keysPressed[0];\n        \n        for(int i=1; i<n; i++){\n            int currTime = releaseTimes[i] - releaseTimes[i-1];\n            if(currTime > maxTime || (currTime == maxTime && keysPressed[i] > maxChar)){\n                maxTime = currTime;\n                maxChar = keysPressed[i];\n            }\n        }\n        \n        return maxChar;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "slowest-key", "has_notes": false, "flag_type": 1}, {"id": 1360627691, "question_id": 1755, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006350, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360627691/", "is_pending": "Not Pending", "title": "Defuse the Bomb", "memory": "10.4 MB", "code": "\nclass Solution {\npublic:\n    vector<int> decrypt(vector<int>& code, int k) {\n        int n = code.size();\n        vector<int> result(n, 0);\n        if(k == 0) return result;\n        int start = 1, end = k, sum = 0;\n        if(k < 0){\n            k = -k;\n            start = n - k;\n            end = n - 1;\n        }\n        for(int i = start; i <= end; i++){\n            sum += code[i];\n        }\n        for(int i = 0; i < n; i++){\n            result[i] = sum;\n            sum -= code[(start++)%n];\n            sum += code[(++end)%n];\n        }\n        return result;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "defuse-the-bomb", "has_notes": false, "flag_type": 1}, {"id": 1360627398, "question_id": 1760, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006329, "status": 10, "status_display": "Accepted", "runtime": "5 ms", "url": "/submissions/detail/1360627398/", "is_pending": "Not Pending", "title": "Check Array Formation Through Concatenation", "memory": "13.5 MB", "code": "\nclass Solution {\npublic:\n    bool canFormArray(vector<int>& arr, vector<vector<int>>& pieces) {\n        unordered_map<int, vector<int>> map;\n        for(auto &p : pieces)\n            map[p[0]] = p;\n        \n        for(int i = 0; i < arr.size(); ) {\n            if(map.find(arr[i]) == map.end())\n                return false;\n            auto &p = map[arr[i]];\n            for(int j = 0; j < p.size(); ++j, ++i)\n                if(arr[i] != p[j])\n                    return false;\n        }\n        return true;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "check-array-formation-through-concatenation", "has_notes": false, "flag_type": 1}, {"id": 1360627137, "question_id": 1764, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006313, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360627137/", "is_pending": "Not Pending", "title": "Maximum Repeating Substring", "memory": "8.1 MB", "code": "\nclass Solution {\npublic:\n    int maxRepeating(string sequence, string word) {\n        int count = 0;\n        string temp = word;\n        while(sequence.find(temp) != string::npos) {\n            count++;\n            temp += word;\n        }\n        return count;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "maximum-repeating-substring", "has_notes": false, "flag_type": 1}, {"id": 1360626918, "question_id": 1769, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006299, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1360626918/", "is_pending": "Not Pending", "title": "Get Maximum in Generated Array", "memory": "7.8 MB", "code": "\nclass Solution {\npublic:\n    int getMaximumGenerated(int n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        vector<int> nums(n+1);\n        nums[0] = 0;\n        nums[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                nums[i] = nums[i/2];\n            } else {\n                nums[i] = nums[i/2] + nums[i/2 + 1];\n            }\n        }\n        return *max_element(nums.begin(), nums.end());\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "get-maximum-in-generated-array", "has_notes": false, "flag_type": 1}, {"id": 1360626575, "question_id": 1773, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006278, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360626575/", "is_pending": "Not Pending", "title": "Percentage of Users Attended a Contest", "memory": "N/A", "code": "\n# Write your MySQL query statement below\nSELECT contest_id, \n       ROUND(COUNT(DISTINCT user_id) / (SELECT COUNT(DISTINCT user_id) FROM Users) * 100, 2) AS percentage\nFROM Register\nGROUP BY contest_id\nORDER BY percentage DESC, contest_id ASC\n", "compare_result": null, "title_slug": "percentage-of-users-attended-a-contest", "has_notes": false, "flag_type": 1}, {"id": 1360626387, "question_id": 1775, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006265, "status": 10, "status_display": "Accepted", "runtime": "88 ms", "url": "/submissions/detail/1360626387/", "is_pending": "Not Pending", "title": "Design an Ordered Stream", "memory": "88.8 MB", "code": "\nclass OrderedStream {\npublic:\n    vector<string> stream;\n    int ptr;\n    \n    OrderedStream(int n) {\n        stream.resize(n+1);\n        ptr = 1;\n    }\n    \n    vector<string> insert(int idKey, string value) {\n        stream[idKey] = value;\n        vector<string> result;\n        while(ptr < stream.size() && !stream[ptr].empty()) {\n            result.push_back(stream[ptr]);\n            ptr++;\n        }\n        return result;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "design-an-ordered-stream", "has_notes": false, "flag_type": 1}, {"id": 1360626183, "question_id": 1781, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006250, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360626183/", "is_pending": "Not Pending", "title": "Check If Two String Arrays are Equivalent", "memory": "13.6 MB", "code": "\nclass Solution {\npublic:\n    bool arrayStringsAreEqual(vector<string>& word1, vector<string>& word2) {\n        string str1 = \"\", str2 = \"\";\n        for(auto &i : word1)\n            str1 += i;\n        for(auto &i : word2)\n            str2 += i;\n        return str1 == str2;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "check-if-two-string-arrays-are-equivalent", "has_notes": false, "flag_type": 1}, {"id": 1360625966, "question_id": 1786, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006236, "status": 10, "status_display": "Accepted", "runtime": "48 ms", "url": "/submissions/detail/1360625966/", "is_pending": "Not Pending", "title": "Count the Number of Consistent Strings", "memory": "34 MB", "code": "\nclass Solution {\npublic:\n    int countConsistentStrings(string allowed, vector<string>& words) {\n        vector<bool> alphabets(26, false);\n        for(char c : allowed) {\n            alphabets[c - 'a'] = true;\n        }\n        \n        int count = 0;\n        for(string word : words) {\n            bool isConsistent = true;\n            for(char c : word) {\n                if(!alphabets[c - 'a']) {\n                    isConsistent = false;\n                    break;\n                }\n            }\n            if(isConsistent) {\n                count++;\n            }\n        }\n        return count;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "count-the-number-of-consistent-strings", "has_notes": false, "flag_type": 1}, {"id": 1360625658, "question_id": 1791, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006216, "status": 10, "status_display": "Accepted", "runtime": "7 ms", "url": "/submissions/detail/1360625658/", "is_pending": "Not Pending", "title": "Richest Customer Wealth", "memory": "10.4 MB", "code": "\nclass Solution {\npublic:\n    int maximumWealth(vector<vector<int>>& accounts) {\n        int maxWealth = 0;\n        for (int i = 0; i < accounts.size(); i++) {\n            int wealth = 0;\n            for (int j = 0; j < accounts[i].size(); j++) {\n                wealth += accounts[i][j];\n            }\n            maxWealth = max(maxWealth, wealth);\n        }\n        return maxWealth;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111", "title_slug": "richest-customer-wealth", "has_notes": false, "flag_type": 1}, {"id": 1360625454, "question_id": 1797, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006204, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360625454/", "is_pending": "Not Pending", "title": "Goal Parser Interpretation", "memory": "7.5 MB", "code": "\nclass Solution {\npublic:\n    string interpret(string command) {\n        string result = \"\";\n        for(int i = 0; i < command.size(); i++){\n            if(command[i] == 'G'){\n                result += 'G';\n            }\n            else if(command[i] == '('){\n                if(command[i+1] == ')'){\n                    result += 'o';\n                    i++;\n                }\n                else{\n                    result += \"al\";\n                    i += 3;\n                }\n            }\n        }\n        return result;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "goal-parser-interpretation", "has_notes": false, "flag_type": 1}, {"id": 1360625191, "question_id": 1801, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006187, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360625191/", "is_pending": "Not Pending", "title": "Average Time of Process per Machine", "memory": "N/A", "code": "sql\nSELECT machine_id, ROUND(AVG(end_time - start_time), 3) AS processing_time\nFROM (\n    SELECT machine_id, \n           MAX(CASE WHEN activity_type = 'start' THEN timestamp END) AS start_time,\n           MAX(CASE WHEN activity_type = 'end' THEN timestamp END) AS end_time\n    FROM Activity\n    GROUP BY machine_id, process_id\n) AS ProcessTimes\nGROUP BY machine_id;\n", "compare_result": null, "title_slug": "average-time-of-process-per-machine", "has_notes": false, "flag_type": 1}, {"id": 1360624985, "question_id": 1802, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006173, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360624985/", "is_pending": "Not Pending", "title": "Number of Students Unable to Eat Lunch", "memory": "11.1 MB", "code": "\nclass Solution {\npublic:\n    int countStudents(vector<int>& students, vector<int>& sandwiches) {\n        int count[2] = {};\n        for (int s : students)\n            count[s]++;\n        int k = 0;\n        for (; k < sandwiches.size() && count[sandwiches[k]]; ++k)\n            count[sandwiches[k]]--;\n        return sandwiches.size() - k;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111", "title_slug": "number-of-students-unable-to-eat-lunch", "has_notes": false, "flag_type": 1}, {"id": 1360624737, "question_id": 1806, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006156, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1360624737/", "is_pending": "Not Pending", "title": "Count of Matches in Tournament", "memory": "7.5 MB", "code": "\nclass Solution {\npublic:\n    int numberOfMatches(int n) {\n        int matches = 0;\n        while(n > 1){\n            matches += n / 2;\n            n = (n + 1) / 2;\n        }\n        return matches;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "count-of-matches-in-tournament", "has_notes": false, "flag_type": 1}, {"id": 1360624510, "question_id": 1811, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006142, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360624510/", "is_pending": "Not Pending", "title": "Fix Names in a Table", "memory": "N/A", "code": "sql\nSELECT user_id, CONCAT(UPPER(LEFT(name, 1)), LOWER(SUBSTRING(name, 2))) AS name\nFROM Users\nORDER BY user_id;\n", "compare_result": null, "title_slug": "fix-names-in-a-table", "has_notes": false, "flag_type": 1}, {"id": 1360624334, "question_id": 1812, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006131, "status": 10, "status_display": "Accepted", "runtime": "4 ms", "url": "/submissions/detail/1360624334/", "is_pending": "Not Pending", "title": "Reformat Phone Number", "memory": "8 MB", "code": "\nclass Solution {\npublic:\n    string reformatNumber(string number) {\n        string cleaned;\n        for (char c : number) {\n            if (isdigit(c)) cleaned.push_back(c);\n        }\n        \n        string result;\n        int n = cleaned.size();\n        int i = 0;\n        while (n > 4) {\n            result += cleaned.substr(i, 3) + \"-\";\n            i += 3;\n            n -= 3;\n        }\n        \n        if (n == 4) {\n            result += cleaned.substr(i, 2) + \"-\" + cleaned.substr(i + 2, 2);\n        } else {\n            result += cleaned.substr(i, n);\n        }\n        \n        return result;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "reformat-phone-number", "has_notes": false, "flag_type": 1}, {"id": 1360624081, "question_id": 1817, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006115, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360624081/", "is_pending": "Not Pending", "title": "Calculate Money in Leetcode Bank", "memory": "7.5 MB", "code": "\nclass Solution {\npublic:\n    int totalMoney(int n) {\n        int weeks = n / 7;\n        int days = n % 7;\n        int total = 0;\n        \n        total += (28 * weeks) + (7 * weeks * (weeks - 1) / 2);\n        total += (weeks + 1 + weeks + days) * days / 2;\n        \n        return total;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "calculate-money-in-leetcode-bank", "has_notes": false, "flag_type": 1}, {"id": 1360623827, "question_id": 1823, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006101, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360623827/", "is_pending": "Not Pending", "title": "Determine if String Halves Are Alike", "memory": "8.1 MB", "code": "\nclass Solution {\npublic:\n    bool halvesAreAlike(string s) {\n        int n = s.size();\n        int a = 0, b = 0;\n        for(int i = 0; i < n/2; i++) {\n            if(isVowel(s[i])) a++;\n            if(isVowel(s[i+n/2])) b++;\n        }\n        return a == b;\n    }\n    \n    bool isVowel(char c) {\n        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U';\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "determine-if-string-halves-are-alike", "has_notes": false, "flag_type": 1}, {"id": 1360623589, "question_id": 1827, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006085, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360623589/", "is_pending": "Not Pending", "title": "Invalid Tweets", "memory": "N/A", "code": "sql\nSELECT tweet_id\nFROM Tweets\nWHERE CHAR_LENGTH(content) > 15;\n", "compare_result": null, "title_slug": "invalid-tweets", "has_notes": false, "flag_type": 1}, {"id": 1360623441, "question_id": 1829, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006076, "status": 10, "status_display": "Accepted", "runtime": "22 ms", "url": "/submissions/detail/1360623441/", "is_pending": "Not Pending", "title": "Maximum Units on a Truck", "memory": "19.8 MB", "code": "\nclass Solution {\npublic:\n    int maximumUnits(vector<vector<int>>& boxTypes, int truckSize) {\n        sort(boxTypes.begin(), boxTypes.end(), [](const vector<int>& a, const vector<int>& b) {\n            return a[1] > b[1];\n        });\n        \n        int maxUnits = 0;\n        for (auto& boxType : boxTypes) {\n            int boxCount = min(boxType[0], truckSize);\n            maxUnits += boxCount * boxType[1];\n            truckSize -= boxCount;\n            if (truckSize == 0) {\n                break;\n            }\n        }\n        return maxUnits;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "maximum-units-on-a-truck", "has_notes": false, "flag_type": 1}, {"id": 1360623196, "question_id": 1833, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006058, "status": 10, "status_display": "Accepted", "runtime": "4 ms", "url": "/submissions/detail/1360623196/", "is_pending": "Not Pending", "title": "Find the Highest Altitude", "memory": "9.9 MB", "code": "\nclass Solution {\npublic:\n    int largestAltitude(vector<int>& gain) {\n        int max_altitude = 0;\n        int current_altitude = 0;\n        for(int i = 0; i < gain.size(); i++) {\n            current_altitude += gain[i];\n            max_altitude = max(max_altitude, current_altitude);\n        }\n        return max_altitude;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "find-the-highest-altitude", "has_notes": false, "flag_type": 1}, {"id": 1360622974, "question_id": 1837, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006045, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360622974/", "is_pending": "Not Pending", "title": "Daily Leads and Partners", "memory": "N/A", "code": "sql\nSELECT date_id, make_name, COUNT(DISTINCT lead_id) AS unique_leads, COUNT(DISTINCT partner_id) AS unique_partners\nFROM DailySales\nGROUP BY date_id, make_name;\n", "compare_result": null, "title_slug": "daily-leads-and-partners", "has_notes": false, "flag_type": 1}, {"id": 1360622822, "question_id": 1839, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006035, "status": 10, "status_display": "Accepted", "runtime": "31 ms", "url": "/submissions/detail/1360622822/", "is_pending": "Not Pending", "title": "Decode XORed Array", "memory": "28.5 MB", "code": "\nclass Solution {\npublic:\n    vector<int> decode(vector<int>& encoded, int first) {\n        vector<int> arr;\n        arr.push_back(first);\n        for(int i=0; i<encoded.size(); i++){\n            first = first ^ encoded[i];\n            arr.push_back(first);\n        }\n        return arr;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "decode-xored-array", "has_notes": false, "flag_type": 1}, {"id": 1360622574, "question_id": 1843, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006021, "status": 10, "status_display": "Accepted", "runtime": "25 ms", "url": "/submissions/detail/1360622574/", "is_pending": "Not Pending", "title": "Number Of Rectangles That Can Form The Largest Square", "memory": "22.1 MB", "code": "\nclass Solution {\npublic:\n    int countGoodRectangles(vector<vector<int>>& rectangles) {\n        int maxLen = 0, count = 0;\n        for(auto& rectangle : rectangles) {\n            int minSide = min(rectangle[0], rectangle[1]);\n            if(minSide > maxLen) {\n                maxLen = minSide;\n                count = 1;\n            } else if(minSide == maxLen) {\n                count++;\n            }\n        }\n        return count;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "number-of-rectangles-that-can-form-the-largest-square", "has_notes": false, "flag_type": 1}, {"id": 1360622350, "question_id": 1844, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724006006, "status": 10, "status_display": "Accepted", "runtime": "7 ms", "url": "/submissions/detail/1360622350/", "is_pending": "Not Pending", "title": "Maximum Number of Balls in a Box", "memory": "7.6 MB", "code": "\nclass Solution {\npublic:\n    int countBalls(int lowLimit, int highLimit) {\n        vector<int> count(46, 0);\n        for (int i = lowLimit; i <= highLimit; ++i) {\n            int sum = 0, n = i;\n            while (n) {\n                sum += n % 10;\n                n /= 10;\n            }\n            ++count[sum];\n        }\n        return *max_element(count.begin(), count.end());\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "maximum-number-of-balls-in-a-box", "has_notes": false, "flag_type": 1}, {"id": 1360622074, "question_id": 1848, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724005989, "status": 10, "status_display": "Accepted", "runtime": "2 ms", "url": "/submissions/detail/1360622074/", "is_pending": "Not Pending", "title": "Sum of Unique Elements", "memory": "10.3 MB", "code": "\nclass Solution {\npublic:\n    int sumOfUnique(vector<int>& nums) {\n        unordered_map<int, int> count;\n        for (int num : nums) {\n            count[num]++;\n        }\n        int sum = 0;\n        for (auto& [num, freq] : count) {\n            if (freq == 1) {\n                sum += num;\n            }\n        }\n        return sum;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "sum-of-unique-elements", "has_notes": false, "flag_type": 1}, {"id": 1360621860, "question_id": 1858, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724005977, "status": 10, "status_display": "Accepted", "runtime": "2 ms", "url": "/submissions/detail/1360621860/", "is_pending": "Not Pending", "title": "Latest Time by Replacing Hidden Digits", "memory": "7.5 MB", "code": "\nclass Solution {\npublic:\n    string maximumTime(string time) {\n        if(time[0] == '?'){\n            if(time[1] == '?' || time[1] < '4')\n                time[0] = '2';\n            else\n                time[0] = '1';\n        }\n        if(time[1] == '?'){\n            if(time[0] == '2')\n                time[1] = '3';\n            else\n                time[1] = '9';\n        }\n        if(time[3] == '?')\n            time[3] = '5';\n        if(time[4] == '?')\n            time[4] = '9';\n        return time;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "latest-time-by-replacing-hidden-digits", "has_notes": false, "flag_type": 1}, {"id": 1360621625, "question_id": 1873, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724005961, "status": 10, "status_display": "Accepted", "runtime": "279 ms", "url": "/submissions/detail/1360621625/", "is_pending": "Not Pending", "title": "Longest Nice Substring", "memory": "128.4 MB", "code": "\nclass Solution {\npublic:\n    string longestNiceSubstring(string s) {\n        int n = s.size();\n        string res = \"\";\n        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j <= n; j++) {\n                string sub = s.substr(i, j - i);\n                set<char> st(sub.begin(), sub.end());\n                bool nice = true;\n                for(char c : st) {\n                    if(st.find(tolower(c)) == st.end() || st.find(toupper(c)) == st.end()) {\n                        nice = false;\n                        break;\n                    }\n                }\n                if(nice && sub.size() > res.size()) {\n                    res = sub;\n                }\n            }\n        }\n        return res;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "longest-nice-substring", "has_notes": false, "flag_type": 1}, {"id": 1360621371, "question_id": 1877, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724005944, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360621371/", "is_pending": "Not Pending", "title": "Find Followers Count", "memory": "N/A", "code": "sql\nSELECT user_id, COUNT(follower_id) AS followers_count\nFROM Followers\nGROUP BY user_id\nORDER BY user_id ASC;\n", "compare_result": null, "title_slug": "find-followers-count", "has_notes": false, "flag_type": 1}, {"id": 1360621219, "question_id": 1878, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724005935, "status": 10, "status_display": "Accepted", "runtime": "4 ms", "url": "/submissions/detail/1360621219/", "is_pending": "Not Pending", "title": "Check if Array Is Sorted and Rotated", "memory": "10.3 MB", "code": "\nclass Solution {\npublic:\n    bool check(vector<int>& nums) {\n        int count = 0;\n        for(int i = 1; i < nums.size(); i++) {\n            if(nums[i] < nums[i-1]) {\n                count++;\n            }\n        }\n        if(nums[0] < nums[nums.size()-1]) {\n            count++;\n        }\n        return count <= 1;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "check-if-array-is-sorted-and-rotated", "has_notes": false, "flag_type": 1}, {"id": 1360620979, "question_id": 1882, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724005921, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360620979/", "is_pending": "Not Pending", "title": "The Number of Employees Which Report to Each Employee", "memory": "N/A", "code": "\n# Write your MySQL query statement below\nSELECT e1.employee_id, e1.name, COUNT(*) AS reports_count, ROUND(AVG(e2.age)) AS average_age\nFROM Employees e1\nJOIN Employees e2\nON e1.employee_id = e2.reports_to\nGROUP BY e1.employee_id, e1.name\nORDER BY e1.employee_id;\n", "compare_result": null, "title_slug": "the-number-of-employees-which-report-to-each-employee", "has_notes": false, "flag_type": 1}, {"id": 1360620701, "question_id": 1884, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724005903, "status": 10, "status_display": "Accepted", "runtime": "6 ms", "url": "/submissions/detail/1360620701/", "is_pending": "Not Pending", "title": "Minimum Changes To Make Alternating Binary String", "memory": "8.4 MB", "code": "\nclass Solution {\npublic:\n    int minOperations(string s) {\n        int res1 = 0, res2 = 0;\n        for (int i = 0; i < s.size(); i++) {\n            if (i % 2 == 0) {\n                if (s[i] == '0') res1++;\n                else res2++;\n            } else {\n                if (s[i] == '1') res1++;\n                else res2++;\n            }\n        }\n        return min(res1, res2);\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "minimum-changes-to-make-alternating-binary-string", "has_notes": false, "flag_type": 1}, {"id": 1360620426, "question_id": 1888, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724005888, "status": 10, "status_display": "Accepted", "runtime": "110 ms", "url": "/submissions/detail/1360620426/", "is_pending": "Not Pending", "title": "Find Nearest Point That Has the Same X or Y Coordinate", "memory": "63.3 MB", "code": "\nclass Solution {\npublic:\n    int nearestValidPoint(int x, int y, vector<vector<int>>& points) {\n        int minDist = INT_MAX;\n        int minIndex = -1;\n        for(int i = 0; i < points.size(); i++) {\n            if(points[i][0] == x || points[i][1] == y) {\n                int dist = abs(points[i][0] - x) + abs(points[i][1] - y);\n                if(dist < minDist) {\n                    minDist = dist;\n                    minIndex = i;\n                }\n            }\n        }\n        return minIndex;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "find-nearest-point-that-has-the-same-x-or-y-coordinate", "has_notes": false, "flag_type": 1}, {"id": 1360620193, "question_id": 1892, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724005872, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360620193/", "is_pending": "Not Pending", "title": "Find Total Time Spent by Each Employee", "memory": "N/A", "code": "sql\nSELECT event_day AS day, emp_id, SUM(out_time - in_time) AS total_time\nFROM Employees\nGROUP BY event_day, emp_id;\n", "compare_result": null, "title_slug": "find-total-time-spent-by-each-employee", "has_notes": false, "flag_type": 1}, {"id": 1360620022, "question_id": 1894, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724005862, "status": 10, "status_display": "Accepted", "runtime": "4 ms", "url": "/submissions/detail/1360620022/", "is_pending": "Not Pending", "title": "Merge Strings Alternately", "memory": "8 MB", "code": "\nclass Solution {\npublic:\n    string mergeAlternately(string word1, string word2) {\n        string result = \"\";\n        int i = 0, j = 0;\n        while(i < word1.size() && j < word2.size()){\n            result += word1[i++];\n            result += word2[j++];\n        }\n        while(i < word1.size()){\n            result += word1[i++];\n        }\n        while(j < word2.size()){\n            result += word2[j++];\n        }\n        return result;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "merge-strings-alternately", "has_notes": false, "flag_type": 1}, {"id": 1360619796, "question_id": 1899, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724005849, "status": 10, "status_display": "Accepted", "runtime": "56 ms", "url": "/submissions/detail/1360619796/", "is_pending": "Not Pending", "title": "Count Items Matching a Rule", "memory": "40.3 MB", "code": "\nclass Solution {\npublic:\n    int countMatches(vector<vector<string>>& items, string ruleKey, string ruleValue) {\n        int count = 0;\n        int index = 0;\n        if(ruleKey == \"type\") index = 0;\n        else if(ruleKey == \"color\") index = 1;\n        else if(ruleKey == \"name\") index = 2;\n        \n        for(auto item : items){\n            if(item[index] == ruleValue) count++;\n        }\n        return count;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "count-items-matching-a-rule", "has_notes": false, "flag_type": 1}, {"id": 1360619553, "question_id": 1904, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724005833, "status": 10, "status_display": "Accepted", "runtime": "6 ms", "url": "/submissions/detail/1360619553/", "is_pending": "Not Pending", "title": "Second Largest Digit in a String", "memory": "8.6 MB", "code": "\nclass Solution {\npublic:\n    int secondHighest(string s) {\n        int first = -1, second = -1;\n        for (char c : s) {\n            if (isdigit(c)) {\n                int num = c - '0';\n                if (num > first) {\n                    second = first;\n                    first = num;\n                } else if (num < first && num > second) {\n                    second = num;\n                }\n            }\n        }\n        return second;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "second-largest-digit-in-a-string", "has_notes": false, "flag_type": 1}, {"id": 1360619274, "question_id": 1908, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724005817, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360619274/", "is_pending": "Not Pending", "title": "Recyclable and Low Fat Products", "memory": "N/A", "code": "sql\nSELECT product_id\nFROM Products\nWHERE low_fats = 'Y' AND recyclable = 'Y';\n", "compare_result": null, "title_slug": "recyclable-and-low-fat-products", "has_notes": false, "flag_type": 1}, {"id": 1360619113, "question_id": 1910, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724005809, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360619113/", "is_pending": "Not Pending", "title": "Check if Binary String Has at Most One Segment of Ones", "memory": "7.6 MB", "code": "\nclass Solution {\npublic:\n    bool checkOnesSegment(string s) {\n        int count = 0;\n        for(int i = 0; i < s.size(); i++){\n            if(s[i] == '1' && (i == 0 || s[i-1] == '0')){\n                count++;\n            }\n        }\n        return count <= 1;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "check-if-binary-string-has-at-most-one-segment-of-ones", "has_notes": false, "flag_type": 1}, {"id": 1360618908, "question_id": 1915, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724005796, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360618908/", "is_pending": "Not Pending", "title": "Check if One String Swap Can Make Strings Equal", "memory": "7.9 MB", "code": "\nclass Solution {\npublic:\n    bool areAlmostEqual(string s1, string s2) {\n        if(s1 == s2) return true;\n        vector<int> diff;\n        for(int i = 0; i < s1.size(); i++) {\n            if(s1[i] != s2[i]) diff.push_back(i);\n            if(diff.size() > 2) return false;\n        }\n        return diff.size() == 2 && s1[diff[0]] == s2[diff[1]] && s1[diff[1]] == s2[diff[0]];\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "check-if-one-string-swap-can-make-strings-equal", "has_notes": false, "flag_type": 1}, {"id": 1360618591, "question_id": 1916, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724005778, "status": 10, "status_display": "Accepted", "runtime": "121 ms", "url": "/submissions/detail/1360618591/", "is_pending": "Not Pending", "title": "Find Center of Star Graph", "memory": "71 MB", "code": "\nclass Solution {\npublic:\n    int findCenter(vector<vector<int>>& edges) {\n        if(edges[0][0] == edges[1][0] || edges[0][0] == edges[1][1]) {\n            return edges[0][0];\n        } else {\n            return edges[0][1];\n        }\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111", "title_slug": "find-center-of-star-graph", "has_notes": false, "flag_type": 1}, {"id": 1360618369, "question_id": 1920, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724005765, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360618369/", "is_pending": "Not Pending", "title": "Determine Color of a Chessboard Square", "memory": "7.3 MB", "code": "\nclass Solution {\npublic:\n    bool squareIsWhite(string coordinates) {\n        return (coordinates[0] - 'a' + coordinates[1] - '1') % 2;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111", "title_slug": "determine-color-of-a-chessboard-square", "has_notes": false, "flag_type": 1}, {"id": 1360618140, "question_id": 1927, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724005752, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360618140/", "is_pending": "Not Pending", "title": "Maximum Ascending Subarray Sum", "memory": "10.3 MB", "code": "\nclass Solution {\npublic:\n    int maxAscendingSum(vector<int>& nums) {\n        int maxSum = nums[0], currentSum = nums[0];\n        for (int i = 1; i < nums.size(); i++) {\n            if (nums[i] > nums[i - 1]) {\n                currentSum += nums[i];\n            } else {\n                currentSum = nums[i];\n            }\n            maxSum = max(maxSum, currentSum);\n        }\n        return maxSum;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "maximum-ascending-subarray-sum", "has_notes": false, "flag_type": 1}, {"id": 1360617877, "question_id": 1933, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724005737, "status": 10, "status_display": "Accepted", "runtime": "4 ms", "url": "/submissions/detail/1360617877/", "is_pending": "Not Pending", "title": "Number of Different Integers in a String", "memory": "8.1 MB", "code": "\nclass Solution {\npublic:\n    int numDifferentIntegers(string word) {\n        for (char &c : word)\n            if (!isdigit(c))\n                c = ' ';\n        stringstream ss(word);\n        string num;\n        set<string> unique_nums;\n        while (ss >> num) {\n            num.erase(0, min(num.find_first_not_of('0'), num.size()-1));\n            unique_nums.insert(num);\n        }\n        return unique_nums.size();\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "number-of-different-integers-in-a-string", "has_notes": false, "flag_type": 1}, {"id": 1360617613, "question_id": 1938, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724005721, "status": 10, "status_display": "Accepted", "runtime": "11 ms", "url": "/submissions/detail/1360617613/", "is_pending": "Not Pending", "title": "Minimum Operations to Make the Array Increasing", "memory": "18.5 MB", "code": "\nclass Solution {\npublic:\n    int minOperations(vector<int>& nums) {\n        int operations = 0;\n        for(int i = 1; i < nums.size(); i++) {\n            if(nums[i] <= nums[i-1]) {\n                operations += nums[i-1] - nums[i] + 1;\n                nums[i] = nums[i-1] + 1;\n            }\n        }\n        return operations;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "minimum-operations-to-make-the-array-increasing", "has_notes": false, "flag_type": 1}, {"id": 1360617365, "question_id": 1942, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724005708, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360617365/", "is_pending": "Not Pending", "title": "Primary Department for Each Employee", "memory": "N/A", "code": "sql\nSELECT employee_id, department_id\nFROM (\n    SELECT employee_id, department_id, primary_flag,\n    COUNT(*) OVER(PARTITION BY employee_id) as cnt\n    FROM Employee\n) as temp\nWHERE primary_flag = 'Y' OR cnt = 1\n", "compare_result": null, "title_slug": "primary-department-for-each-employee", "has_notes": false, "flag_type": 1}, {"id": 1360617135, "question_id": 1944, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724005695, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1360617135/", "is_pending": "Not Pending", "title": "Truncate Sentence", "memory": "7.9 MB", "code": "\nclass Solution {\npublic:\n    string truncateSentence(string s, int k) {\n        for (int i = 0; i < s.size(); i++) {\n            if (s[i] == ' ' && --k == 0) {\n                return s.substr(0, i);\n            }\n        }\n        return s;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "truncate-sentence", "has_notes": false, "flag_type": 1}, {"id": 1360616892, "question_id": 1948, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724005681, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360616892/", "is_pending": "Not Pending", "title": "Rearrange Products Table", "memory": "N/A", "code": "sql\nSELECT product_id, 'store1' AS store, store1 AS price\nFROM Products\nWHERE store1 IS NOT NULL\nUNION ALL\nSELECT product_id, 'store2' AS store, store2 AS price\nFROM Products\nWHERE store2 IS NOT NULL\nUNION ALL\nSELECT product_id, 'store3' AS store, store3 AS price\nFROM Products\nWHERE store3 IS NOT NULL;\n", "compare_result": null, "title_slug": "rearrange-products-table", "has_notes": false, "flag_type": 1}, {"id": 1360616709, "question_id": 1950, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724005670, "status": 10, "status_display": "Accepted", "runtime": "4 ms", "url": "/submissions/detail/1360616709/", "is_pending": "Not Pending", "title": "Sign of the Product of an Array", "memory": "12.9 MB", "code": "\nclass Solution {\npublic:\n    int arraySign(vector<int>& nums) {\n        int negativeCount = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums[i] == 0) {\n                return 0;\n            } else if (nums[i] < 0) {\n                negativeCount++;\n            }\n        }\n        return (negativeCount % 2 == 0) ? 1 : -1;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "sign-of-the-product-of-an-array", "has_notes": false, "flag_type": 1}, {"id": 1360616449, "question_id": 1954, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724005655, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360616449/", "is_pending": "Not Pending", "title": "Replace All Digits with Characters", "memory": "7.7 MB", "code": "\nclass Solution {\npublic:\n    string replaceDigits(string s) {\n        for(int i = 1; i < s.size(); i += 2) {\n            s[i] = s[i-1] + (s[i] - '0');\n        }\n        return s;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "replace-all-digits-with-characters", "has_notes": false, "flag_type": 1}, {"id": 1360616223, "question_id": 1960, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724005642, "status": 10, "status_display": "Accepted", "runtime": "4 ms", "url": "/submissions/detail/1360616223/", "is_pending": "Not Pending", "title": "Check if the Sentence Is Pangram", "memory": "8 MB", "code": "\nclass Solution {\npublic:\n    bool checkIfPangram(string sentence) {\n        vector<int> alphabets(26, 0);\n        for(char c : sentence) {\n            alphabets[c - 'a']++;\n        }\n        for(int i : alphabets) {\n            if(i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "check-if-the-sentence-is-pangram", "has_notes": false, "flag_type": 1}, {"id": 1360615967, "question_id": 1965, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724005626, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360615967/", "is_pending": "Not Pending", "title": "Sum of Digits in Base K", "memory": "7.5 MB", "code": "\nclass Solution {\npublic:\n    int sumBase(int n, int k) {\n        int sum = 0;\n        while(n > 0) {\n            sum += n % k;\n            n /= k;\n        }\n        return sum;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111", "title_slug": "sum-of-digits-in-base-k", "has_notes": false, "flag_type": 1}, {"id": 1360615734, "question_id": 1970, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724005613, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360615734/", "is_pending": "Not Pending", "title": "Sorting the Sentence", "memory": "7.8 MB", "code": "\nclass Solution {\npublic:\n    string sortSentence(string s) {\n        vector<string> words(9);\n        string word;\n        for (char c : s) {\n            if (c == ' ') {\n                words[word.back() - '1'] = word;\n                word = \"\";\n            } else {\n                word += c;\n            }\n        }\n        words[word.back() - '1'] = word;\n        string res;\n        for (string word : words) {\n            if (word.empty()) break;\n            res += word.substr(0, word.size() - 1) + ' ';\n        }\n        res.pop_back();\n        return res;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111", "title_slug": "sorting-the-sentence", "has_notes": false, "flag_type": 1}, {"id": 1360615504, "question_id": 1975, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724005599, "status": 10, "status_display": "Accepted", "runtime": "4 ms", "url": "/submissions/detail/1360615504/", "is_pending": "Not Pending", "title": "Minimum Distance to the Target Element", "memory": "12.4 MB", "code": "\nclass Solution {\npublic:\n    int getMinDistance(vector<int>& nums, int target, int start) {\n        int minDistance = INT_MAX;\n        for(int i = 0; i < nums.size(); i++) {\n            if(nums[i] == target) {\n                minDistance = min(minDistance, abs(i - start));\n            }\n        }\n        return minDistance;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "minimum-distance-to-the-target-element", "has_notes": false, "flag_type": 1}, {"id": 1360615292, "question_id": 1983, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724005586, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360615292/", "is_pending": "Not Pending", "title": "Maximum Population Year", "memory": "10.3 MB", "code": "\nclass Solution {\npublic:\n    int maximumPopulation(vector<vector<int>>& logs) {\n        vector<int> population(101, 0);\n        for (auto& log : logs) {\n            population[log[0] - 1950]++;\n            population[log[1] - 1950]--;\n        }\n        int max_population = population[0];\n        int max_year = 1950;\n        for (int i = 1; i < 101; i++) {\n            population[i] += population[i - 1];\n            if (population[i] > max_population) {\n                max_population = population[i];\n                max_year = i + 1950;\n            }\n        }\n        return max_year;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111", "title_slug": "maximum-population-year", "has_notes": false, "flag_type": 1}, {"id": 1360615001, "question_id": 1987, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724005569, "status": 15, "status_display": "Runtime Error", "runtime": "N/A", "url": "/submissions/detail/1360615001/", "is_pending": "Not Pending", "title": "Substrings of Size Three with Distinct Characters", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    int countGoodSubstrings(string s) {\n        int count = 0;\n        for(int i = 0; i < s.size() - 2; i++) {\n            if(s[i] != s[i+1] && s[i] != s[i+2] && s[i+1] != s[i+2]) {\n                count++;\n            }\n        }\n        return count;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000", "title_slug": "substrings-of-size-three-with-distinct-characters", "has_notes": false, "flag_type": 1}, {"id": 1360614787, "question_id": 1993, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724005556, "status": 10, "status_display": "Accepted", "runtime": "7 ms", "url": "/submissions/detail/1360614787/", "is_pending": "Not Pending", "title": "Sum of All Subset XOR Totals", "memory": "8.7 MB", "code": "\nclass Solution {\npublic:\n    int subsetXORSum(vector<int>& nums) {\n        int n = nums.size();\n        int total = 0;\n        for (int i = 0; i < (1 << n); i++) {\n            int xorSum = 0;\n            for (int j = 0; j < n; j++) {\n                if (i & (1 << j)) {\n                    xorSum ^= nums[j];\n                }\n            }\n            total += xorSum;\n        }\n        return total;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111", "title_slug": "sum-of-all-subset-xor-totals", "has_notes": false, "flag_type": 1}, {"id": 1360614570, "question_id": 1999, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724005542, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360614570/", "is_pending": "Not Pending", "title": "Longer Contiguous Segments of Ones than Zeros", "memory": "7.7 MB", "code": "\nclass Solution {\npublic:\n    bool checkZeroOnes(string s) {\n        int maxOne = 0, maxZero = 0, countOne = 0, countZero = 0;\n        for (char c : s) {\n            if (c == '1') {\n                countOne++;\n                countZero = 0;\n                maxOne = max(maxOne, countOne);\n            } else {\n                countZero++;\n                countOne = 0;\n                maxZero = max(maxZero, countZero);\n            }\n        }\n        return maxOne > maxZero;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "longer-contiguous-segments-of-ones-than-zeros", "has_notes": false, "flag_type": 1}, {"id": 1360614282, "question_id": 2005, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724005526, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360614282/", "is_pending": "Not Pending", "title": "Check if All the Integers in a Range Are Covered", "memory": "11.4 MB", "code": "\nclass Solution {\npublic:\n    bool isCovered(vector<vector<int>>& ranges, int left, int right) {\n        vector<int> cover(51, 0);\n        for(auto& range : ranges) {\n            for(int i = range[0]; i <= range[1]; i++) {\n                cover[i] = 1;\n            }\n        }\n        for(int i = left; i <= right; i++) {\n            if(cover[i] == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "check-if-all-the-integers-in-a-range-are-covered", "has_notes": false, "flag_type": 1}, {"id": 1360614044, "question_id": 2010, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724005511, "status": 10, "status_display": "Accepted", "runtime": "2 ms", "url": "/submissions/detail/1360614044/", "is_pending": "Not Pending", "title": "Check if Word Equals Summation of Two Words", "memory": "7.6 MB", "code": "\nclass Solution {\npublic:\n    bool isSumEqual(string firstWord, string secondWord, string targetWord) {\n        return convert(firstWord) + convert(secondWord) == convert(targetWord);\n    }\n    \nprivate:\n    int convert(string word) {\n        int num = 0;\n        for (char c : word) {\n            num = num * 10 + (c - 'a');\n        }\n        return num;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "check-if-word-equals-summation-of-two-words", "has_notes": false, "flag_type": 1}, {"id": 1360613759, "question_id": 2015, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724005495, "status": 10, "status_display": "Accepted", "runtime": "2 ms", "url": "/submissions/detail/1360613759/", "is_pending": "Not Pending", "title": "Determine Whether Matrix Can Be Obtained By Rotation", "memory": "14 MB", "code": "\nclass Solution {\npublic:\n    bool findRotation(vector<vector<int>>& mat, vector<vector<int>>& target) {\n        for (int i = 0; i < 4; ++i) {\n            rotate(mat);\n            if (mat == target) {\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    void rotate(vector<vector<int>>& mat) {\n        int n = mat.size();\n        for (int i = 0; i < n / 2; ++i) {\n            for (int j = i; j < n - i - 1; ++j) {\n                int temp = mat[i][j];\n                mat[i][j] = mat[n - j - 1][i];\n                mat[n - j - 1][i] = mat[n - i - 1][n - j - 1];\n                mat[n - i - 1][n - j - 1] = mat[j][n - i - 1];\n                mat[j][n - i - 1] = temp;\n            }\n        }\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "determine-whether-matrix-can-be-obtained-by-rotation", "has_notes": false, "flag_type": 1}, {"id": 1360613297, "question_id": 2020, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724005472, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360613297/", "is_pending": "Not Pending", "title": "Remove One Element to Make the Array Strictly Increasing", "memory": "12.5 MB", "code": "\nclass Solution {\npublic:\n    bool canBeIncreasing(vector<int>& nums) {\n        int n = nums.size();\n        int count = 0;\n        for(int i = 1; i < n && count <= 1; i++){\n            if(nums[i-1] >= nums[i]){\n                count++;\n                if(i-2 < 0 || nums[i-2] < nums[i]) nums[i-1] = nums[i];\n                else nums[i] = nums[i-1]; \n            }\n        }\n        return count <= 1;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "remove-one-element-to-make-the-array-strictly-increasing", "has_notes": false, "flag_type": 1}, {"id": 1360613041, "question_id": 2024, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724005457, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360613041/", "is_pending": "Not Pending", "title": "Calculate Special Bonus", "memory": "N/A", "code": "sql\nSELECT employee_id,\n       CASE\n           WHEN employee_id % 2 = 1 AND LEFT(name, 1) != 'M' THEN salary\n           ELSE 0\n       END AS bonus\nFROM Employees\nORDER BY employee_id;\n", "compare_result": null, "title_slug": "calculate-special-bonus", "has_notes": false, "flag_type": 1}, {"id": 1360612873, "question_id": 2025, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724005447, "status": 10, "status_display": "Accepted", "runtime": "8 ms", "url": "/submissions/detail/1360612873/", "is_pending": "Not Pending", "title": "Redistribute Characters to Make All Strings Equal", "memory": "14.8 MB", "code": "\nclass Solution {\npublic:\n    bool makeEqual(vector<string>& words) {\n        vector<int> count(26, 0);\n        int n = words.size();\n        for (string& word : words) {\n            for (char c : word) {\n                count[c - 'a']++;\n            }\n        }\n        for (int c : count) {\n            if (c % n != 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "redistribute-characters-to-make-all-strings-equal", "has_notes": false, "flag_type": 1}, {"id": 1360612650, "question_id": 2032, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724005434, "status": 10, "status_display": "Accepted", "runtime": "34 ms", "url": "/submissions/detail/1360612650/", "is_pending": "Not Pending", "title": "Largest Odd Number in String", "memory": "16.3 MB", "code": "\nclass Solution {\npublic:\n    string largestOddNumber(string num) {\n        int n = num.size();\n        for(int i = n - 1; i >= 0; i--) {\n            if((num[i] - '0') % 2 == 1) {\n                return num.substr(0, i + 1);\n            }\n        }\n        return \"\";\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "largest-odd-number-in-string", "has_notes": false, "flag_type": 1}, {"id": 1360612467, "question_id": 2037, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724005422, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1360612467/", "is_pending": "Not Pending", "title": "Count Square Sum Triples", "memory": "7.6 MB", "code": "\nclass Solution {\npublic:\n    int countTriples(int n) {\n        int count = 0;\n        for (int a = 1; a <= n; a++) {\n            for (int b = a; b <= n; b++) {\n                int c = sqrt(a * a + b * b);\n                if (c * c == a * a + b * b && c <= n) {\n                    count += (a == b) ? 1 : 2;\n                }\n            }\n        }\n        return count;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "count-square-sum-triples", "has_notes": false, "flag_type": 1}, {"id": 1360612202, "question_id": 2041, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724005405, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360612202/", "is_pending": "Not Pending", "title": "The Latest Login in 2020", "memory": "N/A", "code": "sql\nSELECT user_id, MAX(time_stamp) as last_stamp\nFROM Logins\nWHERE YEAR(time_stamp) = 2020\nGROUP BY user_id;\n", "compare_result": null, "title_slug": "the-latest-login-in-2020", "has_notes": false, "flag_type": 1}, {"id": 1360612055, "question_id": 2042, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724005396, "status": 10, "status_display": "Accepted", "runtime": "28 ms", "url": "/submissions/detail/1360612055/", "is_pending": "Not Pending", "title": "Maximum Product Difference Between Two Pairs", "memory": "23.8 MB", "code": "\nclass Solution {\npublic:\n    int maxProductDifference(vector<int>& nums) {\n        int n = nums.size();\n        sort(nums.begin(), nums.end());\n        return nums[n-1]*nums[n-2] - nums[0]*nums[1];\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "maximum-product-difference-between-two-pairs", "has_notes": false, "flag_type": 1}, {"id": 1360611860, "question_id": 2048, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724005384, "status": 10, "status_display": "Accepted", "runtime": "12 ms", "url": "/submissions/detail/1360611860/", "is_pending": "Not Pending", "title": "Build Array from Permutation", "memory": "19.1 MB", "code": "\nclass Solution {\npublic:\n    vector<int> buildArray(vector<int>& nums) {\n        vector<int> ans(nums.size());\n        for(int i = 0; i < nums.size(); i++) {\n            ans[i] = nums[nums[i]];\n        }\n        return ans;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "build-array-from-permutation", "has_notes": false, "flag_type": 1}, {"id": 1360611582, "question_id": 2053, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724005367, "status": 10, "status_display": "Accepted", "runtime": "6 ms", "url": "/submissions/detail/1360611582/", "is_pending": "Not Pending", "title": "Check if All Characters Have Equal Number of Occurrences", "memory": "9.5 MB", "code": "\nclass Solution {\npublic:\n    bool areOccurrencesEqual(string s) {\n        unordered_map<char, int> count;\n        for (char c : s) {\n            count[c]++;\n        }\n        int freq = count.begin()->second;\n        for (auto &p : count) {\n            if (p.second != freq) {\n                return false;\n            }\n        }\n        return true;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "check-if-all-characters-have-equal-number-of-occurrences", "has_notes": false, "flag_type": 1}, {"id": 1360611357, "question_id": 2058, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724005355, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360611357/", "is_pending": "Not Pending", "title": "Concatenation of Array", "memory": "15.2 MB", "code": "\nclass Solution {\npublic:\n    vector<int> getConcatenation(vector<int>& nums) {\n        int n = nums.size();\n        vector<int> ans(2*n);\n        for(int i=0; i<n; i++){\n            ans[i] = nums[i];\n            ans[i+n] = nums[i];\n        }\n        return ans;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "concatenation-of-array", "has_notes": false, "flag_type": 1}, {"id": 1360611130, "question_id": 2076, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724005342, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360611130/", "is_pending": "Not Pending", "title": "Sum of Digits of String After Convert", "memory": "9.8 MB", "code": "\nclass Solution {\npublic:\n    int getLucky(string s, int k) {\n        string t = \"\";\n        for (char c : s) {\n            t += to_string(c - 'a' + 1);\n        }\n        int x = 0;\n        for (char c : t) {\n            x += c - '0';\n        }\n        for (int i = 1; i < k; ++i) {\n            int y = 0;\n            while (x) {\n                y += x % 10;\n                x /= 10;\n            }\n            x = y;\n        }\n        return x;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "sum-of-digits-of-string-after-convert", "has_notes": false, "flag_type": 1}, {"id": 1360610885, "question_id": 2083, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724005326, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360610885/", "is_pending": "Not Pending", "title": "Three Divisors", "memory": "7.5 MB", "code": "\nclass Solution {\npublic:\n    bool isThree(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (n % i == 0) {\n                count++;\n            }\n        }\n        return count == 3;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "three-divisors", "has_notes": false, "flag_type": 1}, {"id": 1360610649, "question_id": 2088, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724005314, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360610649/", "is_pending": "Not Pending", "title": "Minimum Time to Type Word Using Special Typewriter", "memory": "7.7 MB", "code": "\nclass Solution {\npublic:\n    int minTimeToType(string word) {\n        int time = 0;\n        char current = 'a';\n        for (char c : word) {\n            int diff = abs(c - current);\n            time += min(diff, 26 - diff) + 1;\n            current = c;\n        }\n        return time;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "minimum-time-to-type-word-using-special-typewriter", "has_notes": false, "flag_type": 1}, {"id": 1360610227, "question_id": 2093, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724005293, "status": 10, "status_display": "Accepted", "runtime": "11 ms", "url": "/submissions/detail/1360610227/", "is_pending": "Not Pending", "title": "Check If String Is a Prefix of Array", "memory": "16.8 MB", "code": "\nclass Solution {\npublic:\n    bool isPrefixString(string s, vector<string>& words) {\n        string prefix = \"\";\n        for (auto word : words) {\n            prefix += word;\n            if (prefix == s) {\n                return true;\n            }\n            if (prefix.size() > s.size()) {\n                return false;\n            }\n        }\n        return false;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "check-if-string-is-a-prefix-of-array", "has_notes": false, "flag_type": 1}, {"id": 1360609981, "question_id": 2099, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724005278, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360609981/", "is_pending": "Not Pending", "title": "Number of Strings That Appear as Substrings in Word", "memory": "11.3 MB", "code": "\nclass Solution {\npublic:\n    int numOfStrings(vector<string>& patterns, string word) {\n        int count = 0;\n        for(auto &pattern : patterns) {\n            if(word.find(pattern) != string::npos) {\n                count++;\n            }\n        }\n        return count;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "number-of-strings-that-appear-as-substrings-in-word", "has_notes": false, "flag_type": 1}, {"id": 1360609750, "question_id": 2102, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days", "timestamp": 1724005265, "status": 10, "status_display": "Accepted", "runtime": "4 ms", "url": "/submissions/detail/1360609750/", "is_pending": "Not Pending", "title": "Find the Middle Index in Array", "memory": "15.3 MB", "code": "\nclass Solution {\npublic:\n    int findMiddleIndex(vector<int>& nums) {\n        int totalSum = 0;\n        for(int num : nums) {\n            totalSum += num;\n        }\n        \n        int leftSum = 0;\n        for(int i = 0; i < nums.size(); i++) {\n            if(leftSum == totalSum - leftSum - nums[i]) {\n                return i;\n            }\n            leftSum += nums[i];\n        }\n        \n        return -1;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "find-the-middle-index-in-array", "has_notes": false, "flag_type": 1}, {"id": 1360485133, "question_id": 2106, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 2\u00c2\u00a0hours", "timestamp": 1723998230, "status": 10, "status_display": "Accepted", "runtime": "10 ms", "url": "/submissions/detail/1360485133/", "is_pending": "Not Pending", "title": "Find Greatest Common Divisor of Array", "memory": "15.3 MB", "code": "\nclass Solution {\npublic:\n    int findGCD(vector<int>& nums) {\n        int min_num = *min_element(nums.begin(), nums.end());\n        int max_num = *max_element(nums.begin(), nums.end());\n        return gcd(min_num, max_num);\n    }\n    \n    int gcd(int a, int b) {\n        if (b == 0)\n            return a;\n        return gcd(b, a % b);\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "find-greatest-common-divisor-of-array", "has_notes": false, "flag_type": 1}, {"id": 1360484896, "question_id": 2110, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 2\u00c2\u00a0hours", "timestamp": 1723998214, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360484896/", "is_pending": "Not Pending", "title": "Employees With Missing Information", "memory": "N/A", "code": "sql\nSELECT employee_id\nFROM (\n    SELECT employee_id FROM Employees\n    UNION\n    SELECT employee_id FROM Salaries\n) AS E\nWHERE employee_id NOT IN (SELECT employee_id FROM Employees WHERE name IS NOT NULL)\nOR employee_id NOT IN (SELECT employee_id FROM Salaries WHERE salary IS NOT NULL)\nORDER BY employee_id;\n", "compare_result": null, "title_slug": "employees-with-missing-information", "has_notes": false, "flag_type": 1}, {"id": 1360484712, "question_id": 2112, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 2\u00c2\u00a0hours", "timestamp": 1723998203, "status": 10, "status_display": "Accepted", "runtime": "7 ms", "url": "/submissions/detail/1360484712/", "is_pending": "Not Pending", "title": "Minimum Difference Between Highest and Lowest of K Scores", "memory": "16.8 MB", "code": "\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        sort(nums.begin(), nums.end());\n        int min_diff = INT_MAX;\n        for(int i = 0; i <= nums.size() - k; i++) {\n            min_diff = min(min_diff, nums[i + k - 1] - nums[i]);\n        }\n        return min_diff;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "minimum-difference-between-highest-and-lowest-of-k-scores", "has_notes": false, "flag_type": 1}, {"id": 1360484494, "question_id": 2116, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 2\u00c2\u00a0hours", "timestamp": 1723998190, "status": 10, "status_display": "Accepted", "runtime": "4 ms", "url": "/submissions/detail/1360484494/", "is_pending": "Not Pending", "title": "Count Number of Pairs With Absolute Difference K", "memory": "15.2 MB", "code": "\nclass Solution {\npublic:\n    int countKDifference(vector<int>& nums, int k) {\n        int count = 0;\n        for(int i = 0; i < nums.size(); i++) {\n            for(int j = i + 1; j < nums.size(); j++) {\n                if(abs(nums[i] - nums[j]) == k) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "count-number-of-pairs-with-absolute-difference-k", "has_notes": false, "flag_type": 1}, {"id": 1360484288, "question_id": 2121, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 2\u00c2\u00a0hours", "timestamp": 1723998177, "status": 10, "status_display": "Accepted", "runtime": "721 ms", "url": "/submissions/detail/1360484288/", "is_pending": "Not Pending", "title": "Find if Path Exists in Graph", "memory": "284.8 MB", "code": "\nclass Solution {\npublic:\n    bool validPath(int n, vector<vector<int>>& edges, int start, int end) {\n        vector<vector<int>> graph(n);\n        for(auto &edge : edges) {\n            graph[edge[0]].push_back(edge[1]);\n            graph[edge[1]].push_back(edge[0]);\n        }\n        vector<int> visited(n, 0);\n        queue<int> q;\n        q.push(start);\n        visited[start] = 1;\n        while(!q.empty()) {\n            int node = q.front();\n            q.pop();\n            if(node == end) return true;\n            for(auto &nei : graph[node]) {\n                if(!visited[nei]) {\n                    visited[nei] = 1;\n                    q.push(nei);\n                }\n            }\n        }\n        return false;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111", "title_slug": "find-if-path-exists-in-graph", "has_notes": false, "flag_type": 1}, {"id": 1360483990, "question_id": 2122, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 2\u00c2\u00a0hours", "timestamp": 1723998159, "status": 10, "status_display": "Accepted", "runtime": "20 ms", "url": "/submissions/detail/1360483990/", "is_pending": "Not Pending", "title": "Count Special Quadruplets", "memory": "13.1 MB", "code": "\nclass Solution {\npublic:\n    int countQuadruplets(vector<int>& nums) {\n        int count = 0;\n        int n = nums.size();\n        for(int a = 0; a < n - 3; a++) {\n            for(int b = a + 1; b < n - 2; b++) {\n                for(int c = b + 1; c < n - 1; c++) {\n                    for(int d = c + 1; d < n; d++) {\n                        if(nums[a] + nums[b] + nums[c] == nums[d]) {\n                            count++;\n                        }\n                    }\n                }\n            }\n        }\n        return count;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "count-special-quadruplets", "has_notes": false, "flag_type": 1}, {"id": 1360483740, "question_id": 2127, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 2\u00c2\u00a0hours", "timestamp": 1723998143, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360483740/", "is_pending": "Not Pending", "title": "Employees Whose Manager Left the Company", "memory": "N/A", "code": "sql\nSELECT employee_id\nFROM Employees\nWHERE salary < 30000 AND manager_id NOT IN (SELECT employee_id FROM Employees)\nORDER BY employee_id;\n", "compare_result": null, "title_slug": "employees-whose-manager-left-the-company", "has_notes": false, "flag_type": 1}, {"id": 1360483555, "question_id": 2128, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 2\u00c2\u00a0hours", "timestamp": 1723998134, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360483555/", "is_pending": "Not Pending", "title": "Reverse Prefix of Word", "memory": "7.6 MB", "code": "\nclass Solution {\npublic:\n    string reversePrefix(string word, char ch) {\n        int index = word.find(ch);\n        if(index != string::npos) {\n            reverse(word.begin(), word.begin() + index + 1);\n        }\n        return word;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "reverse-prefix-of-word", "has_notes": false, "flag_type": 1}, {"id": 1360483285, "question_id": 2132, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 2\u00c2\u00a0hours", "timestamp": 1723998116, "status": 10, "status_display": "Accepted", "runtime": "90 ms", "url": "/submissions/detail/1360483285/", "is_pending": "Not Pending", "title": "Convert 1D Array Into 2D Array", "memory": "88.1 MB", "code": "\nclass Solution {\npublic:\n    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {\n        if (m * n != original.size()) {\n            return {};\n        }\n        vector<vector<int>> res(m, vector<int>(n));\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < n; ++j) {\n                res[i][j] = original[i * n + j];\n            }\n        }\n        return res;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "convert-1d-array-into-2d-array", "has_notes": false, "flag_type": 1}, {"id": 1360483035, "question_id": 2137, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 2\u00c2\u00a0hours", "timestamp": 1723998102, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360483035/", "is_pending": "Not Pending", "title": "Final Value of Variable After Performing Operations", "memory": "18.2 MB", "code": "\nclass Solution {\npublic:\n    int finalValueAfterOperations(vector<string>& operations) {\n        int X = 0;\n        for(auto& operation : operations) {\n            if(operation == \"++X\" || operation == \"X++\") {\n                X++;\n            } else {\n                X--;\n            }\n        }\n        return X;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "final-value-of-variable-after-performing-operations", "has_notes": false, "flag_type": 1}, {"id": 1360482806, "question_id": 2144, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 2\u00c2\u00a0hours", "timestamp": 1723998087, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360482806/", "is_pending": "Not Pending", "title": "Maximum Difference Between Increasing Elements", "memory": "11 MB", "code": "\nclass Solution {\npublic:\n    int maximumDifference(vector<int>& nums) {\n        int min_num = nums[0];\n        int max_diff = -1;\n        for(int i = 1; i < nums.size(); i++) {\n            if(nums[i] > min_num) {\n                max_diff = max(max_diff, nums[i] - min_num);\n            } else {\n                min_num = nums[i];\n            }\n        }\n        return max_diff;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111", "title_slug": "maximum-difference-between-increasing-elements", "has_notes": false, "flag_type": 1}, {"id": 1360482564, "question_id": 2148, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 2\u00c2\u00a0hours", "timestamp": 1723998073, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1360482564/", "is_pending": "Not Pending", "title": "Minimum Number of Moves to Seat Everyone", "memory": "21.5 MB", "code": "\nclass Solution {\npublic:\n    int minMovesToSeat(vector<int>& seats, vector<int>& students) {\n        sort(seats.begin(), seats.end());\n        sort(students.begin(), students.end());\n        int moves = 0;\n        for(int i = 0; i < seats.size(); i++) {\n            moves += abs(seats[i] - students[i]);\n        }\n        return moves;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "minimum-number-of-moves-to-seat-everyone", "has_notes": false, "flag_type": 1}, {"id": 1360482326, "question_id": 2154, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 2\u00c2\u00a0hours", "timestamp": 1723998058, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360482326/", "is_pending": "Not Pending", "title": "Minimum Moves to Convert String", "memory": "7.9 MB", "code": "\nclass Solution {\npublic:\n    int minimumMoves(string s) {\n        int moves = 0;\n        for (int i = 0; i < s.size(); i++) {\n            if (s[i] == 'X') {\n                moves++;\n                i += 2;\n            }\n        }\n        return moves;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111", "title_slug": "minimum-moves-to-convert-string", "has_notes": false, "flag_type": 1}, {"id": 1360482112, "question_id": 2159, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 2\u00c2\u00a0hours", "timestamp": 1723998044, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360482112/", "is_pending": "Not Pending", "title": "Two Out of Three", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    vector<int> twoOutOfThree(vector<int>& nums1, vector<int>& nums2, vector<int>& nums3) {\n        vector<int> count(101, 0);\n        vector<int> res;\n        \n        vector<int> v = nums1;\n        v.insert(v.end(), nums2.begin(), nums2.end());\n        v.insert(v.end(), nums3.begin(), nums3.end());\n        \n        for (int i : v) {\n            if (count[i] == 0) {\n                count[i]++;\n            } else if (count[i] == 1) {\n                res.push_back(i);\n                count[i]++;\n            }\n        }\n        \n        return res;\n    }\n};\n", "compare_result": "010111100000001010001000100000000000000010000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000001000001000000000000000000000000000000000000000000000000000000000000000000000000000000000001111000000000000000000000000000000000000000000000000001111", "title_slug": "two-out-of-three", "has_notes": false, "flag_type": 1}, {"id": 1360481876, "question_id": 2163, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 2\u00c2\u00a0hours", "timestamp": 1723998028, "status": 10, "status_display": "Accepted", "runtime": "21 ms", "url": "/submissions/detail/1360481876/", "is_pending": "Not Pending", "title": "Kth Distinct String in an Array", "memory": "20.1 MB", "code": "\nclass Solution {\npublic:\n    string kthDistinct(vector<string>& arr, int k) {\n        unordered_map<string, int> count;\n        for (const auto& str : arr) {\n            ++count[str];\n        }\n        vector<string> distinct;\n        for (const auto& pair : count) {\n            if (pair.second == 1) {\n                distinct.push_back(pair.first);\n            }\n        }\n        if (k > distinct.size()) {\n            return \"\";\n        }\n        for (const auto& str : arr) {\n            if (count[str] == 1) {\n                if (--k == 0) {\n                    return str;\n                }\n            }\n        }\n        return \"\";\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "kth-distinct-string-in-an-array", "has_notes": false, "flag_type": 1}, {"id": 1360481588, "question_id": 2168, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 2\u00c2\u00a0hours", "timestamp": 1723998009, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360481588/", "is_pending": "Not Pending", "title": "Check if Numbers Are Ascending in a Sentence", "memory": "8 MB", "code": "\nclass Solution {\npublic:\n    bool areNumbersAscending(string s) {\n        stringstream ss(s);\n        string word;\n        int prev = -1, curr;\n        while(ss >> word) {\n            if(isdigit(word[0])) {\n                curr = stoi(word);\n                if(curr <= prev) return false;\n                prev = curr;\n            }\n        }\n        return true;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "check-if-numbers-are-ascending-in-a-sentence", "has_notes": false, "flag_type": 1}, {"id": 1360481366, "question_id": 2173, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 2\u00c2\u00a0hours", "timestamp": 1723997995, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360481366/", "is_pending": "Not Pending", "title": "Number of Valid Words in a Sentence", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    int countValidWords(string sentence) {\n        int count = 0;\n        stringstream ss(sentence);\n        string word;\n        while (ss >> word) {\n            int hyphen = 0, punctuation = 0, digit = 0;\n            for (int i = 0; i < word.size(); ++i) {\n                if (word[i] == '-') {\n                    ++hyphen;\n                    if (i == 0 || i == word.size() - 1 || word[i - 1] == '-' || word[i + 1] == '-')\n                        hyphen = 2;\n                } else if (word[i] == '!' || word[i] == '.' || word[i] == ',') {\n                    ++punctuation;\n                    if (i != word.size() - 1)\n                        punctuation = 2;\n                } else if (isdigit(word[i])) {\n                    ++digit;\n                }\n            }\n            if (hyphen <= 1 && punctuation <= 1 && digit == 0)\n                ++count;\n        }\n        return count;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111011111111111111111111111111111111111111111111111111111111011111111101111111111111111111111111111111", "title_slug": "number-of-valid-words-in-a-sentence", "has_notes": false, "flag_type": 1}, {"id": 1360481035, "question_id": 2177, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 2\u00c2\u00a0hours", "timestamp": 1723997975, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360481035/", "is_pending": "Not Pending", "title": "Check Whether Two Strings are Almost Equivalent", "memory": "8 MB", "code": "\nclass Solution {\npublic:\n    bool checkAlmostEquivalent(string word1, string word2) {\n        vector<int> freq1(26, 0), freq2(26, 0);\n        \n        for(char c : word1) {\n            freq1[c - 'a']++;\n        }\n        \n        for(char c : word2) {\n            freq2[c - 'a']++;\n        }\n        \n        for(int i = 0; i < 26; i++) {\n            if(abs(freq1[i] - freq2[i]) > 3) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "check-whether-two-strings-are-almost-equivalent", "has_notes": false, "flag_type": 1}, {"id": 1360480732, "question_id": 2181, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 2\u00c2\u00a0hours", "timestamp": 1723997955, "status": 10, "status_display": "Accepted", "runtime": "7 ms", "url": "/submissions/detail/1360480732/", "is_pending": "Not Pending", "title": "Smallest Index With Equal Value", "memory": "25.4 MB", "code": "\nclass Solution {\npublic:\n    int smallestEqual(vector<int>& nums) {\n        for(int i = 0; i < nums.size(); i++) {\n            if(i % 10 == nums[i]) {\n                return i;\n            }\n        }\n        return -1;\n    }\n};\n", "compare_resulttitle_slug": "smallest-index-with-equal-value", "has_notes": false, "flag_type": 1}, {"id": 1360480499, "question_id": 2186, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 2\u00c2\u00a0hours", "timestamp": 1723997940, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360480499/", "is_pending": "Not Pending", "title": "Count Vowel Substrings of a String", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    int countVowelSubstrings(string word) {\n        int count = 0;\n        int n = word.size();\n        for(int i = 0; i < n; i++) {\n            if(word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u') {\n                int a = 0, e = 0, i_ = 0, o = 0, u = 0;\n                for(int j = i; j < n; j++) {\n                    if(word[j] == 'a') a = 1;\n                    else if(word[j] == 'e') e = 1;\n                    else if(word[j] == 'i') i_ = 1;\n                    else if(word[j] == 'o') o = 1;\n                    else if(word[j] == 'u') u = 1;\n                    if(a + e + i_ + o + u == 5) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n};\n", "compare_result": "1100111110010011111111111111111000000000011111111101111111111111111111111111111111100000", "title_slug": "count-vowel-substrings-of-a-string", "has_notes": false, "flag_type": 1}, {"id": 1360480238, "question_id": 2190, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 2\u00c2\u00a0hours", "timestamp": 1723997924, "status": 10, "status_display": "Accepted", "runtime": "26 ms", "url": "/submissions/detail/1360480238/", "is_pending": "Not Pending", "title": "Count Common Words With One Occurrence", "memory": "22.8 MB", "code": "\nclass Solution {\npublic:\n    int countWords(vector<string>& words1, vector<string>& words2) {\n        unordered_map<string, int> count1, count2;\n        for (const string& word : words1) {\n            ++count1[word];\n        }\n        for (const string& word : words2) {\n            ++count2[word];\n        }\n        int ans = 0;\n        for (const auto& [word, freq] : count1) {\n            if (freq == 1 && count2[word] == 1) {\n                ++ans;\n            }\n        }\n        return ans;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111", "title_slug": "count-common-words-with-one-occurrence", "has_notes": false, "flag_type": 1}, {"id": 1360479976, "question_id": 2195, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 2\u00c2\u00a0hours", "timestamp": 1723997909, "status": 10, "status_display": "Accepted", "runtime": "5 ms", "url": "/submissions/detail/1360479976/", "is_pending": "Not Pending", "title": "Time Needed to Buy Tickets", "memory": "9.7 MB", "code": "\nclass Solution {\npublic:\n    int timeRequiredToBuy(vector<int>& tickets, int k) {\n        int time = 0;\n        while (tickets[k] > 0) {\n            for (int i = 0; i < tickets.size(); i++) {\n                if (tickets[i] > 0) {\n                    tickets[i]--;\n                    time++;\n                    if (tickets[k] == 0) {\n                        return time;\n                    }\n                }\n            }\n        }\n        return time;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111", "title_slug": "time-needed-to-buy-tickets", "has_notes": false, "flag_type": 1}, {"id": 1360479745, "question_id": 2199, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 2\u00c2\u00a0hours", "timestamp": 1723997894, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360479745/", "is_pending": "Not Pending", "title": "Two Furthest Houses With Different Colors", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    int maxDistance(vector<int>& colors) {\n        unordered_map<int, pair<int, int>> colorMap;\n        int maxDist = 0;\n        for (int i = 0; i < colors.size(); i++) {\n            if (colorMap.find(colors[i]) == colorMap.end()) {\n                colorMap[colors[i]] = make_pair(i, i);\n            } else {\n                colorMap[colors[i]].second = i;\n            }\n        }\n        for (auto it : colorMap) {\n            maxDist = max(maxDist, it.second.second - it.second.first);\n        }\n        return maxDist;\n    }\n};\n", "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "title_slug": "two-furthest-houses-with-different-colors", "has_notes": false, "flag_type": 1}, {"id": 1360479498, "question_id": 2204, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 2\u00c2\u00a0hours", "timestamp": 1723997880, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360479498/", "is_pending": "Not Pending", "title": "Find Subsequence of Length K With the Largest Sum", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    vector<int> maxSubsequence(vector<int>& nums, int k) {\n        vector<int> result;\n        priority_queue<pair<int, int>> pq;\n        for (int i = 0; i < nums.size(); i++) {\n            pq.push({nums[i], i});\n            if (pq.size() > nums.size() - k) {\n                result.push_back(pq.top().first);\n                pq.pop();\n            }\n        }\n        sort(result.begin(), result.end(), greater<int>());\n        return result;\n    }\n};\n", "compare_result": "1011100000000000000000000000000000000000000111110", "title_slug": "find-subsequence-of-length-k-with-the-largest-sum", "has_notes": false, "flag_type": 1}, {"id": 1360479262, "question_id": 2210, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 2\u00c2\u00a0hours", "timestamp": 1723997865, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360479262/", "is_pending": "Not Pending", "title": "Find Target Indices After Sorting Array", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    vector<int> targetIndices(vector<int>& nums, int target) {\n        vector<pair<int, int>> pairs;\n        for (int i = 0; i < nums.size(); i++) {\n            pairs.push_back({nums[i], i});\n        }\n        sort(pairs.begin(), pairs.end());\n        vector<int> result;\n        for (auto& pair : pairs) {\n            if (pair.first == target) {\n                result.push_back(pair.second);\n            }\n        }\n        return result;\n    }\n};\n", "compare_result": "000111000000000000000000000000000001101011010011111111111110000000000000000000000100110011110110010101110101000000000000000000000000000000000000000000000000000000010000000001100000110011101111110101011010110011111111", "title_slug": "find-target-indices-after-sorting-array", "has_notes": false, "flag_type": 1}, {"id": 1360479002, "question_id": 2215, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 2\u00c2\u00a0hours", "timestamp": 1723997849, "status": 14, "status_display": "Time Limit Exceeded", "runtime": "N/A", "url": "/submissions/detail/1360479002/", "is_pending": "Not Pending", "title": "Finding 3-Digit Even Numbers", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    vector<int> findEvenNumbers(vector<int>& digits) {\n        vector<int> result;\n        sort(digits.begin(), digits.end());\n        do {\n            if (digits[0] == 0) continue;\n            if (digits[2] % 2 == 0) {\n                int num = digits[0] * 100 + digits[1] * 10 + digits[2];\n                if (find(result.begin(), result.end(), num) == result.end()) {\n                    result.push_back(num);\n                }\n            }\n        } while (next_permutation(digits.begin(), digits.end()));\n        sort(result.begin(), result.end());\n        return result;\n    }\n};\n", "compare_result": "1111111111111111111100000000000000000000000000000000000000000000000000000000000", "title_slug": "finding-3-digit-even-numbers", "has_notes": false, "flag_type": 1}, {"id": 1360478742, "question_id": 2219, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 2\u00c2\u00a0hours", "timestamp": 1723997833, "status": 10, "status_display": "Accepted", "runtime": "14 ms", "url": "/submissions/detail/1360478742/", "is_pending": "Not Pending", "title": "Maximum Number of Words Found in Sentences", "memory": "14.7 MB", "code": "\nclass Solution {\npublic:\n    int mostWordsFound(vector<string>& sentences) {\n        int maxWords = 0;\n        for (string sentence : sentences) {\n            int wordCount = 0;\n            stringstream ss(sentence);\n            string word;\n            while (ss >> word) {\n                wordCount++;\n            }\n            maxWords = max(maxWords, wordCount);\n        }\n        return maxWords;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "maximum-number-of-words-found-in-sentences", "has_notes": false, "flag_type": 1}, {"id": 1360478478, "question_id": 2226, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 2\u00c2\u00a0hours", "timestamp": 1723997817, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360478478/", "is_pending": "Not Pending", "title": "Rings and Rods", "memory": "8.3 MB", "code": "\nclass Solution {\npublic:\n    int countPoints(string rings) {\n        vector<unordered_set<char>> rods(10);\n        for (int i = 0; i < rings.size(); i += 2) {\n            rods[rings[i + 1] - '0'].insert(rings[i]);\n        }\n        int count = 0;\n        for (auto &rod : rods) {\n            if (rod.size() == 3) {\n                count++;\n            }\n        }\n        return count;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "rings-and-rods", "has_notes": false, "flag_type": 1}, {"id": 1360478244, "question_id": 2231, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 2\u00c2\u00a0hours", "timestamp": 1723997802, "status": 10, "status_display": "Accepted", "runtime": "60 ms", "url": "/submissions/detail/1360478244/", "is_pending": "Not Pending", "title": "Find First Palindromic String in the Array", "memory": "30.3 MB", "code": "\nclass Solution {\npublic:\n    string firstPalindrome(vector<string>& words) {\n        for (string word : words) {\n            string reversed_word = word;\n            reverse(reversed_word.begin(), reversed_word.end());\n            if (word == reversed_word) {\n                return word;\n            }\n        }\n        return \"\";\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "find-first-palindromic-string-in-the-array", "has_notes": false, "flag_type": 1}, {"id": 1360478032, "question_id": 2235, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 2\u00c2\u00a0hours", "timestamp": 1723997789, "status": 10, "status_display": "Accepted", "runtime": "2 ms", "url": "/submissions/detail/1360478032/", "is_pending": "Not Pending", "title": "Capitalize the Title", "memory": "8.7 MB", "code": "\nclass Solution {\npublic:\n    string capitalizeTitle(string title) {\n        stringstream ss(title);\n        string word, result = \"\";\n        while (ss >> word) {\n            if (word.size() <= 2) {\n                transform(word.begin(), word.end(), word.begin(), ::tolower);\n            } else {\n                transform(word.begin(), word.end(), word.begin(), ::tolower);\n                word[0] = toupper(word[0]);\n            }\n            result += word + \" \";\n        }\n        result.pop_back(); // remove the last space\n        return result;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "capitalize-the-title", "has_notes": false, "flag_type": 1}, {"id": 1360477810, "question_id": 2238, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 2\u00c2\u00a0hours", "timestamp": 1723997774, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360477810/", "is_pending": "Not Pending", "title": "A Number After a Double Reversal", "memory": "7.3 MB", "code": "\nclass Solution {\npublic:\n    bool isSameAfterReversals(int num) {\n        int reversed1 = 0;\n        int temp = num;\n        while(temp > 0) {\n            reversed1 = reversed1 * 10 + temp % 10;\n            temp /= 10;\n        }\n        int reversed2 = 0;\n        temp = reversed1;\n        while(temp > 0) {\n            reversed2 = reversed2 * 10 + temp % 10;\n            temp /= 10;\n        }\n        return reversed2 == num;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "a-number-after-a-double-reversal", "has_notes": false, "flag_type": 1}, {"id": 1360477577, "question_id": 2243, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 2\u00c2\u00a0hours", "timestamp": 1723997759, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360477577/", "is_pending": "Not Pending", "title": "Check if All A's Appears Before All B's", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    bool checkString(string s) {\n        int lastA = -1;\n        for(int i = 0; i < s.length(); i++) {\n            if(s[i] == 'a') {\n                lastA = i;\n            } else if(s[i] == 'b' && lastA > i) {\n                return false;\n            }\n        }\n        return true;\n    }\n};\n", "compare_result": "101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001110110010001", "title_slug": "check-if-all-as-appears-before-all-bs", "has_notes": false, "flag_type": 1}, {"id": 1360477326, "question_id": 2248, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 2\u00c2\u00a0hours", "timestamp": 1723997744, "status": 10, "status_display": "Accepted", "runtime": "8 ms", "url": "/submissions/detail/1360477326/", "is_pending": "Not Pending", "title": "Minimum Cost of Buying Candies With Discount", "memory": "13.6 MB", "code": "\nclass Solution {\npublic:\n    int minimumCost(vector<int>& cost) {\n        sort(cost.begin(), cost.end());\n        int total = 0, n = cost.size();\n        for (int i = n - 1; i >= 0; i -= 2) {\n            total += cost[i];\n            if (i - 1 >= 0) total += cost[i - 1];\n            if (i - 2 >= 0) i--;\n        }\n        return total;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "minimum-cost-of-buying-candies-with-discount", "has_notes": false, "flag_type": 1}, {"id": 1360477069, "question_id": 2254, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 2\u00c2\u00a0hours", "timestamp": 1723997729, "status": 10, "status_display": "Accepted", "runtime": "89 ms", "url": "/submissions/detail/1360477069/", "is_pending": "Not Pending", "title": "Check if Every Row and Column Contains All Numbers", "memory": "39.4 MB", "code": "\nclass Solution {\npublic:\n    bool checkValid(vector<vector<int>>& matrix) {\n        int n = matrix.size();\n        for(int i = 0; i < n; i++) {\n            vector<bool> row(n+1, false);\n            vector<bool> col(n+1, false);\n            for(int j = 0; j < n; j++) {\n                if(row[matrix[i][j]] || col[matrix[j][i]]) {\n                    return false;\n                }\n                row[matrix[i][j]] = true;\n                col[matrix[j][i]] = true;\n            }\n        }\n        return true;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "check-if-every-row-and-column-contains-all-numbers", "has_notes": false, "flag_type": 1}, {"id": 1360476821, "question_id": 2260, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 2\u00c2\u00a0hours", "timestamp": 1723997714, "status": 10, "status_display": "Accepted", "runtime": "4 ms", "url": "/submissions/detail/1360476821/", "is_pending": "Not Pending", "title": "Divide a String Into Groups of Size k", "memory": "8.8 MB", "code": "\nclass Solution {\npublic:\n    vector<string> divideString(string s, int k, char fill) {\n        vector<string> result;\n        int n = s.size();\n        for(int i = 0; i < n; i += k) {\n            string group = s.substr(i, k);\n            while(group.size() < k) {\n                group += fill;\n            }\n            result.push_back(group);\n        }\n        return result;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "divide-a-string-into-groups-of-size-k", "has_notes": false, "flag_type": 1}, {"id": 1360476560, "question_id": 2264, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 2\u00c2\u00a0hours", "timestamp": 1723997699, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360476560/", "is_pending": "Not Pending", "title": "Minimum Sum of Four Digit Number After Splitting Digits", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    int minimumSum(int num) {\n        vector<int> digits(4);\n        for (int i = 0; i < 4; ++i) {\n            digits[i] = num % 10;\n            num /= 10;\n        }\n        sort(digits.begin(), digits.end());\n        return (digits[0] + digits[1] * 10) + (digits[2] + digits[3] * 10);\n    }\n};\n", "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000000100100100100100100100100100", "title_slug": "minimum-sum-of-four-digit-number-after-splitting-digits", "has_notes": false, "flag_type": 1}, {"id": 1360476320, "question_id": 2269, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 2\u00c2\u00a0hours", "timestamp": 1723997685, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360476320/", "is_pending": "Not Pending", "title": "Count Elements With Strictly Smaller and Greater Elements ", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    int countElements(vector<int>& nums) {\n        sort(nums.begin(), nums.end());\n        int count = 0;\n        int left = 0;\n        int right = 1;\n        while (right < nums.size()) {\n            if (nums[left] == nums[right]) {\n                right++;\n            } else if (nums[left] < nums[right]) {\n                if (right - left > 1) {\n                    count += right - left;\n                }\n                left = right;\n                right++;\n            }\n        }\n        return count;\n    }\n};\n", "compare_result": "0100001000000000000000000000000000000000000000000000000000000000000000000000000000000001110100000001110000100000000000000000000", "title_slug": "count-elements-with-strictly-smaller-and-greater-elements", "has_notes": false, "flag_type": 1}, {"id": 1360476020, "question_id": 2274, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 2\u00c2\u00a0hours", "timestamp": 1723997667, "status": 10, "status_display": "Accepted", "runtime": "11 ms", "url": "/submissions/detail/1360476020/", "is_pending": "Not Pending", "title": "Keep Multiplying Found Values by Two", "memory": "16.1 MB", "code": "\nclass Solution {\npublic:\n    int findFinalValue(vector<int>& nums, int original) {\n        unordered_set<int> numSet(nums.begin(), nums.end());\n        while(numSet.find(original) != numSet.end()){\n            original *= 2;\n        }\n        return original;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "keep-multiplying-found-values-by-two", "has_notes": false, "flag_type": 1}, {"id": 1360475803, "question_id": 2277, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 2\u00c2\u00a0hours", "timestamp": 1723997656, "status": 10, "status_display": "Accepted", "runtime": "5 ms", "url": "/submissions/detail/1360475803/", "is_pending": "Not Pending", "title": "Count Equal and Divisible Pairs in an Array", "memory": "14.8 MB", "code": "\nclass Solution {\npublic:\n    int countPairs(vector<int>& nums, int k) {\n        int n = nums.size();\n        int count = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                if(nums[i] == nums[j] && (i * j) % k == 0) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "count-equal-and-divisible-pairs-in-an-array", "has_notes": false, "flag_type": 1}, {"id": 1360475605, "question_id": 2283, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 2\u00c2\u00a0hours", "timestamp": 1723997642, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360475605/", "is_pending": "Not Pending", "title": "Sort Even and Odd Indices Independently", "memory": "15.1 MB", "code": "\nclass Solution {\npublic:\n    vector<int> sortEvenOdd(vector<int>& nums) {\n        vector<int> odd, even;\n        for (int i = 0; i < nums.size(); i++) {\n            if (i % 2 == 0) {\n                even.push_back(nums[i]);\n            } else {\n                odd.push_back(nums[i]);\n            }\n        }\n        sort(odd.begin(), odd.end(), greater<int>());\n        sort(even.begin(), even.end());\n        for (int i = 0, j = 0, k = 0; i < nums.size(); i++) {\n            if (i % 2 == 0) {\n                nums[i] = even[j++];\n            } else {\n                nums[i] = odd[k++];\n            }\n        }\n        return nums;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "sort-even-and-odd-indices-independently", "has_notes": false, "flag_type": 1}, {"id": 1360475275, "question_id": 2288, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 2\u00c2\u00a0hours", "timestamp": 1723997624, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360475275/", "is_pending": "Not Pending", "title": "Count Operations to Obtain Zero", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    int countOperations(int num1, int num2) {\n        int count = 0;\n        while(num1 != 0 && num2 != 0){\n            if(num1 >= num2){\n                num1 = num1 % num2;\n            }else{\n                num2 = num2 % num1;\n            }\n            count++;\n        }\n        return count;\n    }\n};\n", "compare_result": "01000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000001111111110000010100001001000100010010000101000001", "title_slug": "count-operations-to-obtain-zero", "has_notes": false, "flag_type": 1}, {"id": 1360475045, "question_id": 2292, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 2\u00c2\u00a0hours", "timestamp": 1723997610, "status": 10, "status_display": "Accepted", "runtime": "6 ms", "url": "/submissions/detail/1360475045/", "is_pending": "Not Pending", "title": "Counting Words With a Given Prefix", "memory": "13.5 MB", "code": "\nclass Solution {\npublic:\n    int prefixCount(vector<string>& words, string pref) {\n        int count = 0;\n        for(auto& word : words) {\n            if(word.substr(0, pref.size()) == pref) {\n                count++;\n            }\n        }\n        return count;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "counting-words-with-a-given-prefix", "has_notes": false, "flag_type": 1}, {"id": 1360474829, "question_id": 2298, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 2\u00c2\u00a0hours", "timestamp": 1723997596, "status": 10, "status_display": "Accepted", "runtime": "2 ms", "url": "/submissions/detail/1360474829/", "is_pending": "Not Pending", "title": "Count Integers With Even Digit Sum", "memory": "7.5 MB", "code": "\nclass Solution {\npublic:\n    int countEven(int num) {\n        int count = 0;\n        for(int i = 1; i <= num; i++) {\n            int sum = 0;\n            int temp = i;\n            while(temp > 0) {\n                sum += temp % 10;\n                temp /= 10;\n            }\n            if(sum % 2 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "count-integers-with-even-digit-sum", "has_notes": false, "flag_type": 1}, {"id": 1360474590, "question_id": 2304, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 2\u00c2\u00a0hours", "timestamp": 1723997581, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1360474590/", "is_pending": "Not Pending", "title": "Cells in a Range on an Excel Sheet", "memory": "11.7 MB", "code": "\nclass Solution {\npublic:\n    vector<string> cellsInRange(string s) {\n        vector<string> result;\n        int startCol = s[0] - 'A' + 1;\n        int endCol = s[3] - 'A' + 1;\n        int startRow = s[1] - '0';\n        int endRow = s[4] - '0';\n        \n        for (int i = startCol; i <= endCol; ++i) {\n            for (int j = startRow; j <= endRow; ++j) {\n                string cell = \"\";\n                cell += (i + 'A' - 1);\n                cell += to_string(j);\n                result.push_back(cell);\n            }\n        }\n        return result;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "cells-in-a-range-on-an-excel-sheet", "has_notes": false, "flag_type": 1}, {"id": 1360474355, "question_id": 2308, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 2\u00c2\u00a0hours", "timestamp": 1723997565, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360474355/", "is_pending": "Not Pending", "title": "Divide Array Into Equal Pairs", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    bool canDivideIntoSubsequences(vector<int>& nums) {\n        unordered_map<int, int> count;\n        int maxCount = 0;\n        for (int num : nums) {\n            maxCount = max(maxCount, ++count[num]);\n        }\n        return maxCount <= nums.size() / 2;\n    }\n};\n", "compare_result": null, "title_slug": "divide-array-into-equal-pairs", "has_notes": false, "flag_type": 1}, {"id": 1360474133, "question_id": 2312, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 2\u00c2\u00a0hours", "timestamp": 1723997551, "status": 10, "status_display": "Accepted", "runtime": "4 ms", "url": "/submissions/detail/1360474133/", "is_pending": "Not Pending", "title": "Most Frequent Number Following Key In an Array", "memory": "16.3 MB", "code": "\nclass Solution {\npublic:\n    int mostFrequent(vector<int>& nums, int key) {\n        unordered_map<int, int> count;\n        int maxCount = 0, maxTarget = 0;\n        for (int i = 0; i < nums.size() - 1; ++i) {\n            if (nums[i] == key) {\n                count[nums[i + 1]]++;\n                if (count[nums[i + 1]] > maxCount) {\n                    maxCount = count[nums[i + 1]];\n                    maxTarget = nums[i + 1];\n                }\n            }\n        }\n        return maxTarget;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "most-frequent-number-following-key-in-an-array", "has_notes": false, "flag_type": 1}, {"id": 1360473912, "question_id": 2316, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 2\u00c2\u00a0hours", "timestamp": 1723997537, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360473912/", "is_pending": "Not Pending", "title": "Count Hills and Valleys in an Array", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    int countHillValley(vector<int>& nums) {\n        int n = nums.size();\n        vector<int> left(n), right(n);\n        left[0] = nums[0];\n        right[n-1] = nums[n-1];\n        for(int i=1; i<n; i++) {\n            left[i] = max(left[i-1], nums[i]);\n            right[n-i-1] = max(right[n-i], nums[n-i-1]);\n        }\n        int count = 0;\n        for(int i=1; i<n-1; i++) {\n            if(nums[i] > nums[i-1] && nums[i] > nums[i+1] && nums[i] > left[i-1] && nums[i] > right[i+1]) {\n                count++;\n                if(i<n-2 && nums[i] == nums[i+1]) {\n                    i++;\n                }\n            }\n            else if(nums[i] < nums[i-1] && nums[i] < nums[i+1] && nums[i] < left[i-1] && nums[i] < right[i+1]) {\n                count++;\n                if(i<n-2 && nums[i] == nums[i+1]) {\n                    i++;\n                }\n            }\n        }\n        return count;\n    }\n};\n", "compare_result": "0110000000000000000000000000000000000001010011000010000000100000000000000000000000000000000000011111111111111101100000010", "title_slug": "count-hills-and-valleys-in-an-array", "has_notes": false, "flag_type": 1}, {"id": 1360473595, "question_id": 2320, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 2\u00c2\u00a0hours", "timestamp": 1723997515, "status": 10, "status_display": "Accepted", "runtime": "6 ms", "url": "/submissions/detail/1360473595/", "is_pending": "Not Pending", "title": "Find All K-Distant Indices in an Array", "memory": "13.4 MB", "code": "\nclass Solution {\npublic:\n    vector<int> findKDistantIndices(vector<int>& nums, int key, int k) {\n        vector<int> keyIndices;\n        vector<int> kDistantIndices;\n        for(int i = 0; i < nums.size(); i++) {\n            if(nums[i] == key) {\n                keyIndices.push_back(i);\n            }\n        }\n        for(int i = 0; i < nums.size(); i++) {\n            for(int j = 0; j < keyIndices.size(); j++) {\n                if(abs(i - keyIndices[j]) <= k) {\n                    kDistantIndices.push_back(i);\n                    break;\n                }\n            }\n        }\n        return kDistantIndices;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "find-all-k-distant-indices-in-an-array", "has_notes": false, "flag_type": 1}, {"id": 1360473328, "question_id": 2323, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 2\u00c2\u00a0hours", "timestamp": 1723997497, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1360473328/", "is_pending": "Not Pending", "title": "Minimum Bit Flips to Convert Number", "memory": "7.7 MB", "code": "\nclass Solution {\npublic:\n    int minBitFlips(int start, int goal) {\n        int xor_val = start ^ goal;\n        int count = 0;\n        while (xor_val) {\n            count += xor_val & 1;\n            xor_val >>= 1;\n        }\n        return count;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "minimum-bit-flips-to-convert-number", "has_notes": false, "flag_type": 1}, {"id": 1360473140, "question_id": 2327, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 2\u00c2\u00a0hours", "timestamp": 1723997485, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360473140/", "is_pending": "Not Pending", "title": "Largest Number After Digit Swaps by Parity", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    int largestInteger(int num) {\n        string numStr = to_string(num);\n        vector<int> last(10, -1);\n        for (int i = 0; i < numStr.size(); ++i) {\n            last[numStr[i] - '0'] = i;\n        }\n        for (int i = 0; i < numStr.size(); ++i) {\n            for (int d = 9; d > numStr[i] - '0'; --d) {\n                if (last[d] > i && ((numStr[i] - '0') % 2 == d % 2)) {\n                    swap(numStr[i], numStr[last[d]]);\n                    return stoi(numStr);\n                }\n            }\n        }\n        return num;\n    }\n};\n", "compare_result": "0011111111111111111111111111111111111111111101111111110010111111111111111011110011000001001111011110110100110100000000100010001010010001010001000000001101001000000000000000000000000101010000000000000100000000000000000000101111111111110100", "title_slug": "largest-number-after-digit-swaps-by-parity", "has_notes": false, "flag_type": 1}, {"id": 1360472835, "question_id": 2331, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 2\u00c2\u00a0hours", "timestamp": 1723997466, "status": 10, "status_display": "Accepted", "runtime": "13 ms", "url": "/submissions/detail/1360472835/", "is_pending": "Not Pending", "title": "Intersection of Multiple Arrays", "memory": "18.6 MB", "code": "\nclass Solution {\npublic:\n    vector<int> intersection(vector<vector<int>>& nums) {\n        unordered_map<int, int> count;\n        for (auto& num : nums) {\n            unordered_set<int> unique(num.begin(), num.end());\n            for (auto& n : unique) {\n                count[n]++;\n            }\n        }\n        vector<int> result;\n        for (auto& [k, v] : count) {\n            if (v == nums.size()) {\n                result.push_back(k);\n            }\n        }\n        sort(result.begin(), result.end());\n        return result;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "intersection-of-multiple-arrays", "has_notes": false, "flag_type": 1}, {"id": 1360472563, "question_id": 2337, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 2\u00c2\u00a0hours", "timestamp": 1723997450, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360472563/", "is_pending": "Not Pending", "title": "Remove Digit From Number to Maximize Result", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    string removeDigit(string number, char digit) {\n        int n = number.size();\n        for (int i = 0; i < n - 1; ++i) {\n            if (number[i] == digit && number[i] < number[i + 1]) {\n                return number.substr(0, i) + number.substr(i + 1);\n            }\n            else if (number[i] > number[i + 1]) {\n                return number.substr(0, i) + number.substr(i + 1);\n            }\n        }\n        return number.substr(0, n - 1);\n    }\n};\n", "compare_result": "1111111101100011101010111111110010001101101000101110100001000011010010101000010000001000000001111111111111111110", "title_slug": "remove-digit-from-number-to-maximize-result", "has_notes": false, "flag_type": 1}, {"id": 1360472349, "question_id": 2341, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 2\u00c2\u00a0hours", "timestamp": 1723997434, "status": 10, "status_display": "Accepted", "runtime": "8 ms", "url": "/submissions/detail/1360472349/", "is_pending": "Not Pending", "title": "Count Prefixes of a Given String", "memory": "15.7 MB", "code": "\nclass Solution {\npublic:\n    int countPrefixes(vector<string>& words, string s) {\n        int count = 0;\n        for (auto& word : words) {\n            if (s.substr(0, word.size()) == word) {\n                count++;\n            }\n        }\n        return count;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "count-prefixes-of-a-given-string", "has_notes": false, "flag_type": 1}, {"id": 1360472192, "question_id": 2345, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723997421, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360472192/", "is_pending": "Not Pending", "title": "Minimum Number of Operations to Convert Time", "memory": "8.1 MB", "code": "\nclass Solution {\npublic:\n    int convertTime(string current, string correct) {\n        int currentHour = stoi(current.substr(0, 2));\n        int currentMinute = stoi(current.substr(3, 2));\n        int correctHour = stoi(correct.substr(0, 2));\n        int correctMinute = stoi(correct.substr(3, 2));\n        \n        int totalCurrentMinutes = currentHour * 60 + currentMinute;\n        int totalCorrectMinutes = correctHour * 60 + correctMinute;\n        \n        int diff = totalCorrectMinutes - totalCurrentMinutes;\n        \n        int operations = 0;\n        operations += diff / 60; // 60 minutes operation\n        diff %= 60;\n        operations += diff / 15; // 15 minutes operation\n        diff %= 15;\n        operations += diff / 5; // 5 minutes operation\n        diff %= 5;\n        operations += diff; // 1 minute operation\n        \n        return operations;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "minimum-number-of-operations-to-convert-time", "has_notes": false, "flag_type": 1}, {"id": 1360471898, "question_id": 2346, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723997401, "status": 10, "status_display": "Accepted", "runtime": "4 ms", "url": "/submissions/detail/1360471898/", "is_pending": "Not Pending", "title": "Largest 3-Same-Digit Number in String", "memory": "8.1 MB", "code": "\nclass Solution {\npublic:\n    string largestGoodInteger(string num) {\n        string res = \"\";\n        for (char c = '9'; c >= '0'; c--) {\n            string temp(3, c);\n            if (num.find(temp) != string::npos) {\n                res = temp;\n                break;\n            }\n        }\n        return res;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "largest-3-same-digit-number-in-string", "has_notes": false, "flag_type": 1}, {"id": 1360471669, "question_id": 2350, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723997389, "status": 10, "status_display": "Accepted", "runtime": "19 ms", "url": "/submissions/detail/1360471669/", "is_pending": "Not Pending", "title": "Find Closest Number to Zero", "memory": "22.5 MB", "code": "\nclass Solution {\npublic:\n    int findClosestNumber(vector<int>& nums) {\n        int closest = nums[0];\n        for(int i = 1; i < nums.size(); i++){\n            if(abs(nums[i]) < abs(closest)){\n                closest = nums[i];\n            } else if(abs(nums[i]) == abs(closest)){\n                closest = max(closest, nums[i]);\n            }\n        }\n        return closest;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "find-closest-number-to-zero", "has_notes": false, "flag_type": 1}, {"id": 1360471448, "question_id": 2361, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723997374, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360471448/", "is_pending": "Not Pending", "title": "Calculate Digit Sum of a String", "memory": "8.4 MB", "code": "\nclass Solution {\npublic:\n    string digitSum(string s, int k) {\n        while(s.size() > k){\n            string temp = \"\";\n            for(int i = 0; i < s.size(); i += k){\n                int sum = 0;\n                for(int j = i; j < min(i + k, (int)s.size()); j++){\n                    sum += s[j] - '0';\n                }\n                temp += to_string(sum);\n            }\n            s = temp;\n        }\n        return s;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "calculate-digit-sum-of-a-string", "has_notes": false, "flag_type": 1}, {"id": 1360471185, "question_id": 2365, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723997357, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360471185/", "is_pending": "Not Pending", "title": "Percentage of Letter in String", "memory": "7.7 MB", "code": "\nclass Solution {\npublic:\n    int percentageLetter(string s, char letter) {\n        int count = 0;\n        for (char c : s) {\n            if (c == letter) {\n                count++;\n            }\n        }\n        return (count * 100) / s.length();\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "percentage-of-letter-in-string", "has_notes": false, "flag_type": 1}, {"id": 1360470939, "question_id": 2372, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723997341, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1360470939/", "is_pending": "Not Pending", "title": "Rearrange Characters to Make Target String", "memory": "7.9 MB", "code": "\nclass Solution {\npublic:\n    int rearrangeCharacters(string s, string target) {\n        vector<int> count_s(26, 0), count_target(26, 0);\n        for (char c : s) {\n            count_s[c - 'a']++;\n        }\n        for (char c : target) {\n            count_target[c - 'a']++;\n        }\n        int max_copies = INT_MAX;\n        for (int i = 0; i < 26; i++) {\n            if (count_target[i] > 0) {\n                max_copies = min(max_copies, count_s[i] / count_target[i]);\n            }\n        }\n        return max_copies;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "rearrange-characters-to-make-target-string", "has_notes": false, "flag_type": 1}, {"id": 1360470701, "question_id": 2377, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723997326, "status": 10, "status_display": "Accepted", "runtime": "4 ms", "url": "/submissions/detail/1360470701/", "is_pending": "Not Pending", "title": "Check if Number Has Equal Digit Count and Digit Value", "memory": "7.8 MB", "code": "\nclass Solution {\npublic:\n    bool digitCount(string num) {\n        vector<int> count(10, 0);\n        for (char c : num) {\n            count[c - '0']++;\n        }\n        for (int i = 0; i < num.size(); i++) {\n            if (count[i] != num[i] - '0') {\n                return false;\n            }\n        }\n        return true;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "check-if-number-has-equal-digit-count-and-digit-value", "has_notes": false, "flag_type": 1}, {"id": 1360470480, "question_id": 2383, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723997312, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360470480/", "is_pending": "Not Pending", "title": "Add Two Integers", "memory": "7.5 MB", "code": "\nclass Solution {\npublic:\n    int sum(int num1, int num2) {\n        return num1 + num2;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "add-two-integers", "has_notes": false, "flag_type": 1}, {"id": 1360470314, "question_id": 2384, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723997301, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1360470314/", "is_pending": "Not Pending", "title": "Root Equals Sum of Children", "memory": "14.7 MB", "code": "\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool checkTree(TreeNode* root) {\n        if(root == nullptr) return false;\n        int leftVal = root->left ? root->left->val : 0;\n        int rightVal = root->right ? root->right->val : 0;\n        return root->val == leftVal + rightVal;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "root-equals-sum-of-children", "has_notes": false, "flag_type": 1}, {"id": 1360470069, "question_id": 2386, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723997285, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1360470069/", "is_pending": "Not Pending", "title": "Min Max Game", "memory": "12.5 MB", "code": "\nclass Solution {\npublic:\n    int minMaxGame(vector<int>& nums) {\n        while(nums.size() > 1) {\n            vector<int> newNums;\n            for(int i = 0; i < nums.size(); i += 2) {\n                if(i % 4 == 0) {\n                    newNums.push_back(min(nums[i], nums[i+1]));\n                } else {\n                    newNums.push_back(max(nums[i], nums[i+1]));\n                }\n            }\n            nums = newNums;\n        }\n        return nums[0];\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "min-max-game", "has_notes": false, "flag_type": 1}, {"id": 1360469821, "question_id": 2391, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723997268, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360469821/", "is_pending": "Not Pending", "title": "Strong Password Checker II", "memory": "7.6 MB", "code": "\nclass Solution {\npublic:\n    bool strongPasswordCheckerII(string password) {\n        if(password.size() < 8) return false;\n        \n        bool hasLower = false, hasUpper = false, hasDigit = false, hasSpecial = false;\n        for(int i = 0; i < password.size(); i++){\n            if(islower(password[i])) hasLower = true;\n            if(isupper(password[i])) hasUpper = true;\n            if(isdigit(password[i])) hasDigit = true;\n            if(password[i] == '!' || password[i] == '@' || password[i] == '#' || password[i] == '$' || password[i] == '%' || password[i] == '^' || password[i] == '&' || password[i] == '*' || password[i] == '(' || password[i] == ')' || password[i] == '-' || password[i] == '+') hasSpecial = true;\n            if(i > 0 && password[i] == password[i-1]) return false;\n        }\n        \n        return hasLower && hasUpper && hasDigit && hasSpecial;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "strong-password-checker-ii", "has_notes": false, "flag_type": 1}, {"id": 1360469532, "question_id": 2398, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723997248, "status": 10, "status_display": "Accepted", "runtime": "29 ms", "url": "/submissions/detail/1360469532/", "is_pending": "Not Pending", "title": "Check if Matrix Is X-Matrix", "memory": "19.1 MB", "code": "\nclass Solution {\npublic:\n    bool checkXMatrix(vector<vector<int>>& grid) {\n        int n = grid.size();\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < n; j++) {\n                if(i != j && i != n - j - 1 && grid[i][j] != 0) {\n                    return false;\n                }\n                if((i == j || i == n - j - 1) && grid[i][j] == 0) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "check-if-matrix-is-x-matrix", "has_notes": false, "flag_type": 1}, {"id": 1360469286, "question_id": 2401, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723997232, "status": 10, "status_display": "Accepted", "runtime": "4 ms", "url": "/submissions/detail/1360469286/", "is_pending": "Not Pending", "title": "Count Asterisks", "memory": "7.9 MB", "code": "\nclass Solution {\npublic:\n    int countAsterisks(string s) {\n        int count = 0;\n        bool inside = false;\n        for (char c : s) {\n            if (c == '|') {\n                inside = !inside;\n            } else if (c == '*' && !inside) {\n                count++;\n            }\n        }\n        return count;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "count-asterisks", "has_notes": false, "flag_type": 1}, {"id": 1360469079, "question_id": 2406, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723997219, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360469079/", "is_pending": "Not Pending", "title": "Decode the Message", "memory": "9.7 MB", "code": "\nclass Solution {\npublic:\n    string decodeMessage(string key, string message) {\n        unordered_map<char, char> substitutionTable;\n        string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        int index = 0;\n        \n        for (char c : key) {\n            if (c != ' ' && substitutionTable.find(c) == substitutionTable.end()) {\n                substitutionTable[c] = alphabet[index++];\n            }\n        }\n        \n        for (int i = 0; i < message.size(); ++i) {\n            if (message[i] != ' ') {\n                message[i] = substitutionTable[message[i]];\n            }\n        }\n        \n        return message;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "decode-the-message", "has_notes": false, "flag_type": 1}, {"id": 1360468838, "question_id": 2412, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723997203, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360468838/", "is_pending": "Not Pending", "title": "Minimum Amount of Time to Fill Cups", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    int fillCups(vector<int>& amount) {\n        int total = 0;\n        for (int i = 0; i < 3; i++) {\n            total += amount[i];\n        }\n        return (total + 1) / 2;\n    }\n};\n", "compare_result": "1101111111110001011100111100110010110111101111101110011101111111101000111011101101011111011111111110010111001111001100111011001100100100001111111111001001010010001100010011111010010100010011010010110101101110111001001110101111001111100011101011011011000101001101000110010011011111", "title_slug": "minimum-amount-of-time-to-fill-cups", "has_notes": false, "flag_type": 1}, {"id": 1360468565, "question_id": 2416, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723997187, "status": 10, "status_display": "Accepted", "runtime": "8 ms", "url": "/submissions/detail/1360468565/", "is_pending": "Not Pending", "title": "Evaluate Boolean Binary Tree", "memory": "17.7 MB", "code": "\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool evaluateTree(TreeNode* root) {\n        if(root->val == 0) return false;\n        if(root->val == 1) return true;\n        bool left = evaluateTree(root->left);\n        bool right = evaluateTree(root->right);\n        if(root->val == 2) return left || right;\n        if(root->val == 3) return left && right;\n        return false;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "evaluate-boolean-binary-tree", "has_notes": false, "flag_type": 1}, {"id": 1360468265, "question_id": 2421, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723997168, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1360468265/", "is_pending": "Not Pending", "title": "Maximum Number of Pairs in Array", "memory": "11.2 MB", "code": "\nclass Solution {\npublic:\n    vector<int> numberOfPairs(vector<int>& nums) {\n        vector<int> count(101, 0);\n        for (int num : nums) {\n            count[num]++;\n        }\n        int pairs = 0, leftovers = 0;\n        for (int c : count) {\n            pairs += c / 2;\n            leftovers += c % 2;\n        }\n        return {pairs, leftovers};\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "maximum-number-of-pairs-in-array", "has_notes": false, "flag_type": 1}, {"id": 1360468038, "question_id": 2427, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723997153, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1360468038/", "is_pending": "Not Pending", "title": "First Letter to Appear Twice", "memory": "7.6 MB", "code": "\nclass Solution {\npublic:\n    char repeatedCharacter(string s) {\n        vector<int> count(26, -1);\n        int res = INT_MAX;\n        char ans;\n        for(int i = 0; i < s.size(); i++) {\n            if(count[s[i] - 'a'] != -1) {\n                if(i < res) {\n                    res = i;\n                    ans = s[i];\n                }\n            } else {\n                count[s[i] - 'a'] = i;\n            }\n        }\n        return ans;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "first-letter-to-appear-twice", "has_notes": false, "flag_type": 1}, {"id": 1360467799, "question_id": 2433, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723997138, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360467799/", "is_pending": "Not Pending", "title": "Best Poker Hand", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    string bestHand(vector<int>& ranks, vector<char>& suits) {\n        unordered_map<int, int> rankCount;\n        unordered_map<char, int> suitCount;\n        for (int i = 0; i < 5; ++i) {\n            ++rankCount[ranks[i]];\n            ++suitCount[suits[i]];\n        }\n        bool isFlush = false;\n        bool isThreeOfAKind = false;\n        bool isPair = false;\n        for (auto& count : suitCount) {\n            if (count.second == 5) {\n                isFlush = true;\n                break;\n            }\n        }\n        for (auto& count : rankCount) {\n            if (count.second == 3) {\n                isThreeOfAKind = true;\n            } else if (count.second == 2) {\n                isPair = true;\n            }\n        }\n        if (isFlush) {\n            return \"Flush\";\n        } else if (isThreeOfAKind) {\n            return \"Three of a Kind\";\n        } else if (isPair) {\n            return \"Pair\";\n        } else {\n            return \"High Card\";\n        }\n    }\n};\n", "compare_result": "10111111111111111111111111111111111111111110011111011111111111100111111111111111111111111111111111", "title_slug": "best-poker-hand", "has_notes": false, "flag_type": 1}, {"id": 1360467485, "question_id": 2436, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723997115, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360467485/", "is_pending": "Not Pending", "title": "Make Array Zero by Subtracting Equal Amounts", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    int minimumOperations(vector<int>& nums) {\n        return *min_element(nums.begin(), nums.end());\n    }\n};\n", "compare_result": "01110000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000", "title_slug": "make-array-zero-by-subtracting-equal-amounts", "has_notes": false, "flag_type": 1}, {"id": 1360467306, "question_id": 2442, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723997103, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360467306/", "is_pending": "Not Pending", "title": "Number of Arithmetic Triplets", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    int arithmeticTriplets(vector<int>& nums, int diff) {\n        int n = nums.size();\n        unordered_map<int, int> count;\n        int res = 0;\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < i; ++j) {\n                int need = 2 * nums[j] - nums[i];\n                if (count.count(need)) {\n                    res += count[need];\n                }\n            }\n            ++count[nums[i]];\n        }\n        return res;\n    }\n};\n", "compare_result": "10101111011101011100001111010110001010010101101000011010000001010000000000000000000000000000000000000010", "title_slug": "number-of-arithmetic-triplets", "has_notes": false, "flag_type": 1}, {"id": 1360467074, "question_id": 2447, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723997088, "status": 10, "status_display": "Accepted", "runtime": "19 ms", "url": "/submissions/detail/1360467074/", "is_pending": "Not Pending", "title": "Merge Similar Items", "memory": "20.7 MB", "code": "\nclass Solution {\npublic:\n    vector<vector<int>> mergeSimilarItems(vector<vector<int>>& items1, vector<vector<int>>& items2) {\n        map<int, int> itemsMap;\n        vector<vector<int>> result;\n        \n        for(auto& item : items1) {\n            itemsMap[item[0]] += item[1];\n        }\n        \n        for(auto& item : items2) {\n            itemsMap[item[0]] += item[1];\n        }\n        \n        for(auto& item : itemsMap) {\n            result.push_back({item.first, item.second});\n        }\n        \n        return result;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111", "title_slug": "merge-similar-items", "has_notes": false, "flag_type": 1}, {"id": 1360466804, "question_id": 2454, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723997070, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1360466804/", "is_pending": "Not Pending", "title": "Largest Local Values in a Matrix", "memory": "13.7 MB", "code": "\nclass Solution {\npublic:\n    vector<vector<int>> largestLocal(vector<vector<int>>& grid) {\n        int n = grid.size();\n        vector<vector<int>> maxLocal(n - 2, vector<int>(n - 2, 0));\n        for (int i = 1; i < n - 1; i++) {\n            for (int j = 1; j < n - 1; j++) {\n                int maxVal = grid[i - 1][j - 1];\n                for (int dx = -1; dx <= 1; dx++) {\n                    for (int dy = -1; dy <= 1; dy++) {\n                        maxVal = max(maxVal, grid[i + dx][j + dy]);\n                    }\n                }\n                maxLocal[i - 1][j - 1] = maxVal;\n            }\n        }\n        return maxLocal;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111", "title_slug": "largest-local-values-in-a-matrix", "has_notes": false, "flag_type": 1}, {"id": 1360466499, "question_id": 2459, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723997051, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360466499/", "is_pending": "Not Pending", "title": "Minimum Hours of Training to Win a Competition", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    int minNumberOfHours(int initialEnergy, int initialExperience, vector<int>& energy, vector<int>& experience) {\n        int n = energy.size();\n        vector<pair<int, int>> opponents(n);\n        for (int i = 0; i < n; ++i) {\n            opponents[i] = {energy[i], experience[i]};\n        }\n        sort(opponents.begin(), opponents.end());\n        vector<vector<int>> dp(n + 1, vector<int>(101, INT_MAX));\n        dp[0][initialExperience] = 0;\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j <= 100; ++j) {\n                if (dp[i][j] == INT_MAX) continue;\n                for (int k = max(j, opponents[i].second); k <= 100; ++k) {\n                    int energyNeeded = max(0, opponents[i].first - initialEnergy - dp[i][j]);\n                    dp[i + 1][k] = min(dp[i + 1][k], dp[i][j] + energyNeeded);\n                }\n            }\n        }\n        int minHours = INT_MAX;\n        for (int i = 0; i <= 100; ++i) {\n            minHours = min(minHours, dp[n][i]);\n        }\n        return minHours;\n    }\n};\n", "compare_result": "010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000", "title_slug": "minimum-hours-of-training-to-win-a-competition", "has_notes": false, "flag_type": 1}, {"id": 1360465973, "question_id": 2463, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723997020, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360465973/", "is_pending": "Not Pending", "title": "Minimum Recolors to Get K Consecutive Black Blocks", "memory": "8.1 MB", "code": "\nclass Solution {\npublic:\n    int minimumRecolors(string blocks, int k) {\n        int n = blocks.size();\n        vector<int> prefix(n+1, 0);\n        for(int i = 1; i <= n; i++) {\n            prefix[i] = prefix[i-1] + (blocks[i-1] == 'B' ? 1 : 0);\n        }\n        int ans = INT_MAX;\n        for(int i = 0; i <= n-k; i++) {\n            ans = min(ans, k - (prefix[i+k] - prefix[i]));\n        }\n        return ans;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "minimum-recolors-to-get-k-consecutive-black-blocks", "has_notes": false, "flag_type": 1}, {"id": 1360465669, "question_id": 2469, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723997002, "status": 10, "status_display": "Accepted", "runtime": "10 ms", "url": "/submissions/detail/1360465669/", "is_pending": "Not Pending", "title": "Longest Subsequence With Limited Sum", "memory": "16.6 MB", "code": "\nclass Solution {\npublic:\n    vector<int> answerQueries(vector<int>& nums, vector<int>& queries) {\n        sort(nums.begin(), nums.end());\n        vector<int> prefixSum(nums.size() + 1, 0);\n        for (int i = 0; i < nums.size(); ++i) {\n            prefixSum[i + 1] = prefixSum[i] + nums[i];\n        }\n        vector<int> answer(queries.size());\n        for (int i = 0; i < queries.size(); ++i) {\n            int left = 0, right = nums.size();\n            while (left < right) {\n                int mid = left + (right - left + 1) / 2;\n                if (prefixSum[mid] <= queries[i]) {\n                    left = mid;\n                } else {\n                    right = mid - 1;\n                }\n            }\n            answer[i] = left;\n        }\n        return answer;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111", "title_slug": "longest-subsequence-with-limited-sum", "has_notes": false, "flag_type": 1}, {"id": 1360465344, "question_id": 2476, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723996983, "status": 10, "status_display": "Accepted", "runtime": "10 ms", "url": "/submissions/detail/1360465344/", "is_pending": "Not Pending", "title": "Check Distances Between Same Letters", "memory": "16.1 MB", "code": "\nclass Solution {\npublic:\n    bool checkDistances(string s, vector<int>& distance) {\n        vector<int> last(26, -1);\n        for (int i = 0; i < s.size(); ++i) {\n            int idx = s[i] - 'a';\n            if (last[idx] != -1 && i - last[idx] - 1 != distance[idx]) {\n                return false;\n            }\n            last[idx] = i;\n        }\n        return true;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "check-distances-between-same-letters", "has_notes": false, "flag_type": 1}, {"id": 1360465067, "question_id": 2480, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723996967, "status": 10, "status_display": "Accepted", "runtime": "5 ms", "url": "/submissions/detail/1360465067/", "is_pending": "Not Pending", "title": "Find Subarrays With Equal Sum", "memory": "10 MB", "code": "\nclass Solution {\npublic:\n    bool findSubarrays(vector<int>& nums) {\n        unordered_map<int, int> sumMap;\n        for (int i = 0; i < nums.size() - 1; ++i) {\n            int sum = nums[i] + nums[i + 1];\n            if (sumMap.count(sum)) {\n                return true;\n            }\n            sumMap[sum] = i;\n        }\n        return false;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111", "title_slug": "find-subarrays-with-equal-sum", "has_notes": false, "flag_type": 1}, {"id": 1360464825, "question_id": 2486, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723996951, "status": 10, "status_display": "Accepted", "runtime": "48 ms", "url": "/submissions/detail/1360464825/", "is_pending": "Not Pending", "title": "Most Frequent Even Element", "memory": "42 MB", "code": "\nclass Solution {\npublic:\n    int mostFrequentEven(vector<int>& nums) {\n        unordered_map<int, int> count;\n        for (int num : nums) {\n            if (num % 2 == 0) {\n                count[num]++;\n            }\n        }\n        int maxCount = 0;\n        int res = -1;\n        for (auto& [num, cnt] : count) {\n            if (cnt > maxCount || (cnt == maxCount && num < res)) {\n                maxCount = cnt;\n                res = num;\n            }\n        }\n        return res;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "most-frequent-even-element", "has_notes": false, "flag_type": 1}, {"id": 1360464508, "question_id": 2491, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723996932, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1360464508/", "is_pending": "Not Pending", "title": "Smallest Even Multiple", "memory": "7.3 MB", "code": "\nclass Solution {\npublic:\n    int smallestEvenMultiple(int n) {\n        if(n % 2 == 0) {\n            return n;\n        } else {\n            return 2 * n;\n        }\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "smallest-even-multiple", "has_notes": false, "flag_type": 1}, {"id": 1360464299, "question_id": 2495, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723996919, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360464299/", "is_pending": "Not Pending", "title": "Number of Unique Subjects Taught by Each Teacher", "memory": "N/A", "code": "sql\nSELECT teacher_id, COUNT(DISTINCT subject_id) as cnt\nFROM Teacher\nGROUP BY teacher_id;\n", "compare_result": null, "title_slug": "number-of-unique-subjects-taught-by-each-teacher", "has_notes": false, "flag_type": 1}, {"id": 1360464071, "question_id": 2496, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723996903, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1360464071/", "is_pending": "Not Pending", "title": "Count Days Spent Together", "memory": "7.7 MB", "code": "\nclass Solution {\npublic:\n    int countDaysTogether(string arriveAlice, string leaveAlice, string arriveBob, string leaveBob) {\n        vector<int> daysInMonth = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n        auto convert = [&](string date) {\n            int month = stoi(date.substr(0, 2));\n            int day = stoi(date.substr(3, 2));\n            for (int i = 1; i < month; ++i) {\n                day += daysInMonth[i];\n            }\n            return day;\n        };\n        int arriveAliceDay = convert(arriveAlice);\n        int leaveAliceDay = convert(leaveAlice);\n        int arriveBobDay = convert(arriveBob);\n        int leaveBobDay = convert(leaveBob);\n        int start = max(arriveAliceDay, arriveBobDay);\n        int end = min(leaveAliceDay, leaveBobDay);\n        return max(0, end - start + 1);\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111", "title_slug": "count-days-spent-together", "has_notes": false, "flag_type": 1}, {"id": 1360463729, "question_id": 2502, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723996881, "status": 10, "status_display": "Accepted", "runtime": "25 ms", "url": "/submissions/detail/1360463729/", "is_pending": "Not Pending", "title": "Sort the People", "memory": "30.4 MB", "code": "\nclass Solution {\npublic:\n    vector<string> sortPeople(vector<string>& names, vector<int>& heights) {\n        vector<pair<int, string>> people;\n        for (int i = 0; i < names.size(); i++) {\n            people.push_back({heights[i], names[i]});\n        }\n        sort(people.rbegin(), people.rend());\n        vector<string> result;\n        for (auto& person : people) {\n            result.push_back(person.second);\n        }\n        return result;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "sort-the-people", "has_notes": false, "flag_type": 1}, {"id": 1360463496, "question_id": 2507, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723996867, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360463496/", "is_pending": "Not Pending", "title": "Number of Common Factors", "memory": "7.4 MB", "code": "\nclass Solution {\npublic:\n    int commonFactors(int a, int b) {\n        int count = 0;\n        for (int i = 1; i <= min(a, b); i++) {\n            if (a % i == 0 && b % i == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "number-of-common-factors", "has_notes": false, "flag_type": 1}, {"id": 1360463280, "question_id": 2518, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723996852, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360463280/", "is_pending": "Not Pending", "title": "The Employee That Worked on the Longest Task", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    int hardestWorker(int n, vector<vector<int>>& logs) {\n        vector<int> workTime(n, 0);\n        int prevTime = 0;\n        for (auto& log : logs) {\n            workTime[log[0]] += log[1] - prevTime;\n            prevTime = log[1];\n        }\n        int maxTime = 0, hardestWorkerId = 0;\n        for (int i = 0; i < n; ++i) {\n            if (workTime[i] > maxTime) {\n                maxTime = workTime[i];\n                hardestWorkerId = i;\n            }\n        }\n        return hardestWorkerId;\n    }\n};\n", "compare_result": "0111111101111111101111111111101110011011101000111110111001100110110001101011000001000001000011100000110011100111000011011110100011010100000101101001000101100000001111001110101110000001011000100100010100100011100010001110111011001110111001110000111011001101100110101000101110110110010100000111000000011001100000010000001010010100101000011100010110110100100010001100011000001000011001110110001000111100000000000010110001001010000010010000101111011011111111001110010100100001011111010110000001010101000111000001100001", "title_slug": "the-employee-that-worked-on-the-longest-task", "has_notes": false, "flag_type": 1}, {"id": 1360462988, "question_id": 2524, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723996832, "status": 10, "status_display": "Accepted", "runtime": "8 ms", "url": "/submissions/detail/1360462988/", "is_pending": "Not Pending", "title": "Largest Positive Integer That Exists With Its Negative", "memory": "27.3 MB", "code": "\nclass Solution {\npublic:\n    int findMaxK(vector<int>& nums) {\n        unordered_set<int> s(nums.begin(), nums.end());\n        int maxK = -1;\n        for (int num : nums) {\n            if (num > 0 && s.count(-num)) {\n                maxK = max(maxK, num);\n            }\n        }\n        return maxK;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "largest-positive-integer-that-exists-with-its-negative", "has_notes": false, "flag_type": 1}, {"id": 1360462746, "question_id": 2528, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723996817, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360462746/", "is_pending": "Not Pending", "title": "Number of Valid Clock Times", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    int countTime(string time) {\n        int count = 1;\n        if(time[0] == '?'){\n            count *= (time[1] <= '3' || time[1] == '?') ? 3 : 2;\n        }\n        if(time[1] == '?'){\n            count *= (time[0] == '2') ? 4 : 10;\n        }\n        if(time[3] == '?'){\n            count *= 6;\n        }\n        if(time[4] == '?'){\n            count *= 10;\n        }\n        return count;\n    }\n};\n", "compare_result": "11011111110111101111011111111011101111101110110110111", "title_slug": "number-of-valid-clock-times", "has_notes": false, "flag_type": 1}, {"id": 1360462452, "question_id": 2532, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723996798, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360462452/", "is_pending": "Not Pending", "title": "Remove Letter To Equalize Frequency", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    bool equalFrequency(string word) {\n        vector<int> freq(26, 0);\n        for (char c : word) {\n            freq[c - 'a']++;\n        }\n        sort(freq.begin(), freq.end());\n        int i = 0;\n        while (freq[i] == 0) {\n            i++;\n        }\n        if (freq[i] == freq[25]) {\n            return true;\n        }\n        if (freq[i] == 1 && freq[i + 1] == freq[25]) {\n            return true;\n        }\n        if (freq[i] == freq[24] && freq[25] - freq[24] == 1) {\n            return true;\n        }\n        return false;\n    }\n};\n", "compare_result": "10111111111111111111111111111111111111011111111111", "title_slug": "remove-letter-to-equalize-frequency", "has_notes": false, "flag_type": 1}, {"id": 1360462115, "question_id": 2536, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723996778, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360462115/", "is_pending": "Not Pending", "title": "Determine if Two Events Have Conflict", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    bool haveConflict(vector<string>& event1, vector<string>& event2) {\n        int start1 = stoi(event1[0].substr(0, 2)) * 60 + stoi(event1[0].substr(3, 2));\n        int end1 = stoi(event1[1].substr(0, 2)) * 60 + stoi(event1[1].substr(3, 2));\n        int start2 = stoi(event2[0].substr(0, 2)) * 60 + stoi(event2[0].substr(3, 2));\n        int end2 = stoi(event2[1].substr(0, 2)) * 60 + stoi(event2[1].substr(3, 2));\n        \n        return !(end1 <= start2 || end2 <= start1);\n    }\n};\n", "compare_result": "011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111101111111111110101111111111111111111111", "title_slug": "determine-if-two-events-have-conflict", "has_notes": false, "flag_type": 1}, {"id": 1360461870, "question_id": 2542, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723996761, "status": 10, "status_display": "Accepted", "runtime": "6 ms", "url": "/submissions/detail/1360461870/", "is_pending": "Not Pending", "title": "Average Value of Even Numbers That Are Divisible by Three", "memory": "16.2 MB", "code": "\nclass Solution {\npublic:\n    int averageValue(vector<int>& nums) {\n        int sum = 0;\n        int count = 0;\n        for(int i = 0; i < nums.size(); i++) {\n            if(nums[i] % 2 == 0 && nums[i] % 3 == 0) {\n                sum += nums[i];\n                count++;\n            }\n        }\n        if(count == 0) {\n            return 0;\n        }\n        return sum / count;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "average-value-of-even-numbers-that-are-divisible-by-three", "has_notes": false, "flag_type": 1}, {"id": 1360461629, "question_id": 2547, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723996746, "status": 10, "status_display": "Accepted", "runtime": "2 ms", "url": "/submissions/detail/1360461629/", "is_pending": "Not Pending", "title": "Odd String Difference", "memory": "11.6 MB", "code": "\nclass Solution {\npublic:\n    string oddString(vector<string>& words) {\n        unordered_map<string, int> count;\n        for (string& word : words) {\n            string diff;\n            for (int i = 1; i < word.size(); ++i) {\n                diff += to_string((word[i] - word[i - 1] + 26) % 26) + \",\";\n            }\n            ++count[diff];\n        }\n        for (string& word : words) {\n            string diff;\n            for (int i = 1; i < word.size(); ++i) {\n                diff += to_string((word[i] - word[i - 1] + 26) % 26) + \",\";\n            }\n            if (count[diff] == 1) {\n                return word;\n            }\n        }\n        return \"\";\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111", "title_slug": "odd-string-difference", "has_notes": false, "flag_type": 1}, {"id": 1360461380, "question_id": 2551, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723996729, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360461380/", "is_pending": "Not Pending", "title": "Apply Operations to an Array", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    vector<int> applyOperations(vector<int>& nums) {\n        int n = nums.size();\n        for(int i = 0; i < n - 1; i++) {\n            if(nums[i] == nums[i + 1]) {\n                nums[i] *= 2;\n                nums[i + 1] = 0;\n            }\n        }\n        int zeroCount = count(nums.begin(), nums.end(), 0);\n        vector<int> result(n - zeroCount, 0);\n        copy_if(nums.begin(), nums.end(), back_inserter(result), [](int x){return x != 0;});\n        result.insert(result.end(), zeroCount, 0);\n        return result;\n    }\n};\n", "compare_result": "000000000000000000000000000000001000", "title_slug": "apply-operations-to-an-array", "has_notes": false, "flag_type": 1}, {"id": 1360461122, "question_id": 2556, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723996713, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1360461122/", "is_pending": "Not Pending", "title": "Convert the Temperature", "memory": "8 MB", "code": "\nclass Solution {\npublic:\n    vector<double> convertTemperature(double celsius) {\n        double kelvin = celsius + 273.15;\n        double fahrenheit = celsius * 1.80 + 32.00;\n        return {kelvin, fahrenheit};\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "convert-the-temperature", "has_notes": false, "flag_type": 1}, {"id": 1360460947, "question_id": 2561, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723996701, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360460947/", "is_pending": "Not Pending", "title": "Number of Distinct Averages", "memory": "8.8 MB", "code": "\nclass Solution {\npublic:\n    int distinctAverages(vector<int>& nums) {\n        sort(nums.begin(), nums.end());\n        set<double> averages;\n        while (!nums.empty()) {\n            double minNum = nums[0];\n            double maxNum = nums[nums.size() - 1];\n            averages.insert((minNum + maxNum) / 2);\n            nums.erase(nums.begin());\n            nums.pop_back();\n        }\n        return averages.size();\n    }\n};\n", "compare_result": "111111111111111111111111111111111111", "title_slug": "number-of-distinct-averages", "has_notes": false, "flag_type": 1}, {"id": 1360460720, "question_id": 2566, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723996686, "status": 10, "status_display": "Accepted", "runtime": "12 ms", "url": "/submissions/detail/1360460720/", "is_pending": "Not Pending", "title": "Number of Unequal Triplets in Array", "memory": "10.5 MB", "code": "\nclass Solution {\npublic:\n    int unequalTriplets(vector<int>& nums) {\n        int count = 0;\n        for(int i = 0; i < nums.size(); i++) {\n            for(int j = i + 1; j < nums.size(); j++) {\n                for(int k = j + 1; k < nums.size(); k++) {\n                    if(nums[i] != nums[j] && nums[i] != nums[k] && nums[j] != nums[k]) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "number-of-unequal-triplets-in-array", "has_notes": false, "flag_type": 1}, {"id": 1360460467, "question_id": 2571, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723996671, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360460467/", "is_pending": "Not Pending", "title": "Find the Pivot Integer", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    int pivotInteger(int n) {\n        int totalSum = n * (n + 1) / 2;\n        int leftSum = 0;\n        for (int i = 1; i <= n; ++i) {\n            leftSum += i;\n            if (leftSum == totalSum - leftSum) {\n                return i;\n            }\n        }\n        return -1;\n    }\n};\n", "compare_result": "00110101111111111111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110111111111111111111111111111111111111111111111111111111111111111111110", "title_slug": "find-the-pivot-integer", "has_notes": false, "flag_type": 1}, {"id": 1360460200, "question_id": 2575, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723996656, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360460200/", "is_pending": "Not Pending", "title": "Minimum Cuts to Divide a Circle", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    int numberOfCuts(int n) {\n        if(n == 1) return 0;\n        else if(n == 2) return 1;\n        else return n;\n    }\n};\n", "compare_result": "0111101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010", "title_slug": "minimum-cuts-to-divide-a-circle", "has_notes": false, "flag_type": 1}, {"id": 1360460016, "question_id": 2580, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723996642, "status": 10, "status_display": "Accepted", "runtime": "6 ms", "url": "/submissions/detail/1360460016/", "is_pending": "Not Pending", "title": "Circular Sentence", "memory": "8.9 MB", "code": "\nclass Solution {\npublic:\n    bool isCircularSentence(string sentence) {\n        stringstream ss(sentence);\n        string word, prev;\n        while (ss >> word) {\n            if (!prev.empty() && prev.back() != word.front()) {\n                return false;\n            }\n            prev = word;\n        }\n        return sentence.front() == word.back();\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "circular-sentence", "has_notes": false, "flag_type": 1}, {"id": 1360459821, "question_id": 2585, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723996630, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360459821/", "is_pending": "Not Pending", "title": "Delete Greatest Value in Each Row", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    int deleteGreatestValue(vector<vector<int>>& grid) {\n        int m = grid.size();\n        int n = grid[0].size();\n        int ans = 0;\n        priority_queue<pair<int, pair<int, int>>> pq;\n        for(int i = 0; i < m; i++) {\n            int max_val = *max_element(grid[i].begin(), grid[i].end());\n            pq.push({max_val, {i, max_val}});\n        }\n        while(!pq.empty()) {\n            pair<int, pair<int, int>> p = pq.top();\n            pq.pop();\n            ans += p.first;\n            int row = p.second.first;\n            int val = p.second.second;\n            auto it = find(grid[row].begin(), grid[row].end(), val);\n            if(it != grid[row].end()) {\n                grid[row].erase(it);\n                if(!grid[row].empty()) {\n                    int max_val = *max_element(grid[row].begin(), grid[row].end());\n                    pq.push({max_val, {row, max_val}});\n                }\n            }\n        }\n        return ans;\n    }\n};\n", "compare_result": "0100000000000000000000000000000000000000000000011100001", "title_slug": "delete-greatest-value-in-each-row", "has_notes": false, "flag_type": 1}, {"id": 1360459467, "question_id": 2589, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723996607, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360459467/", "is_pending": "Not Pending", "title": "Maximum Value of a String in an Array", "memory": "9.9 MB", "code": "\nclass Solution {\npublic:\n    int maximumValue(vector<string>& strs) {\n        int max_value = 0;\n        for (string str : strs) {\n            bool is_digit = true;\n            for (char c : str) {\n                if (!isdigit(c)) {\n                    is_digit = false;\n                    break;\n                }\n            }\n            if (is_digit) {\n                max_value = max(max_value, stoi(str));\n            } else {\n                max_value = max(max_value, (int)str.size());\n            }\n        }\n        return max_value;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111", "title_slug": "maximum-value-of-a-string-in-an-array", "has_notes": false, "flag_type": 1}, {"id": 1360459226, "question_id": 2594, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723996592, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360459226/", "is_pending": "Not Pending", "title": "Count Pairs Of Similar Strings", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    int similarPairs(vector<string>& words) {\n        int count = 0;\n        for(int i = 0; i < words.size(); i++) {\n            for(int j = i+1; j < words.size(); j++) {\n                if(isSimilar(words[i], words[j])) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    \n    bool isSimilar(string& s1, string& s2) {\n        vector<int> count1(26, 0), count2(26, 0);\n        for(char c : s1) {\n            count1[c - 'a']++;\n        }\n        for(char c : s2) {\n            count2[c - 'a']++;\n        }\n        return count1 == count2;\n    }\n};\n", "compare_result": "001000000000000000000000001000000000000000000000000001111111111111111111111111111111111111111111111111111111110111111111101111111011110111111110110111111000000000000000000000000000000000000000000000000001111111111000000000101", "title_slug": "count-pairs-of-similar-strings", "has_notes": false, "flag_type": 1}, {"id": 1360458970, "question_id": 2598, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723996575, "status": 10, "status_display": "Accepted", "runtime": "30 ms", "url": "/submissions/detail/1360458970/", "is_pending": "Not Pending", "title": "Shortest Distance to Target String in a Circular Array", "memory": "18.4 MB", "code": "\nclass Solution {\npublic:\n    int closetTarget(vector<string>& words, string target, int startIndex) {\n        int n = words.size();\n        int left = startIndex, right = startIndex;\n        int leftSteps = 0, rightSteps = 0;\n        \n        while (true) {\n            if (words[left] == target) return leftSteps;\n            if (words[right] == target) return rightSteps;\n            \n            left = (left - 1 + n) % n;\n            right = (right + 1) % n;\n            leftSteps++;\n            rightSteps++;\n            \n            if (leftSteps >= n && rightSteps >= n) return -1;\n        }\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "shortest-distance-to-target-string-in-a-circular-array", "has_notes": false, "flag_type": 1}, {"id": 1360458713, "question_id": 2602, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723996558, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360458713/", "is_pending": "Not Pending", "title": "Maximum Enemy Forts That Can Be Captured", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    int captureForts(vector<int>& forts) {\n        int n = forts.size();\n        vector<int> prefix(n, 0), suffix(n, 0);\n        int cnt = 0;\n        for (int i = 0; i < n; ++i) {\n            if (forts[i] == 0) {\n                prefix[i] = cnt;\n            } else if (forts[i] == 1) {\n                cnt = 0;\n            }\n        }\n        cnt = 0;\n        for (int i = n - 1; i >= 0; --i) {\n            if (forts[i] == 0) {\n                suffix[i] = cnt;\n            } else if (forts[i] == 1) {\n                cnt = 0;\n            }\n        }\n        int maxForts = 0;\n        for (int i = 0; i < n; ++i) {\n            if (forts[i] == 1) {\n                maxForts = max(maxForts, prefix[i] + suffix[i]);\n            }\n        }\n        return maxForts;\n    }\n};\n", "compare_result": "010001101000001110010101100000111111111001100", "title_slug": "maximum-enemy-forts-that-can-be-captured", "has_notes": false, "flag_type": 1}, {"id": 1360458412, "question_id": 2608, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723996540, "status": 10, "status_display": "Accepted", "runtime": "2 ms", "url": "/submissions/detail/1360458412/", "is_pending": "Not Pending", "title": "Count the Digits That Divide a Number", "memory": "7.5 MB", "code": "\nclass Solution {\npublic:\n    int countDigits(int num) {\n        int temp = num;\n        int count = 0;\n        while(temp > 0){\n            int digit = temp % 10;\n            if(num % digit == 0){\n                count++;\n            }\n            temp /= 10;\n        }\n        return count;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111", "title_slug": "count-the-digits-that-divide-a-number", "has_notes": false, "flag_type": 1}, {"id": 1360458222, "question_id": 2614, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723996527, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360458222/", "is_pending": "Not Pending", "title": "Maximum Count of Positive Integer and Negative Integer", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    int maximumCount(vector<int>& nums) {\n        int n = nums.size();\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int mid = l + (r - l) / 2;\n            if (nums[mid] < 0)\n                l = mid + 1;\n            else\n                r = mid - 1;\n        }\n        int pos = n - l;\n        int neg = n - pos;\n        return max(pos, neg);\n    }\n};\n", "compare_result": "10111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111011111111101111111111101110101111101101111111111011111111111011111101100", "title_slug": "maximum-count-of-positive-integer-and-negative-integer", "has_notes": false, "flag_type": 1}, {"id": 1360457940, "question_id": 2619, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723996510, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360457940/", "is_pending": "Not Pending", "title": "Categorize Box According to Criteria", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    string categorizeBox(int length, int width, int height, int mass) {\n        long long volume = (long long)length * width * height;\n        bool isBulky = length >= 104 || width >= 104 || height >= 104 || volume >= 1e9;\n        bool isHeavy = mass >= 100;\n        \n        if (isBulky && isHeavy) {\n            return \"Both\";\n        } else if (isBulky) {\n            return \"Bulky\";\n        } else if (isHeavy) {\n            return \"Heavy\";\n        } else {\n            return \"Neither\";\n        }\n    }\n};\n", "compare_result": "00111111100001101111111111111111111111111111111111", "title_slug": "categorize-box-according-to-criteria", "has_notes": false, "flag_type": 1}, {"id": 1360457692, "question_id": 2624, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723996494, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1360457692/", "is_pending": "Not Pending", "title": "Difference Between Element Sum and Digit Sum of an Array", "memory": "18.4 MB", "code": "\nclass Solution {\npublic:\n    int differenceOfSum(vector<int>& nums) {\n        int elementSum = 0, digitSum = 0;\n        for (int num : nums) {\n            elementSum += num;\n            while (num) {\n                digitSum += num % 10;\n                num /= 10;\n            }\n        }\n        return abs(elementSum - digitSum);\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "difference-between-element-sum-and-digit-sum-of-an-array", "has_notes": false, "flag_type": 1}, {"id": 1360457465, "question_id": 2630, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723996480, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360457465/", "is_pending": "Not Pending", "title": "Alternating Digit Sum", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    int alternateDigitSum(int n) {\n        int sum = 0;\n        int sign = 1;\n        while (n > 0) {\n            int digit = n % 10;\n            sum += sign * digit;\n            sign *= -1;\n            n /= 10;\n        }\n        return sum;\n    }\n};\n", "compare_result": "1111111010101000000000011111101110000000100111101111111111111010000000000111111111100000000011111111110101000000110101", "title_slug": "alternating-digit-sum", "has_notes": false, "flag_type": 1}, {"id": 1360457264, "question_id": 2634, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723996467, "status": 10, "status_display": "Accepted", "runtime": "75 ms", "url": "/submissions/detail/1360457264/", "is_pending": "Not Pending", "title": "Minimum Common Value", "memory": "53.3 MB", "code": "\nclass Solution {\npublic:\n    int getCommon(vector<int>& nums1, vector<int>& nums2) {\n        int i = 0, j = 0;\n        while(i < nums1.size() && j < nums2.size()){\n            if(nums1[i] == nums2[j]){\n                return nums1[i];\n            }\n            else if(nums1[i] < nums2[j]){\n                i++;\n            }\n            else{\n                j++;\n            }\n        }\n        return -1;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111", "title_slug": "minimum-common-value", "has_notes": false, "flag_type": 1}, {"id": 1360457052, "question_id": 2639, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723996452, "status": 10, "status_display": "Accepted", "runtime": "12 ms", "url": "/submissions/detail/1360457052/", "is_pending": "Not Pending", "title": "Separate the Digits in an Array", "memory": "14.7 MB", "code": "\nclass Solution {\npublic:\n    vector<int> separateDigits(vector<int>& nums) {\n        vector<int> result;\n        for(int num : nums) {\n            vector<int> digits;\n            while(num) {\n                digits.push_back(num % 10);\n                num /= 10;\n            }\n            reverse(digits.begin(), digits.end());\n            result.insert(result.end(), digits.begin(), digits.end());\n        }\n        return result;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111", "title_slug": "separate-the-digits-in-an-array", "has_notes": false, "flag_type": 1}, {"id": 1360456845, "question_id": 2645, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723996438, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360456845/", "is_pending": "Not Pending", "title": "Pass the Pillow", "memory": "7.4 MB", "code": "\nclass Solution {\npublic:\n    int passThePillow(int n, int time) {\n        int direction = 1;\n        int current = 1;\n        for(int i = 0; i < time; i++) {\n            current += direction;\n            if(current == n + 1 || current == 0) {\n                direction *= -1;\n                current += 2 * direction;\n            }\n        }\n        return current;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "pass-the-pillow", "has_notes": false, "flag_type": 1}, {"id": 1360456640, "question_id": 2650, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723996425, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360456640/", "is_pending": "Not Pending", "title": "Split With Minimum Sum", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    int splitNum(int num) {\n        vector<int> count(10, 0);\n        while (num > 0) {\n            count[num % 10]++;\n            num /= 10;\n        }\n        int num1 = 0, num2 = 0, tens = 1;\n        for (int i = 0; i < 10; ++i) {\n            while (count[i]-- > 0) {\n                if (num1 <= num2) {\n                    num1 += i * tens;\n                } else {\n                    num2 += i * tens;\n                }\n                tens *= 10;\n            }\n        }\n        return num1 + num2;\n    }\n};\n", "compare_result": "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "title_slug": "split-with-minimum-sum", "has_notes": false, "flag_type": 1}, {"id": 1360456316, "question_id": 2654, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723996407, "status": 10, "status_display": "Accepted", "runtime": "19 ms", "url": "/submissions/detail/1360456316/", "is_pending": "Not Pending", "title": "Count the Number of Vowel Strings in Range", "memory": "36.6 MB", "code": "\nclass Solution {\npublic:\n    int vowelStrings(vector<string>& words, int left, int right) {\n        int count = 0;\n        for(int i = left; i <= right; i++) {\n            if(isVowel(words[i][0]) && isVowel(words[i][words[i].size()-1])) {\n                count++;\n            }\n        }\n        return count;\n    }\n    \n    bool isVowel(char c) {\n        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';\n    }\n};\n", "compare_resulttitle_slug": "count-the-number-of-vowel-strings-in-range", "has_notes": false, "flag_type": 1}, {"id": 1360456042, "question_id": 2659, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723996390, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360456042/", "is_pending": "Not Pending", "title": "Number of Even and Odd Bits", "memory": "9 MB", "code": "\nclass Solution {\npublic:\n    vector<int> evenOddBit(int n) {\n        vector<int> result(2, 0);\n        int index = 0;\n        while(n > 0) {\n            if(n & 1) {\n                if(index % 2 == 0) {\n                    result[0]++;\n                } else {\n                    result[1]++;\n                }\n            }\n            n >>= 1;\n            index++;\n        }\n        return result;\n    }\n};\n", "compare_resulttitle_slug": "number-of-even-and-odd-bits", "has_notes": false, "flag_type": 1}, {"id": 1360455748, "question_id": 2663, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723996373, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360455748/", "is_pending": "Not Pending", "title": "Distribute Money to Maximum Children", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    int distMoney(int money, int children) {\n        if (money < children || money > 9 * children) {\n            return -1;\n        }\n        int max_eight = min(money - children, children);\n        if (max_eight >= 4) {\n            return max_eight;\n        }\n        return max_eight - 1;\n    }\n};\n", "compare_resulttitle_slug": "distribute-money-to-maximum-children", "has_notes": false, "flag_type": 1}, {"id": 1360455536, "question_id": 2668, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723996359, "status": 10, "status_display": "Accepted", "runtime": "6 ms", "url": "/submissions/detail/1360455536/", "is_pending": "Not Pending", "title": "Form Smallest Number From Two Digit Arrays", "memory": "24.3 MB", "code": "\nclass Solution {\npublic:\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\n        sort(nums1.begin(), nums1.end());\n        sort(nums2.begin(), nums2.end());\n        for(int i=0; i<nums1.size(); i++){\n            for(int j=0; j<nums2.size(); j++){\n                if(nums1[i] == nums2[j])\n                    return nums1[i];\n            }\n        }\n        return min(nums1[0]*10 + nums2[0], nums2[0]*10 + nums1[0]);\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "form-smallest-number-from-two-digit-arrays", "has_notes": false, "flag_type": 1}, {"id": 1360455270, "question_id": 2675, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723996343, "status": 10, "status_display": "Accepted", "runtime": "19 ms", "url": "/submissions/detail/1360455270/", "is_pending": "Not Pending", "title": "Find the Width of Columns of a Grid", "memory": "15.2 MB", "code": "\nclass Solution {\npublic:\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\n        int m = grid.size();\n        int n = grid[0].size();\n        vector<int> ans(n, 0);\n        for(int i = 0; i < m; i++) {\n            for(int j = 0; j < n; j++) {\n                int len = to_string(abs(grid[i][j])).length();\n                if(grid[i][j] < 0) len++;\n                ans[j] = max(ans[j], len);\n            }\n        }\n        return ans;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111", "title_slug": "find-the-width-of-columns-of-a-grid", "has_notes": false, "flag_type": 1}, {"id": 1360455028, "question_id": 2679, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723996328, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360455028/", "is_pending": "Not Pending", "title": "Count Distinct Numbers on Board", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    int distinctIntegers(int n) {\n        if(n == 1) return 1;\n        else return 2;\n    }\n};\n", "compare_result": "0110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "title_slug": "count-distinct-numbers-on-board", "has_notes": false, "flag_type": 1}, {"id": 1360454838, "question_id": 2684, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723996315, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360454838/", "is_pending": "Not Pending", "title": "Determine the Winner of a Bowling Game", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    int isWinner(vector<int>& player1, vector<int>& player2) {\n        int n = player1.size();\n        vector<int> score1(n), score2(n);\n        \n        for(int i = 0; i < n; i++) {\n            if(i > 1 && (player1[i-1] == 10 || player1[i-2] == 10)) {\n                score1[i] = 2 * player1[i];\n            } else {\n                score1[i] = player1[i];\n            }\n            \n            if(i > 1 && (player2[i-1] == 10 || player2[i-2] == 10)) {\n                score2[i] = 2 * player2[i];\n            } else {\n                score2[i] = player2[i];\n            }\n        }\n        \n        int totalScore1 = accumulate(score1.begin(), score1.end(), 0);\n        int totalScore2 = accumulate(score2.begin(), score2.end(), 0);\n        \n        if(totalScore1 > totalScore2) {\n            return 1;\n        } else if(totalScore1 < totalScore2) {\n            return 2;\n        } else {\n            return 0;\n        }\n    }\n};\n", "compare_resulttitle_slug": "determine-the-winner-of-a-bowling-game", "has_notes": false, "flag_type": 1}, {"id": 1360454507, "question_id": 2692, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723996294, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1360454507/", "is_pending": "Not Pending", "title": "Take Gifts From the Richest Pile", "memory": "13.4 MB", "code": "\nclass Solution {\npublic:\n    long long pickGifts(vector<int>& gifts, int k) {\n        priority_queue<int> pq(gifts.begin(), gifts.end());\n        while(k--) {\n            int top = pq.top();\n            pq.pop();\n            pq.push(floor(sqrt(top)));\n        }\n        long long sum = 0;\n        while(!pq.empty()) {\n            sum += pq.top();\n            pq.pop();\n        }\n        return sum;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "take-gifts-from-the-richest-pile", "has_notes": false, "flag_type": 1}, {"id": 1360454277, "question_id": 2694, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723996279, "status": 10, "status_display": "Accepted", "runtime": "294 ms", "url": "/submissions/detail/1360454277/", "is_pending": "Not Pending", "title": "Find the Maximum Divisibility Score", "memory": "32.8 MB", "code": "\nclass Solution {\npublic:\n    int maxDivScore(vector<int>& nums, vector<int>& divisors) {\n        int maxScore = 0;\n        int minDivisor = INT_MAX;\n        for (int i = 0; i < divisors.size(); i++) {\n            int score = 0;\n            for (int j = 0; j < nums.size(); j++) {\n                if (nums[j] % divisors[i] == 0) {\n                    score++;\n                }\n            }\n            if (score > maxScore) {\n                maxScore = score;\n                minDivisor = divisors[i];\n            } else if (score == maxScore) {\n                minDivisor = min(minDivisor, divisors[i]);\n            }\n        }\n        return minDivisor;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "find-the-maximum-divisibility-score", "has_notes": false, "flag_type": 1}, {"id": 1360454032, "question_id": 2698, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723996262, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360454032/", "is_pending": "Not Pending", "title": "Find the Array Concatenation Value", "memory": "14 MB", "code": "\nclass Solution {\npublic:\n    long long findTheArrayConcVal(vector<int>& nums) {\n        long long res = 0;\n        while (!nums.empty()) {\n            if (nums.size() == 1) {\n                res += nums[0];\n                nums.erase(nums.begin());\n            } else {\n                string first = to_string(nums[0]);\n                string last = to_string(nums[nums.size() - 1]);\n                res += stoll(first + last);\n                nums.erase(nums.begin());\n                nums.erase(nums.begin() + nums.size() - 1);\n            }\n        }\n        return res;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111", "title_slug": "find-the-array-concatenation-value", "has_notes": false, "flag_type": 1}, {"id": 1360453808, "question_id": 2704, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723996247, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360453808/", "is_pending": "Not Pending", "title": "Maximum Difference by Remapping a Digit", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    int minMaxDifference(int num) {\n        string str = to_string(num);\n        char minDigit = *min_element(str.begin(), str.end());\n        char maxDigit = *max_element(str.begin(), str.end());\n        string minStr = str, maxStr = str;\n        replace(minStr.begin(), minStr.end(), minDigit, '0');\n        replace(maxStr.begin(), maxStr.end(), maxDigit, '9');\n        return stoi(maxStr) - stoi(minStr);\n    }\n};\n", "compare_result": "0011010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011", "title_slug": "maximum-difference-by-remapping-a-digit", "has_notes": false, "flag_type": 1}, {"id": 1360453580, "question_id": 2707, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723996232, "status": 10, "status_display": "Accepted", "runtime": "8 ms", "url": "/submissions/detail/1360453580/", "is_pending": "Not Pending", "title": "Merge Two 2D Arrays by Summing Values", "memory": "14.6 MB", "code": "\nclass Solution {\npublic:\n    vector<vector<int>> mergeArrays(vector<vector<int>>& nums1, vector<vector<int>>& nums2) {\n        map<int, int> m;\n        for(auto &v : nums1) m[v[0]] += v[1];\n        for(auto &v : nums2) m[v[0]] += v[1];\n        vector<vector<int>> res;\n        for(auto &p : m) res.push_back({p.first, p.second});\n        return res;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111", "title_slug": "merge-two-2d-arrays-by-summing-values", "has_notes": false, "flag_type": 1}, {"id": 1360453384, "question_id": 2714, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723996219, "status": 10, "status_display": "Accepted", "runtime": "4 ms", "url": "/submissions/detail/1360453384/", "is_pending": "Not Pending", "title": "Left and Right Sum Differences", "memory": "13.8 MB", "code": "\nclass Solution {\npublic:\n    vector<int> leftRightDifference(vector<int>& nums) {\n        int n = nums.size();\n        vector<int> leftSum(n, 0), rightSum(n, 0), answer(n, 0);\n        \n        // Calculate leftSum\n        for(int i = 1; i < n; i++) {\n            leftSum[i] = leftSum[i-1] + nums[i-1];\n        }\n        \n        // Calculate rightSum\n        for(int i = n-2; i >= 0; i--) {\n            rightSum[i] = rightSum[i+1] + nums[i+1];\n        }\n        \n        // Calculate answer\n        for(int i = 0; i < n; i++) {\n            answer[i] = abs(leftSum[i] - rightSum[i]);\n        }\n        \n        return answer;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111", "title_slug": "left-and-right-sum-differences", "has_notes": false, "flag_type": 1}, {"id": 1360453133, "question_id": 2715, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723996202, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360453133/", "is_pending": "Not Pending", "title": "K Items With the Maximum Sum", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    int kItemsWithMaximumSum(int numOnes, int numZeros, int numNegOnes, int k) {\n        int dp[101][101] = {0};\n        for (int i = 0; i <= numOnes; ++i) {\n            for (int j = 0; j <= numNegOnes; ++j) {\n                for (int k = max(0, i + j - numZeros); k <= i + j; ++k) {\n                    if (i > 0) dp[i][j] = max(dp[i][j], (k > 0 ? dp[i - 1][j] + 1 : dp[i - 1][j]));\n                    if (j > 0) dp[i][j] = max(dp[i][j], (k > 0 ? dp[i][j - 1] - 1 : dp[i][j - 1]));\n                }\n            }\n        }\n        return dp[numOnes][numNegOnes];\n    }\n};\n", "compare_resulttitle_slug": "k-items-with-the-maximum-sum", "has_notes": false, "flag_type": 1}, {"id": 1360452841, "question_id": 2722, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723996183, "status": 10, "status_display": "Accepted", "runtime": "73 ms", "url": "/submissions/detail/1360452841/", "is_pending": "Not Pending", "title": "Prime In Diagonal", "memory": "38.5 MB", "code": "\nclass Solution {\npublic:\n    bool isPrime(int n) {\n        if (n <= 1) return false;\n        if (n == 2) return true;\n        if (n % 2 == 0) return false;\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n\n    int diagonalPrime(vector<vector<int>>& nums) {\n        int n = nums.size();\n        int maxPrime = 0;\n        for (int i = 0; i < n; ++i) {\n            if (isPrime(nums[i][i])) maxPrime = max(maxPrime, nums[i][i]);\n            if (isPrime(nums[i][n - i - 1])) maxPrime = max(maxPrime, nums[i][n - i - 1]);\n        }\n        return maxPrime;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "prime-in-diagonal", "has_notes": false, "flag_type": 1}, {"id": 1360452547, "question_id": 2723, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723996163, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360452547/", "is_pending": "Not Pending", "title": "Find the Longest Balanced Substring of a Binary String", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    int findTheLongestBalancedSubstring(string s) {\n        int n = s.size();\n        vector<int> dp(n+1, 0);\n        unordered_map<int, int> m;\n        m[0] = -1;\n        int sum = 0;\n        int res = 0;\n        for(int i = 0; i < n; i++){\n            sum += (s[i] == '0' ? -1 : 1);\n            if(m.count(sum)){\n                res = max(res, i - m[sum]);\n            }else{\n                m[sum] = i;\n            }\n        }\n        return res;\n    }\n};\n", "compare_resulttitle_slug": "find-the-longest-balanced-substring-of-a-binary-string", "has_notes": false, "flag_type": 1}, {"id": 1360452305, "question_id": 2727, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723996147, "status": 10, "status_display": "Accepted", "runtime": "8 ms", "url": "/submissions/detail/1360452305/", "is_pending": "Not Pending", "title": "Number of Senior Citizens", "memory": "17.7 MB", "code": "\nclass Solution {\npublic:\n    int countSeniors(vector<string>& details) {\n        int count = 0;\n        for(auto& detail : details) {\n            int age = stoi(detail.substr(11, 2));\n            if(age > 60) {\n                count++;\n            }\n        }\n        return count;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "number-of-senior-citizens", "has_notes": false, "flag_type": 1}, {"id": 1360452122, "question_id": 2732, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723996134, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360452122/", "is_pending": "Not Pending", "title": "Counter", "memory": "N/A", "code": "\nclass Counter {\npublic:\n    Counter(int n) {\n        this->n = n;\n    }\n    \n    int increment() {\n        return n++;\n    }\nprivate:\n    int n;\n};\n\n/**\n * Your Counter object will be instantiated and called as such:\n * Counter* obj = new Counter(n);\n * int param_1 = obj->increment();\n */\n", "compare_result": null, "title_slug": "counter", "has_notes": false, "flag_type": 1}, {"id": 1360451886, "question_id": 2733, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723996120, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360451886/", "is_pending": "Not Pending", "title": "Sleep", "memory": "N/A", "code": "\n#include <iostream>\n#include <chrono>\n#include <thread>\n\nvoid sleep(int millis) {\n    std::this_thread::sleep_for(std::chrono::milliseconds(millis));\n}\n\nint main() {\n    auto start = std::chrono::high_resolution_clock::now();\n    sleep(100);\n    auto end = std::chrono::high_resolution_clock::now();\n    std::chrono::duration<double, std::milli> elapsed = end-start;\n    std::cout << elapsed.count() << std::endl;\n    return 0;\n}\n", "compare_result": null, "title_slug": "sleep", "has_notes": false, "flag_type": 1}, {"id": 1360451634, "question_id": 2734, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723996103, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360451634/", "is_pending": "Not Pending", "title": "Array Prototype Last", "memory": "N/A", "code": "\n#include <vector>\n\ntemplate<typename T>\nT lastElement(std::vector<T>& arr) {\n    if(arr.empty()) {\n        return -1;\n    }\n    return arr.back();\n}\n", "compare_result": null, "title_slug": "array-prototype-last", "has_notes": false, "flag_type": 1}, {"id": 1360451395, "question_id": 2737, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723996089, "status": 10, "status_display": "Accepted", "runtime": "114 ms", "url": "/submissions/detail/1360451395/", "is_pending": "Not Pending", "title": "Row With Maximum Ones", "memory": "65 MB", "code": "\nclass Solution {\npublic:\n    vector<int> rowAndMaximumOnes(vector<vector<int>>& mat) {\n        int maxCount = 0;\n        int maxRow = 0;\n        for(int i = 0; i < mat.size(); i++) {\n            int count = 0;\n            for(int j = 0; j < mat[i].size(); j++) {\n                if(mat[i][j] == 1) {\n                    count++;\n                }\n            }\n            if(count > maxCount) {\n                maxCount = count;\n                maxRow = i;\n            }\n        }\n        return {maxRow, maxCount};\n    }\n};\n", "compare_resulttitle_slug": "row-with-maximum-ones", "has_notes": false, "flag_type": 1}, {"id": 1360451154, "question_id": 2741, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723996073, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360451154/", "is_pending": "Not Pending", "title": "Function Composition", "memory": "N/A", "code": "\n#include <vector>\n#include <functional>\n\nstd::function<int(int)> compose(const std::vector<std::function<int(int)>>& functions) {\n    return [functions](int x) {\n        for (auto it = functions.rbegin(); it != functions.rend(); ++it) {\n            x = (*it)(x);\n        }\n        return x;\n    };\n}\n", "compare_result": null, "title_slug": "function-composition", "has_notes": false, "flag_type": 1}, {"id": 1360450930, "question_id": 2746, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723996059, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360450930/", "is_pending": "Not Pending", "title": "Filter Elements from Array", "memory": "N/A", "code": "\n#include <vector>\n#include <functional>\n\nstd::vector<int> filter(std::vector<int>& arr, std::function<bool(int, int)> fn) {\n    std::vector<int> filteredArr;\n    for(int i = 0; i < arr.size(); i++) {\n        if(fn(arr[i], i)) {\n            filteredArr.push_back(arr[i]);\n        }\n    }\n    return filteredArr;\n}\n", "compare_result": null, "title_slug": "filter-elements-from-array", "has_notes": false, "flag_type": 1}, {"id": 1360450691, "question_id": 2747, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723996044, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360450691/", "is_pending": "Not Pending", "title": "Apply Transform Over Each Element in Array", "memory": "N/A", "code": "\n#include <vector>\n#include <functional>\n\nstd::vector<int> map(const std::vector<int>& arr, std::function<int(int, int)> fn) {\n    std::vector<int> result;\n    for (int i = 0; i < arr.size(); ++i) {\n        result.push_back(fn(arr[i], i));\n    }\n    return result;\n}\n", "compare_result": null, "title_slug": "apply-transform-over-each-element-in-array", "has_notes": false, "flag_type": 1}, {"id": 1360450463, "question_id": 2748, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723996030, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360450463/", "is_pending": "Not Pending", "title": "Calculate Delayed Arrival Time", "memory": "7.9 MB", "code": "\nclass Solution {\npublic:\n    int findDelayedArrivalTime(int arrivalTime, int delayedTime) {\n        int total_time = arrivalTime + delayedTime;\n        if(total_time >= 24) {\n            total_time = total_time % 24;\n        }\n        return total_time;\n    }\n};\n", "compare_resulttitle_slug": "calculate-delayed-arrival-time", "has_notes": false, "flag_type": 1}, {"id": 1360450277, "question_id": 2752, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723996016, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1360450277/", "is_pending": "Not Pending", "title": "Sum Multiples", "memory": "8.1 MB", "code": "\nclass Solution {\npublic:\n    int sumOfMultiples(int n) {\n        int sum = 0;\n        for(int i = 1; i <= n; i++) {\n            if(i % 3 == 0 || i % 5 == 0 || i % 7 == 0) {\n                sum += i;\n            }\n        }\n        return sum;\n    }\n};\n", "compare_resulttitle_slug": "sum-multiples", "has_notes": false, "flag_type": 1}, {"id": 1360450111, "question_id": 2756, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723996004, "status": 10, "status_display": "Accepted", "runtime": "17 ms", "url": "/submissions/detail/1360450111/", "is_pending": "Not Pending", "title": "Buy Two Chocolates", "memory": "51.7 MB", "code": "\nclass Solution {\npublic:\n    int buyChoco(vector<int>& prices, int money) {\n        sort(prices.begin(), prices.end());\n        if(prices[0] + prices[1] > money) return money;\n        return money - prices[0] - prices[1];\n    }\n};\n", "compare_resulttitle_slug": "buy-two-chocolates", "has_notes": false, "flag_type": 1}, {"id": 1360449857, "question_id": 2761, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995987, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360449857/", "is_pending": "Not Pending", "title": "Array Reduce Transformation", "memory": "N/A", "code": "\n#include <vector>\n#include <functional>\n\nint reduce(std::vector<int>& nums, std::function<int(int, int)> fn, int init) {\n    int val = init;\n    for (int num : nums) {\n        val = fn(val, num);\n    }\n    return val;\n}\n", "compare_result": null, "title_slug": "array-reduce-transformation", "has_notes": false, "flag_type": 1}, {"id": 1360449660, "question_id": 2767, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995974, "status": 10, "status_display": "Accepted", "runtime": "57 ms", "url": "/submissions/detail/1360449660/", "is_pending": "Not Pending", "title": "Maximum Sum With Exactly K Elements ", "memory": "77.7 MB", "code": "\nclass Solution {\npublic:\n    int maximizeSum(vector<int>& nums, int k) {\n        priority_queue<int> pq(nums.begin(), nums.end());\n        int sum = 0;\n        while(k--) {\n            int top = pq.top();\n            pq.pop();\n            sum += top;\n            pq.push(top + 1);\n        }\n        return sum;\n    }\n};\n", "compare_resulttitle_slug": "maximum-sum-with-exactly-k-elements", "has_notes": false, "flag_type": 1}, {"id": 1360449441, "question_id": 2775, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995960, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360449441/", "is_pending": "Not Pending", "title": "Generate Fibonacci Sequence", "memory": "N/A", "code": "\n#include <vector>\n\nclass FibGenerator {\npublic:\n    FibGenerator() : a(0), b(1) {}\n\n    int next() {\n        int temp = a;\n        a = b;\n        b = temp + b;\n        return temp;\n    }\n\nprivate:\n    int a, b;\n};\n\nstd::vector<int> fibSequence(int callCount) {\n    std::vector<int> result;\n    FibGenerator gen;\n    for (int i = 0; i < callCount; ++i) {\n        result.push_back(gen.next());\n    }\n    return result;\n}\n", "compare_result": null, "title_slug": "generate-fibonacci-sequence", "has_notes": false, "flag_type": 1}, {"id": 1360449196, "question_id": 2777, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995945, "status": 10, "status_display": "Accepted", "runtime": "36 ms", "url": "/submissions/detail/1360449196/", "is_pending": "Not Pending", "title": "Find the Distinct Difference Array", "memory": "98.3 MB", "code": "\nclass Solution {\npublic:\n    vector<int> distinctDifferenceArray(vector<int>& nums) {\n        int n = nums.size();\n        vector<int> diff(n);\n        unordered_map<int, int> prefix, suffix;\n        for (int i = 0; i < n; ++i) {\n            suffix[nums[i]]++;\n        }\n        for (int i = 0; i < n; ++i) {\n            suffix[nums[i]]--;\n            if (suffix[nums[i]] == 0) {\n                suffix.erase(nums[i]);\n            }\n            prefix[nums[i]]++;\n            diff[i] = prefix.size() - suffix.size();\n        }\n        return diff;\n    }\n};\n", "compare_resulttitle_slug": "find-the-distinct-difference-array", "has_notes": false, "flag_type": 1}, {"id": 1360448945, "question_id": 2785, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995928, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360448945/", "is_pending": "Not Pending", "title": "Semi-Ordered Permutation", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    int semiOrderedPermutation(vector<int>& nums) {\n        int n = nums.size();\n        vector<int> dp(n+1, 0);\n        for(int i=0; i<n; i++){\n            dp[nums[i]] = max(dp[nums[i]], dp[nums[i]-1]+1);\n            for(int j=nums[i]+1; j<=n; j++){\n                dp[j] = max(dp[j], dp[nums[i]]);\n            }\n        }\n        return n - dp[n];\n    }\n};\n", "compare_resulttitle_slug": "semi-ordered-permutation", "has_notes": false, "flag_type": 1}, {"id": 1360448716, "question_id": 2789, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995913, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360448716/", "is_pending": "Not Pending", "title": "Counter II", "memory": "N/A", "code": "\nclass Counter {\npublic:\n    Counter(int init) : value(init), initial(init) {}\n\n    int increment() {\n        return ++value;\n    }\n\n    int decrement() {\n        return --value;\n    }\n\n    int reset() {\n        value = initial;\n        return value;\n    }\n\nprivate:\n    int value;\n    int initial;\n};\n\nvector<int> createCounter(int init, vector<string>& calls) {\n    Counter counter(init);\n    vector<int> results;\n    for (const auto& call : calls) {\n        if (call == \"increment\") {\n            results.push_back(counter.increment());\n        } else if (call == \"decrement\") {\n            results.push_back(counter.decrement());\n        } else if (call == \"reset\") {\n            results.push_back(counter.reset());\n        }\n    }\n    return results;\n}\n", "compare_result": null, "title_slug": "counter-ii", "has_notes": false, "flag_type": 1}, {"id": 1360448445, "question_id": 2791, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995896, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360448445/", "is_pending": "Not Pending", "title": "Find the Losers of the Circular Game", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    vector<int> circularGameLosers(int n, int k) {\n        vector<int> friends(n);\n        for(int i = 0; i < n; i++) {\n            friends[i] = i + 1;\n        }\n        \n        int idx = 0;\n        for(int i = 1; i < n; i++) {\n            idx = (idx + i * k) % friends.size();\n            friends.erase(friends.begin() + idx);\n            if(idx == friends.size()) {\n                idx = 0;\n            }\n        }\n        \n        return friends;\n    }\n};\n", "compare_resulttitle_slug": "find-the-losers-of-the-circular-game", "has_notes": false, "flag_type": 1}, {"id": 1360448181, "question_id": 2796, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995880, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360448181/", "is_pending": "Not Pending", "title": "Allow One Function Call", "memory": "N/A", "code": "\n#include <functional>\n#include <vector>\n\nclass OnceFunction {\npublic:\n    OnceFunction(std::function<int(int, int, int)> fn) : fn_(fn), called_(false) {}\n\n    int operator()(int a, int b, int c) {\n        if (!called_) {\n            called_ = true;\n            return fn_(a, b, c);\n        }\n        return -1; // return -1 or any other value to indicate that the function was already called\n    }\n\nprivate:\n    std::function<int(int, int, int)> fn_;\n    bool called_;\n};\n\nint main() {\n    OnceFunction onceFn([](int a, int b, int c) { return a + b + c; });\n    std::vector<std::vector<int>> calls = {{1, 2, 3}, {2, 3, 6}};\n\n    for (const auto& call : calls) {\n        int result = onceFn(call[0], call[1], call[2]);\n        if (result != -1) {\n            // process result\n        }\n    }\n\n    return 0;\n}\n", "compare_result": null, "title_slug": "allow-one-function-call", "has_notes": false, "flag_type": 1}, {"id": 1360447828, "question_id": 2798, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995858, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360447828/", "is_pending": "Not Pending", "title": "Chunk Array", "memory": "N/A", "code": "\n#include <vector>\n\nstd::vector<std::vector<int>> chunk(std::vector<int>& arr, int size) {\n    std::vector<std::vector<int>> result;\n    for (int i = 0; i < arr.size(); i += size) {\n        std::vector<int> chunk(arr.begin() + i, arr.begin() + std::min(i + size, (int)arr.size()));\n        result.push_back(chunk);\n    }\n    return result;\n}\n", "compare_result": null, "title_slug": "chunk-array", "has_notes": false, "flag_type": 1}, {"id": 1360447578, "question_id": 2800, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995844, "status": 10, "status_display": "Accepted", "runtime": "8 ms", "url": "/submissions/detail/1360447578/", "is_pending": "Not Pending", "title": "Minimum String Length After Removing Substrings", "memory": "11.6 MB", "code": "\nclass Solution {\npublic:\n    int minLength(string s) {\n        stack<char> stk;\n        for (char c : s) {\n            if (!stk.empty() && ((stk.top() == 'A' && c == 'B') || (stk.top() == 'C' && c == 'D'))) {\n                stk.pop();\n            } else {\n                stk.push(c);\n            }\n        }\n        return stk.size();\n    }\n};\n", "compare_resulttitle_slug": "minimum-string-length-after-removing-substrings", "has_notes": false, "flag_type": 1}, {"id": 1360447340, "question_id": 2805, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995829, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360447340/", "is_pending": "Not Pending", "title": "Array Wrapper", "memory": "N/A", "code": "\n#include <vector>\n#include <numeric>\n#include <sstream>\n\nclass ArrayWrapper {\npublic:\n    ArrayWrapper(std::vector<int> nums) : nums(nums) {}\n\n    int valueOf() const {\n        return std::accumulate(nums.begin(), nums.end(), 0);\n    }\n\n    std::string toString() const {\n        std::ostringstream oss;\n        oss << \"[\";\n        for (int i = 0; i < nums.size(); ++i) {\n            oss << nums[i];\n            if (i != nums.size() - 1) {\n                oss << \",\";\n            }\n        }\n        oss << \"]\";\n        return oss.str();\n    }\n\n    friend int operator+(const ArrayWrapper& a, const ArrayWrapper& b) {\n        return a.valueOf() + b.valueOf();\n    }\n\n    friend std::string operator+(const ArrayWrapper& a) {\n        return a.toString();\n    }\n\nprivate:\n    std::vector<int> nums;\n};\n", "compare_result": null, "title_slug": "array-wrapper", "has_notes": false, "flag_type": 1}, {"id": 1360447047, "question_id": 2809, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995811, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360447047/", "is_pending": "Not Pending", "title": "Create Hello World Function", "memory": "N/A", "code": "\n#include <iostream>\n#include <functional>\n\nstd::function<std::string()> createHelloWorld() {\n    return []() -> std::string {\n        return \"Hello World\";\n    };\n}\n\nint main() {\n    auto f = createHelloWorld();\n    std::cout << f() << std::endl; // \"Hello World\"\n    return 0;\n}\n", "compare_result": null, "title_slug": "create-hello-world-function", "has_notes": false, "flag_type": 1}, {"id": 1360446852, "question_id": 2812, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995797, "status": 10, "status_display": "Accepted", "runtime": "6 ms", "url": "/submissions/detail/1360446852/", "is_pending": "Not Pending", "title": "Find the Maximum Achievable Number", "memory": "9.8 MB", "code": "\nclass Solution {\npublic:\n    int theMaximumAchievableX(int num, int t) {\n        return num + 2 * t;\n    }\n};\n", "compare_resulttitle_slug": "find-the-maximum-achievable-number", "has_notes": false, "flag_type": 1}, {"id": 1360446687, "question_id": 2813, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995786, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360446687/", "is_pending": "Not Pending", "title": "To Be Or Not To Be", "memory": "N/A", "code": "\n#include <iostream>\n#include <stdexcept>\n\nclass Expect {\n    int val;\npublic:\n    Expect(int val) : val(val) {}\n\n    bool toBe(int other) {\n        if (val == other) {\n            return true;\n        } else {\n            throw std::runtime_error(\"Not Equal\");\n        }\n    }\n\n    bool notToBe(int other) {\n        if (val != other) {\n            return true;\n        } else {\n            throw std::runtime_error(\"Equal\");\n        }\n    }\n};\n\nExpect expect(int val) {\n    return Expect(val);\n}\n\nint main() {\n    try {\n        std::cout << expect(5).toBe(5) << std::endl; // true\n        std::cout << expect(5).notToBe(5) << std::endl; // throws \"Equal\"\n    } catch (const std::exception& e) {\n        std::cerr << e.what() << std::endl;\n    }\n    return 0;\n}\n", "compare_result": null, "title_slug": "to-be-or-not-to-be", "has_notes": false, "flag_type": 1}, {"id": 1360446412, "question_id": 2816, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995768, "status": 10, "status_display": "Accepted", "runtime": "29 ms", "url": "/submissions/detail/1360446412/", "is_pending": "Not Pending", "title": "Lexicographically Smallest Palindrome", "memory": "18.7 MB", "code": "\nclass Solution {\npublic:\n    string makeSmallestPalindrome(string s) {\n        int n = s.size();\n        for(int i = 0; i < n / 2; i++) {\n            if(s[i] > s[n - i - 1]) {\n                s[i] = s[n - i - 1];\n            } else if(s[i] < s[n - i - 1]) {\n                s[n - i - 1] = s[i];\n            }\n        }\n        return s;\n    }\n};\n", "compare_resulttitle_slug": "lexicographically-smallest-palindrome", "has_notes": false, "flag_type": 1}, {"id": 1360446132, "question_id": 2819, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995752, "status": 10, "status_display": "Accepted", "runtime": "4 ms", "url": "/submissions/detail/1360446132/", "is_pending": "Not Pending", "title": "Remove Trailing Zeros From a String", "memory": "10.9 MB", "code": "\nclass Solution {\npublic:\n    string removeTrailingZeros(string num) {\n        int n = num.size();\n        int i = n - 1;\n        while (i >= 0 && num[i] == '0') {\n            i--;\n        }\n        if (i < 0) {\n            return \"0\";\n        }\n        return num.substr(0, i + 1);\n    }\n};\n", "compare_resulttitle_slug": "remove-trailing-zeros-from-a-string", "has_notes": false, "flag_type": 1}, {"id": 1360445922, "question_id": 2820, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995738, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360445922/", "is_pending": "Not Pending", "title": "Return Length of Arguments Passed", "memory": "N/A", "code": "\n#include <iostream>\n#include <vector>\n\ntemplate<typename... Args>\nsize_t argumentsLength(Args... args) {\n    return sizeof...(args);\n}\n\nint main() {\n    std::cout << argumentsLength(5) << std::endl; // 1\n    std::cout << argumentsLength({}, nullptr, \"3\") << std::endl; // 3\n    return 0;\n}\n", "compare_result": null, "title_slug": "return-length-of-arguments-passed", "has_notes": false, "flag_type": 1}, {"id": 1360445739, "question_id": 2821, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995727, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360445739/", "is_pending": "Not Pending", "title": "Timeout Cancellation", "memory": "N/A", "code": "\n#include <functional>\n#include <chrono>\n#include <thread>\n#include <vector>\n\nclass Cancellable {\npublic:\n    Cancellable(std::function<int(std::vector<int>)> fn, std::vector<int> args, int t)\n        : fn_(fn), args_(args), t_(t), cancelled_(false) {\n        std::thread([this]() {\n            std::this_thread::sleep_for(std::chrono::milliseconds(t_));\n            if (!cancelled_) {\n                fn_(args_);\n            }\n        }).detach();\n    }\n\n    void cancel() {\n        cancelled_ = true;\n    }\n\nprivate:\n    std::function<int(std::vector<int>)> fn_;\n    std::vector<int> args_;\n    int t_;\n    bool cancelled_;\n};\n", "compare_result": null, "title_slug": "timeout-cancellation", "has_notes": false, "flag_type": 1}, {"id": 1360445462, "question_id": 2824, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995709, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360445462/", "is_pending": "Not Pending", "title": "Check if The Number is Fascinating", "memory": "8.8 MB", "code": "\nclass Solution {\npublic:\n    bool isFascinating(int n) {\n        string s = to_string(n) + to_string(2*n) + to_string(3*n);\n        if(s.size() != 9) return false;\n        sort(s.begin(), s.end());\n        for(int i=0; i<9; i++){\n            if(s[i] != i+'1') return false;\n        }\n        return true;\n    }\n};\n", "compare_resulttitle_slug": "check-if-the-number-is-fascinating", "has_notes": false, "flag_type": 1}, {"id": 1360445222, "question_id": 2825, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995694, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360445222/", "is_pending": "Not Pending", "title": "Minimize String Length", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    int minimizedStringLength(string s) {\n        vector<int> last(26, -1);\n        vector<bool> inStack(26, false);\n        stack<int> st;\n        \n        for (int i = 0; i < s.size(); ++i) {\n            int c = s[i] - 'a';\n            if (last[c] != -1) {\n                if (inStack[c]) {\n                    inStack[st.top()] = false;\n                    st.pop();\n                }\n            }\n            if (st.empty() || st.top() != c) {\n                st.push(c);\n                inStack[c] = true;\n            }\n            last[c] = i;\n        }\n        \n        return st.size();\n    }\n};\n", "compare_resulttitle_slug": "minimize-string-length", "has_notes": false, "flag_type": 1}, {"id": 1360444937, "question_id": 2831, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995676, "status": 10, "status_display": "Accepted", "runtime": "22 ms", "url": "/submissions/detail/1360444937/", "is_pending": "Not Pending", "title": "Number of Beautiful Pairs", "memory": "72.9 MB", "code": "\nclass Solution {\npublic:\n    int gcd(int a, int b) {\n        if (b == 0)\n            return a;\n        return gcd(b, a % b);\n    }\n\n    int getFirstDigit(int n) {\n        while (n >= 10)\n            n /= 10;\n        return n;\n    }\n\n    int getLastDigit(int n) {\n        return n % 10;\n    }\n\n    int countBeautifulPairs(vector<int>& nums) {\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            for (int j = i + 1; j < nums.size(); j++) {\n                if (gcd(getFirstDigit(nums[i]), getLastDigit(nums[j])) == 1)\n                    count++;\n            }\n        }\n        return count;\n    }\n};\n", "compare_resulttitle_slug": "number-of-beautiful-pairs", "has_notes": false, "flag_type": 1}, {"id": 1360444689, "question_id": 2836, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995658, "status": 10, "status_display": "Accepted", "runtime": "87 ms", "url": "/submissions/detail/1360444689/", "is_pending": "Not Pending", "title": "Neither Minimum nor Maximum", "memory": "97.6 MB", "code": "\nclass Solution {\npublic:\n    int findNonMinOrMax(vector<int>& nums) {\n        int minVal = *min_element(nums.begin(), nums.end());\n        int maxVal = *max_element(nums.begin(), nums.end());\n        \n        for(int i = 0; i < nums.size(); i++) {\n            if(nums[i] != minVal && nums[i] != maxVal) {\n                return nums[i];\n            }\n        }\n        \n        return -1;\n    }\n};\n", "compare_resulttitle_slug": "neither-minimum-nor-maximum", "has_notes": false, "flag_type": 1}, {"id": 1360444459, "question_id": 2844, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995642, "status": 10, "status_display": "Accepted", "runtime": "13 ms", "url": "/submissions/detail/1360444459/", "is_pending": "Not Pending", "title": "Sum of Squares of Special Elements ", "memory": "39.7 MB", "code": "\nclass Solution {\npublic:\n    int sumOfSquares(vector<int>& nums) {\n        int n = nums.size();\n        int sum = 0;\n        for(int i = 1; i <= n; i++) {\n            if(n % i == 0) {\n                sum += nums[i-1] * nums[i-1];\n            }\n        }\n        return sum;\n    }\n};\n", "compare_resulttitle_slug": "sum-of-squares-of-special-elements", "has_notes": false, "flag_type": 1}, {"id": 1360444253, "question_id": 2847, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995629, "status": 10, "status_display": "Accepted", "runtime": "15 ms", "url": "/submissions/detail/1360444253/", "is_pending": "Not Pending", "title": "Find Maximum Number of String Pairs", "memory": "27.1 MB", "code": "\nclass Solution {\npublic:\n    int maximumNumberOfStringPairs(vector<string>& words) {\n        unordered_map<string, int> wordMap;\n        int pairs = 0;\n        for (string word : words) {\n            string reversedWord = word;\n            reverse(reversedWord.begin(), reversedWord.end());\n            if (wordMap[reversedWord] > 0) {\n                pairs++;\n                wordMap[reversedWord]--;\n            } else {\n                wordMap[word]++;\n            }\n        }\n        return pairs;\n    }\n};\n", "compare_resulttitle_slug": "find-maximum-number-of-string-pairs", "has_notes": false, "flag_type": 1}, {"id": 1360444026, "question_id": 2857, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995614, "status": 10, "status_display": "Accepted", "runtime": "7 ms", "url": "/submissions/detail/1360444026/", "is_pending": "Not Pending", "title": "Total Distance Traveled", "memory": "10.5 MB", "code": "\nclass Solution {\npublic:\n    int distanceTraveled(int mainTank, int additionalTank) {\n        int distance = 0;\n        while(mainTank > 0) {\n            if(mainTank >= 5 && additionalTank > 0) {\n                distance += 50;\n                mainTank -= 4;\n                additionalTank -= 1;\n            } else {\n                distance += mainTank * 10;\n                mainTank = 0;\n            }\n        }\n        return distance;\n    }\n};\n", "compare_resulttitle_slug": "total-distance-traveled", "has_notes": false, "flag_type": 1}, {"id": 1360443788, "question_id": 2859, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995597, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360443788/", "is_pending": "Not Pending", "title": "Add Two Promises", "memory": "N/A", "code": "\n#include <future>\n\nstd::future<int> addTwoFutures(std::future<int> future1, std::future<int> future2) {\n    return std::async(std::launch::async, [](std::future<int> f1, std::future<int> f2) {\n        return f1.get() + f2.get();\n    }, std::move(future1), std::move(future2));\n}\n", "compare_result": null, "title_slug": "add-two-promises", "has_notes": false, "flag_type": 1}, {"id": 1360443554, "question_id": 2860, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995581, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360443554/", "is_pending": "Not Pending", "title": "Sort By", "memory": "N/A", "code": "\n#include <vector>\n#include <algorithm>\n#include <functional>\n\ntemplate<typename T>\nstd::vector<T> sortBy(std::vector<T> arr, std::function<int(T)> fn) {\n    std::sort(arr.begin(), arr.end(), [&](T a, T b) {\n        return fn(a) < fn(b);\n    });\n    return arr;\n}\n", "compare_result": null, "title_slug": "sort-by", "has_notes": false, "flag_type": 1}, {"id": 1360443233, "question_id": 2862, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995560, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360443233/", "is_pending": "Not Pending", "title": "Interval Cancellation", "memory": "N/A", "code": "\n#include <functional>\n#include <vector>\n#include <chrono>\n#include <thread>\n\nclass Cancellable {\npublic:\n    Cancellable(std::function<int(std::vector<int>)> fn, std::vector<int> args, int t)\n        : fn_(fn), args_(args), t_(t), cancelled_(false) {\n        thread_ = std::thread([this]() {\n            while (!cancelled_) {\n                fn_(args_);\n                std::this_thread::sleep_for(std::chrono::milliseconds(t_));\n            }\n        });\n    }\n\n    void cancel() {\n        cancelled_ = true;\n        if (thread_.joinable()) {\n            thread_.join();\n        }\n    }\n\nprivate:\n    std::function<int(std::vector<int>)> fn_;\n    std::vector<int> args_;\n    int t_;\n    bool cancelled_;\n    std::thread thread_;\n};\n", "compare_result": null, "title_slug": "interval-cancellation", "has_notes": false, "flag_type": 1}, {"id": 1360442929, "question_id": 2863, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995540, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360442929/", "is_pending": "Not Pending", "title": "Calculator with Method Chaining", "memory": "N/A", "code": "\n#include <cmath>\n\nclass Calculator {\nprivate:\n    double result;\npublic:\n    Calculator(double value) {\n        result = value;\n    }\n    \n    Calculator& add(double value) {\n        result += value;\n        return *this;\n    }\n    \n    Calculator& subtract(double value) {\n        result -= value;\n        return *this;\n    }\n    \n    Calculator& multiply(double value) {\n        result *= value;\n        return *this;\n    }\n    \n    Calculator& divide(double value) {\n        if (value == 0) {\n            throw std::invalid_argument(\"Division by zero is not allowed\");\n        }\n        result /= value;\n        return *this;\n    }\n    \n    Calculator& power(double value) {\n        result = std::pow(result, value);\n        return *this;\n    }\n    \n    double getResult() {\n        return result;\n    }\n};\n", "compare_result": null, "title_slug": "calculator-with-method-chaining", "has_notes": false, "flag_type": 1}, {"id": 1360442679, "question_id": 2864, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995523, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360442679/", "is_pending": "Not Pending", "title": "Is Object Empty", "memory": "N/A", "code": "\n#include <map>\n#include <vector>\n#include <variant>\n\nbool isEmpty(std::variant<std::map<std::string, int>, std::vector<int>> obj) {\n    if (std::holds_alternative<std::map<std::string, int>>(obj)) {\n        return std::get<std::map<std::string, int>>(obj).empty();\n    } else {\n        return std::get<std::vector<int>>(obj).empty();\n    }\n}\n", "compare_result": null, "title_slug": "is-object-empty", "has_notes": false, "flag_type": 1}, {"id": 1360442412, "question_id": 2866, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995504, "status": 10, "status_display": "Accepted", "runtime": "72 ms", "url": "/submissions/detail/1360442412/", "is_pending": "Not Pending", "title": "Longest Even Odd Subarray With Threshold", "memory": "97 MB", "code": "\nclass Solution {\npublic:\n    int longestAlternatingSubarray(vector<int>& nums, int threshold) {\n        int n = nums.size();\n        int maxLen = 0;\n        for(int i = 0; i < n; i++) {\n            if(nums[i] % 2 == 0 && nums[i] <= threshold) {\n                int len = 1;\n                for(int j = i + 1; j < n; j++) {\n                    if(nums[j] <= threshold && nums[j] % 2 != nums[j - 1] % 2) {\n                        len++;\n                    } else {\n                        break;\n                    }\n                }\n                maxLen = max(maxLen, len);\n            }\n        }\n        return maxLen;\n    }\n};\n", "compare_resulttitle_slug": "longest-even-odd-subarray-with-threshold", "has_notes": false, "flag_type": 1}, {"id": 1360442199, "question_id": 2870, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995489, "status": 15, "status_display": "Runtime Error", "runtime": "N/A", "url": "/submissions/detail/1360442199/", "is_pending": "Not Pending", "title": "Longest Alternating Subarray", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    int alternatingSubarray(vector<int>& nums) {\n        int n = nums.size();\n        int maxLen = 1;\n        int curLen = 1;\n        for(int i = 1; i < n; i++) {\n            if((nums[i] - nums[i-1]) * (nums[i-1] - nums[i-2]) < 0) {\n                curLen++;\n                maxLen = max(maxLen, curLen);\n            } else {\n                curLen = 2;\n            }\n        }\n        return maxLen > 1 ? maxLen : -1;\n    }\n};\n", "compare_resulttitle_slug": "longest-alternating-subarray", "has_notes": false, "flag_type": 1}, {"id": 1360441974, "question_id": 2876, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995472, "status": 10, "status_display": "Accepted", "runtime": "7 ms", "url": "/submissions/detail/1360441974/", "is_pending": "Not Pending", "title": "Number of Employees Who Met the Target", "memory": "23.8 MB", "code": "\nclass Solution {\npublic:\n    int numberOfEmployeesWhoMetTarget(vector<int>& hours, int target) {\n        int count = 0;\n        for(int i = 0; i < hours.size(); i++) {\n            if(hours[i] >= target) {\n                count++;\n            }\n        }\n        return count;\n    }\n};\n", "compare_resulttitle_slug": "number-of-employees-who-met-the-target", "has_notes": false, "flag_type": 1}, {"id": 1360441787, "question_id": 2881, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995460, "status": 10, "status_display": "Accepted", "runtime": "23 ms", "url": "/submissions/detail/1360441787/", "is_pending": "Not Pending", "title": "Split Strings by Separator", "memory": "45.2 MB", "code": "\nclass Solution {\npublic:\n    vector<string> splitWordsBySeparator(vector<string>& words, char separator) {\n        vector<string> result;\n        for (auto& word : words) {\n            stringstream ss(word);\n            string token;\n            while (getline(ss, token, separator)) {\n                if (!token.empty()) {\n                    result.push_back(token);\n                }\n            }\n        }\n        return result;\n    }\n};\n", "compare_resulttitle_slug": "split-strings-by-separator", "has_notes": false, "flag_type": 1}, {"id": 1360441598, "question_id": 2886, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995447, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360441598/", "is_pending": "Not Pending", "title": "Faulty Keyboard", "memory": "9.6 MB", "code": "\nclass Solution {\npublic:\n    string finalString(string s) {\n        string result = \"\";\n        for (char c : s) {\n            if (c == 'i') {\n                reverse(result.begin(), result.end());\n            } else {\n                result += c;\n            }\n        }\n        return result;\n    }\n};\n", "compare_resulttitle_slug": "faulty-keyboard", "has_notes": false, "flag_type": 1}, {"id": 1360441420, "question_id": 2892, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995435, "status": 10, "status_display": "Accepted", "runtime": "8 ms", "url": "/submissions/detail/1360441420/", "is_pending": "Not Pending", "title": "Check if Array is Good", "memory": "26.8 MB", "code": "\nclass Solution {\npublic:\n    bool isGood(vector<int>& nums) {\n        int n = *max_element(nums.begin(), nums.end());\n        vector<int> count(201, 0);\n        for (int num : nums) {\n            count[num]++;\n        }\n        for (int i = 1; i < n; i++) {\n            if (count[i] != 1) {\n                return false;\n            }\n        }\n        return count[n] == 2 && nums.size() == n + 1;\n    }\n};\n", "compare_resulttitle_slug": "check-if-array-is-good", "has_notes": false, "flag_type": 1}, {"id": 1360441223, "question_id": 2902, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995420, "status": 10, "status_display": "Accepted", "runtime": "24 ms", "url": "/submissions/detail/1360441223/", "is_pending": "Not Pending", "title": "Max Pair Sum in an Array", "memory": "73.5 MB", "code": "\nclass Solution {\npublic:\n    int maxSum(vector<int>& nums) {\n        vector<int> maxNums(10, -1);\n        vector<int> secondMaxNums(10, -1);\n        \n        for (int num : nums) {\n            int maxDigit = 0;\n            int temp = num;\n            while (temp > 0) {\n                maxDigit = max(maxDigit, temp % 10);\n                temp /= 10;\n            }\n            \n            if (num > maxNums[maxDigit]) {\n                secondMaxNums[maxDigit] = maxNums[maxDigit];\n                maxNums[maxDigit] = num;\n            } else if (num > secondMaxNums[maxDigit]) {\n                secondMaxNums[maxDigit] = num;\n            }\n        }\n        \n        int maxSum = -1;\n        for (int i = 0; i < 10; ++i) {\n            if (secondMaxNums[i] != -1) {\n                maxSum = max(maxSum, maxNums[i] + secondMaxNums[i]);\n            }\n        }\n        \n        return maxSum;\n    }\n};\n", "compare_resulttitle_slug": "max-pair-sum-in-an-array", "has_notes": false, "flag_type": 1}, {"id": 1360440934, "question_id": 2917, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995400, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360440934/", "is_pending": "Not Pending", "title": "Count Pairs Whose Sum is Less than Target", "memory": "24 MB", "code": "\nclass Solution {\npublic:\n    int countPairs(vector<int>& nums, int target) {\n        int count = 0;\n        for(int i = 0; i < nums.size(); i++) {\n            for(int j = i + 1; j < nums.size(); j++) {\n                if(nums[i] + nums[j] < target) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n};\n", "compare_resulttitle_slug": "count-pairs-whose-sum-is-less-than-target", "has_notes": false, "flag_type": 1}, {"id": 1360440754, "question_id": 2955, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995388, "status": 10, "status_display": "Accepted", "runtime": "2 ms", "url": "/submissions/detail/1360440754/", "is_pending": "Not Pending", "title": "Account Balance After Rounded Purchase", "memory": "7.6 MB", "code": "\nclass Solution {\npublic:\n    int accountBalanceAfterPurchase(int purchaseAmount) {\n        int roundedAmount = ((purchaseAmount + 5) / 10) * 10;\n        return 100 - roundedAmount;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "account-balance-after-rounded-purchase", "has_notes": false, "flag_type": 1}, {"id": 1360440567, "question_id": 2977, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995374, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1360440567/", "is_pending": "Not Pending", "title": "Check if a String Is an Acronym of Words", "memory": "43.6 MB", "code": "\nclass Solution {\npublic:\n    bool isAcronym(vector<string>& words, string s) {\n        string acronym = \"\";\n        for(auto word : words) {\n            acronym += word[0];\n        }\n        return acronym == s;\n    }\n};\n", "compare_resulttitle_slug": "check-if-a-string-is-an-acronym-of-words", "has_notes": false, "flag_type": 1}, {"id": 1360440381, "question_id": 2998, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995361, "status": 10, "status_display": "Accepted", "runtime": "68 ms", "url": "/submissions/detail/1360440381/", "is_pending": "Not Pending", "title": "  Count Symmetric Integers", "memory": "10.8 MB", "code": "\nclass Solution {\npublic:\n    int countSymmetricIntegers(int low, int high) {\n        int count = 0;\n        for (int i = low; i <= high; i++) {\n            if (i < 10) continue;\n            string num = to_string(i);\n            if (num.size() % 2 != 0) continue;\n            int half = num.size() / 2;\n            int sum1 = 0, sum2 = 0;\n            for (int j = 0; j < half; j++) {\n                sum1 += num[j] - '0';\n                sum2 += num[j + half] - '0';\n            }\n            if (sum1 == sum2) count++;\n        }\n        return count;\n    }\n};\n", "compare_resulttitle_slug": "count-symmetric-integers", "has_notes": false, "flag_type": 1}, {"id": 1360440146, "question_id": 2999, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995342, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360440146/", "is_pending": "Not Pending", "title": "Check if Strings Can be Made Equal With Operations I", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    bool canBeEqual(string s1, string s2) {\n        sort(s1.begin(), s1.end());\n        sort(s2.begin(), s2.end());\n        return s1 == s2;\n    }\n};\n", "compare_resulttitle_slug": "check-if-strings-can-be-made-equal-with-operations-i", "has_notes": false, "flag_type": 1}, {"id": 1360439958, "question_id": 3019, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995329, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360439958/", "is_pending": "Not Pending", "title": "Furthest Point From Origin", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    int furthestDistanceFromOrigin(string moves) {\n        int left = 0, right = 0;\n        for (char move : moves) {\n            if (move == 'L') {\n                left++;\n            } else if (move == 'R') {\n                right++;\n            } else {\n                left++;\n                right++;\n            }\n        }\n        return max(left, right);\n    }\n};\n", "compare_resulttitle_slug": "furthest-point-from-origin", "has_notes": false, "flag_type": 1}, {"id": 1360439743, "question_id": 3034, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995314, "status": 10, "status_display": "Accepted", "runtime": "12 ms", "url": "/submissions/detail/1360439743/", "is_pending": "Not Pending", "title": "Points That Intersect With Cars", "memory": "29.3 MB", "code": "\nclass Solution {\npublic:\n    int numberOfPoints(vector<vector<int>>& nums) {\n        vector<int> line(101, 0);\n        for(auto &car : nums) {\n            for(int i = car[0]; i <= car[1]; i++) {\n                line[i] = 1;\n            }\n        }\n        return accumulate(line.begin(), line.end(), 0);\n    }\n};\n", "compare_resulttitle_slug": "points-that-intersect-with-cars", "has_notes": false, "flag_type": 1}, {"id": 1360439522, "question_id": 3044, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995298, "status": 15, "status_display": "Runtime Error", "runtime": "N/A", "url": "/submissions/detail/1360439522/", "is_pending": "Not Pending", "title": "Minimum Operations to Collect Elements", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    int minOperations(vector<int>& nums, int k) {\n        int n = nums.size();\n        vector<int> pos(n+1);\n        for(int i = 0; i < n; ++i) {\n            pos[nums[i]] = i+1;\n        }\n        vector<int> dp(n+1, INT_MAX);\n        dp[0] = 0;\n        for(int i = 1; i <= k; ++i) {\n            for(int j = n; j >= pos[i]; --j) {\n                dp[j] = min(dp[j], dp[j-pos[i]]+1);\n            }\n        }\n        return dp[n];\n    }\n};\n", "compare_resulttitle_slug": "minimum-operations-to-collect-elements", "has_notes": false, "flag_type": 1}, {"id": 1360439221, "question_id": 3045, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995278, "status": 10, "status_display": "Accepted", "runtime": "12 ms", "url": "/submissions/detail/1360439221/", "is_pending": "Not Pending", "title": "Minimum Right Shifts to Sort the Array", "memory": "28.8 MB", "code": "\nclass Solution {\npublic:\n    int minimumRightShifts(vector<int>& nums) {\n        int n = nums.size();\n        vector<int> sorted_nums = nums;\n        sort(sorted_nums.begin(), sorted_nums.end());\n        for (int i = 0; i < n; ++i) {\n            if (nums == sorted_nums) {\n                return i;\n            }\n            rotate(nums.rbegin(), nums.rbegin() + 1, nums.rend());\n        }\n        return -1;\n    }\n};\n", "compare_resulttitle_slug": "minimum-right-shifts-to-sort-the-array", "has_notes": false, "flag_type": 1}, {"id": 1360438998, "question_id": 3055, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995262, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360438998/", "is_pending": "Not Pending", "title": "Maximum Odd Binary Number", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    string maximumOddBinaryNumber(string s) {\n        int count1 = 0;\n        int count0 = 0;\n        for (char c : s) {\n            if (c == '1') {\n                count1++;\n            } else {\n                count0++;\n            }\n        }\n        string result = \"\";\n        if (count1 > 0) {\n            result += '1';\n            count1--;\n        }\n        while (count0--) {\n            result += '0';\n        }\n        while (count1--) {\n            result += '1';\n        }\n        return result;\n    }\n};\n", "compare_result": "0110010010111010100101001010100100010000011010010000000010000000100000000001001000000010000000010000010000000000001000001000000000100000000000010000010000000100000010000000000000000000001100010000000000000000000000001000000000001000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001001000111010100000000000001100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001", "title_slug": "maximum-odd-binary-number", "has_notes": false, "flag_type": 1}, {"id": 1360438746, "question_id": 3062, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995246, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360438746/", "is_pending": "Not Pending", "title": "Create a DataFrame from List", "memory": "N/A", "code": "python\nimport pandas as pd\nfrom typing import List\n\ndef createDataframe(student_data: List[List[int]]) -> pd.DataFrame:\n    df = pd.DataFrame(student_data, columns=['student_id', 'age'])\n    return df\n", "compare_result": null, "title_slug": "create-a-dataframe-from-list", "has_notes": false, "flag_type": 1}, {"id": 1360438543, "question_id": 3063, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995234, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360438543/", "is_pending": "Not Pending", "title": "Method Chaining", "memory": "N/A", "code": "\n#include <bits/stdc++.h>\nusing namespace std;\n\nstruct Animal {\n    string name;\n    string species;\n    int age;\n    int weight;\n};\n\nvector<string> findHeavyAnimals(vector<Animal>& animals) {\n    sort(animals.begin(), animals.end(), [](const Animal& a, const Animal& b) {\n        return a.weight > b.weight;\n    });\n    \n    vector<string> heavyAnimals;\n    for (const auto& animal : animals) {\n        if (animal.weight > 100) {\n            heavyAnimals.push_back(animal.name);\n        }\n    }\n    \n    return heavyAnimals;\n}\n\nint main() {\n    vector<Animal> animals = {\n        {\"Tatiana\", \"Snake\", 98, 464},\n        {\"Khaled\", \"Giraffe\", 50, 41},\n        {\"Alex\", \"Leopard\", 6, 328},\n        {\"Jonathan\", \"Monkey\", 45, 463},\n        {\"Stefan\", \"Bear\", 100, 50},\n        {\"Tommy\", \"Panda\", 26, 349}\n    };\n    \n    vector<string> heavyAnimals = findHeavyAnimals(animals);\n    \n    for (const auto& name : heavyAnimals) {\n        cout << name << endl;\n    }\n    \n    return 0;\n}\n", "compare_result": "000000000000000000000", "title_slug": "method-chaining", "has_notes": false, "flag_type": 1}, {"id": 1360438232, "question_id": 3064, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995215, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360438232/", "is_pending": "Not Pending", "title": "Reshape Data: Concatenate", "memory": "N/A", "code": "python\ndef concatenateTables(df1: pd.DataFrame, df2: pd.DataFrame) -> pd.DataFrame:\n    return pd.concat([df1, df2], ignore_index=True)\n", "compare_result": null, "title_slug": "reshape-data-concatenate", "has_notes": false, "flag_type": 1}, {"id": 1360438052, "question_id": 3065, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995201, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360438052/", "is_pending": "Not Pending", "title": "Display the First Three Rows", "memory": "N/A", "code": "\n#include <pandas/pandas.h>\n\npd::DataFrame selectFirstRows(pd::DataFrame employees) {\n    return employees.head(3);\n}\n", "compare_result": null, "title_slug": "display-the-first-three-rows", "has_notes": false, "flag_type": 1}, {"id": 1360437869, "question_id": 3066, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995189, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360437869/", "is_pending": "Not Pending", "title": "Create a New Column", "memory": "N/A", "code": "python\ndef createBonusColumn(employees: pd.DataFrame) -> pd.DataFrame:\n    employees['bonus'] = employees['salary'] * 2\n    return employees\n", "compare_result": null, "title_slug": "create-a-new-column", "has_notes": false, "flag_type": 1}, {"id": 1360437665, "question_id": 3067, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995176, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360437665/", "is_pending": "Not Pending", "title": "Modify Columns", "memory": "N/A", "code": "python\nimport pandas as pd\n\ndef modifySalaryColumn(employees: pd.DataFrame) -> pd.DataFrame:\n    employees['salary'] = employees['salary'].apply(lambda x: x*2)\n    return employees\n", "compare_result": null, "title_slug": "modify-columns", "has_notes": false, "flag_type": 1}, {"id": 1360437468, "question_id": 3068, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995164, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360437468/", "is_pending": "Not Pending", "title": "Rename Columns", "memory": "N/A", "code": "python\ndef renameColumns(students: pd.DataFrame) -> pd.DataFrame:\n    students.rename(columns={'id':'student_id', 'first':'first_name', 'last':'last_name', 'age':'age_in_years'}, inplace=True)\n    return students\n", "compare_result": null, "title_slug": "rename-columns", "has_notes": false, "flag_type": 1}, {"id": 1360437220, "question_id": 3069, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995147, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360437220/", "is_pending": "Not Pending", "title": "Change Data Type", "memory": "N/A", "code": "\n#include <pandas.h>\n\nDataFrame changeDatatype(DataFrame students) {\n    students[\"grade\"] = students[\"grade\"].astype(int);\n    return students;\n}\n", "compare_result": null, "title_slug": "change-data-type", "has_notes": false, "flag_type": 1}, {"id": 1360437012, "question_id": 3070, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995134, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360437012/", "is_pending": "Not Pending", "title": "Fill Missing Data", "memory": "N/A", "code": "python\nimport pandas as pd\n\ndef fillMissingValues(products: pd.DataFrame) -> pd.DataFrame:\n    products['quantity'].fillna(0, inplace=True)\n    return products\n", "compare_result": null, "title_slug": "fill-missing-data", "has_notes": false, "flag_type": 1}, {"id": 1360436841, "question_id": 3071, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995122, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360436841/", "is_pending": "Not Pending", "title": "Drop Duplicate Rows", "memory": "N/A", "code": "\n#include <pandas/namespace.hpp>\n\nauto dropDuplicateEmails(pd::DataFrame customers) -> pd::DataFrame {\n    return customers.drop_duplicates(subset=\"email\", keep=\"first\");\n}\n", "compare_result": null, "title_slug": "drop-duplicate-rows", "has_notes": false, "flag_type": 1}, {"id": 1360436639, "question_id": 3072, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995108, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360436639/", "is_pending": "Not Pending", "title": "Reshape Data: Pivot", "memory": "N/A", "code": "python\ndef pivotTable(weather: pd.DataFrame) -> pd.DataFrame:\n    return weather.pivot(index='month', columns='city', values='temperature')\n", "compare_result": null, "title_slug": "reshape-data-pivot", "has_notes": false, "flag_type": 1}, {"id": 1360436407, "question_id": 3073, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995093, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360436407/", "is_pending": "Not Pending", "title": "Reshape Data: Melt", "memory": "N/A", "code": "python\ndef meltTable(report: pd.DataFrame) -> pd.DataFrame:\n    return report.melt(id_vars=['product'], var_name='quarter', value_name='sales')\n", "compare_result": null, "title_slug": "reshape-data-melt", "has_notes": false, "flag_type": 1}, {"id": 1360436171, "question_id": 3074, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995077, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360436171/", "is_pending": "Not Pending", "title": "Select Data", "memory": "N/A", "code": "python\ndef selectData(students: pd.DataFrame) -> pd.DataFrame:\n    return students.loc[students['student_id'] == 101, ['name', 'age']]\n", "compare_result": null, "title_slug": "select-data", "has_notes": false, "flag_type": 1}, {"id": 1360436001, "question_id": 3075, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995065, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360436001/", "is_pending": "Not Pending", "title": "Drop Missing Data", "memory": "N/A", "code": "python\ndef dropMissingData(students: pd.DataFrame) -> pd.DataFrame:\n    students.dropna(subset=['name'], inplace=True)\n    return students\n", "compare_result": null, "title_slug": "drop-missing-data", "has_notes": false, "flag_type": 1}, {"id": 1360435801, "question_id": 3076, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995053, "status": 20, "status_display": "Compile Error", "runtime": "N/A", "url": "/submissions/detail/1360435801/", "is_pending": "Not Pending", "title": "Get the Size of a DataFrame", "memory": "N/A", "code": "\n#include <vector>\n#include <pandas.h>\n\nstd::vector<int> getDataframeSize(DataFrame players) {\n    std::vector<int> result;\n    result.push_back(players.shape()[0]); // number of rows\n    result.push_back(players.shape()[1]); // number of columns\n    return result;\n}\n", "compare_result": null, "title_slug": "get-the-size-of-a-dataframe", "has_notes": false, "flag_type": 1}, {"id": 1360435628, "question_id": 3093, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995039, "status": 10, "status_display": "Accepted", "runtime": "5 ms", "url": "/submissions/detail/1360435628/", "is_pending": "Not Pending", "title": "Sum of Values at Indices With K Set Bits", "memory": "25.1 MB", "code": "\nclass Solution {\npublic:\n    int sumIndicesWithKSetBits(vector<int>& nums, int k) {\n        int sum = 0;\n        for(int i = 0; i < nums.size(); i++) {\n            if(__builtin_popcount(i) == k) {\n                sum += nums[i];\n            }\n        }\n        return sum;\n    }\n};\n", "compare_resulttitle_slug": "sum-of-values-at-indices-with-k-set-bits", "has_notes": false, "flag_type": 1}, {"id": 1360435424, "question_id": 3143, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995025, "status": 10, "status_display": "Accepted", "runtime": "7 ms", "url": "/submissions/detail/1360435424/", "is_pending": "Not Pending", "title": "Longest Unequal Adjacent Groups Subsequence I", "memory": "29.1 MB", "code": "\nclass Solution {\npublic:\n    vector<string> getLongestSubsequence(vector<string>& words, vector<int>& groups) {\n        vector<string> result;\n        int n = words.size();\n        if(n == 0) return result;\n        \n        result.push_back(words[0]);\n        int lastGroup = groups[0];\n        \n        for(int i = 1; i < n; i++) {\n            if(groups[i] != lastGroup) {\n                result.push_back(words[i]);\n                lastGroup = groups[i];\n            }\n        }\n        \n        return result;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "longest-unequal-adjacent-groups-subsequence-i", "has_notes": false, "flag_type": 1}, {"id": 1360435192, "question_id": 3154, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723995011, "status": 10, "status_display": "Accepted", "runtime": "4 ms", "url": "/submissions/detail/1360435192/", "is_pending": "Not Pending", "title": "Maximum Value of an Ordered Triplet I", "memory": "21.5 MB", "code": "\nclass Solution {\npublic:\n    long long maximumTripletValue(vector<int>& nums) {\n        int n = nums.size();\n        vector<int> maxSuffix(n);\n        maxSuffix[n - 1] = nums[n - 1];\n        for (int i = n - 2; i >= 0; --i) {\n            maxSuffix[i] = max(maxSuffix[i + 1], nums[i]);\n        }\n        long long ans = 0;\n        for (int i = 0; i < n - 2; ++i) {\n            for (int j = i + 1; j < n - 1; ++j) {\n                ans = max(ans, (long long)(nums[i] - nums[j]) * maxSuffix[j + 1]);\n            }\n        }\n        return ans;\n    }\n};\n", "compare_resulttitle_slug": "maximum-value-of-an-ordered-triplet-i", "has_notes": false, "flag_type": 1}, {"id": 1360434918, "question_id": 3163, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723994994, "status": 10, "status_display": "Accepted", "runtime": "40 ms", "url": "/submissions/detail/1360434918/", "is_pending": "Not Pending", "title": "Subarrays Distinct Element Sum of Squares I", "memory": "37 MB", "code": "\nclass Solution {\npublic:\n    int sumCounts(vector<int>& nums) {\n        int n = nums.size();\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            unordered_set<int> distinct;\n            for (int j = i; j < n; j++) {\n                distinct.insert(nums[j]);\n                sum += pow(distinct.size(), 2);\n            }\n        }\n        return sum;\n    }\n};\n", "compare_resulttitle_slug": "subarrays-distinct-element-sum-of-squares-i", "has_notes": false, "flag_type": 1}, {"id": 1360434652, "question_id": 3164, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723994977, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360434652/", "is_pending": "Not Pending", "title": "Last Visited Integers", "memory": "25.7 MB", "code": "\nclass Solution {\npublic:\n    vector<int> lastVisitedIntegers(vector<int>& nums) {\n        vector<int> seen, ans;\n        int k = 0;\n        for (int num : nums) {\n            if (num == -1) {\n                k++;\n                if (k <= seen.size()) {\n                    ans.push_back(seen[k - 1]);\n                } else {\n                    ans.push_back(-1);\n                }\n            } else {\n                seen.insert(seen.begin(), num);\n                k = 0;\n            }\n        }\n        return ans;\n    }\n};\n", "compare_resulttitle_slug": "last-visited-integers", "has_notes": false, "flag_type": 1}, {"id": 1360434387, "question_id": 3165, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723994959, "status": 10, "status_display": "Accepted", "runtime": "4 ms", "url": "/submissions/detail/1360434387/", "is_pending": "Not Pending", "title": "Find Indices With Index and Value Difference I", "memory": "20.8 MB", "code": "\nclass Solution {\npublic:\n    vector<int> findIndices(vector<int>& nums, int indexDifference, int valueDifference) {\n        int n = nums.size();\n        for(int i = 0; i < n; i++) {\n            for(int j = i; j < n; j++) {\n                if(abs(i - j) >= indexDifference && abs(nums[i] - nums[j]) >= valueDifference) {\n                    return {i, j};\n                }\n            }\n        }\n        return {-1, -1};\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "find-indices-with-index-and-value-difference-i", "has_notes": false, "flag_type": 1}, {"id": 1360434160, "question_id": 3172, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723994944, "status": 10, "status_display": "Accepted", "runtime": "2 ms", "url": "/submissions/detail/1360434160/", "is_pending": "Not Pending", "title": "Divisible and Non-divisible Sums Difference", "memory": "8.3 MB", "code": "\nclass Solution {\npublic:\n    int differenceOfSums(int n, int m) {\n        int num1 = 0, num2 = 0;\n        for(int i = 1; i <= n; i++) {\n            if(i % m == 0) {\n                num2 += i;\n            } else {\n                num1 += i;\n            }\n        }\n        return num1 - num2;\n    }\n};\n", "compare_resulttitle_slug": "divisible-and-non-divisible-sums-difference", "has_notes": false, "flag_type": 1}, {"id": 1360433949, "question_id": 3176, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723994929, "status": 10, "status_display": "Accepted", "runtime": "8 ms", "url": "/submissions/detail/1360433949/", "is_pending": "Not Pending", "title": "Minimum Sum of Mountain Triplets I", "memory": "24.2 MB", "code": "\nclass Solution {\npublic:\n    int minimumSum(vector<int>& nums) {\n        int n = nums.size();\n        int minSum = INT_MAX;\n        bool found = false;\n        \n        for(int j = 1; j < n - 1; ++j) {\n            int leftMin = INT_MAX;\n            int rightMin = INT_MAX;\n            \n            for(int i = 0; i < j; ++i) {\n                if(nums[i] < nums[j]) {\n                    leftMin = min(leftMin, nums[i]);\n                }\n            }\n            \n            for(int k = j + 1; k < n; ++k) {\n                if(nums[k] < nums[j]) {\n                    rightMin = min(rightMin, nums[k]);\n                }\n            }\n            \n            if(leftMin != INT_MAX && rightMin != INT_MAX) {\n                minSum = min(minSum, leftMin + nums[j] + rightMin);\n                found = true;\n            }\n        }\n        \n        return found ? minSum : -1;\n    }\n};\n", "compare_resulttitle_slug": "minimum-sum-of-mountain-triplets-i", "has_notes": false, "flag_type": 1}, {"id": 1360433670, "question_id": 3183, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723994911, "status": 10, "status_display": "Accepted", "runtime": "12 ms", "url": "/submissions/detail/1360433670/", "is_pending": "Not Pending", "title": "Find the K-or of an Array", "memory": "29.3 MB", "code": "\nclass Solution {\npublic:\n    int findKOr(vector<int>& nums, int k) {\n        int res = 0;\n        for (int bit = 0; bit < 31; ++bit) {\n            int count = 0;\n            for (int num : nums) {\n                if (num & (1 << bit)) {\n                    ++count;\n                }\n            }\n            if (count >= k) {\n                res |= (1 << bit);\n            }\n        }\n        return res;\n    }\n};\n", "compare_resulttitle_slug": "find-the-k-or-of-an-array", "has_notes": false, "flag_type": 1}, {"id": 1360433443, "question_id": 3188, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723994898, "status": 10, "status_display": "Accepted", "runtime": "44 ms", "url": "/submissions/detail/1360433443/", "is_pending": "Not Pending", "title": "Find Champion I", "memory": "40.3 MB", "code": "\nclass Solution {\npublic:\n    int findChampion(vector<vector<int>>& grid) {\n        int n = grid.size();\n        for (int i = 0; i < n; ++i) {\n            bool isChampion = true;\n            for (int j = 0; j < n; ++j) {\n                if (grid[j][i] == 1) {\n                    isChampion = false;\n                    break;\n                }\n            }\n            if (isChampion) {\n                return i;\n            }\n        }\n        return -1;\n    }\n};\n", "compare_resulttitle_slug": "find-champion-i", "has_notes": false, "flag_type": 1}, {"id": 1360433226, "question_id": 3193, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723994884, "status": 10, "status_display": "Accepted", "runtime": "11 ms", "url": "/submissions/detail/1360433226/", "is_pending": "Not Pending", "title": "Maximum Strong Pair XOR I", "memory": "27.5 MB", "code": "\nclass Solution {\npublic:\n    int maximumStrongPairXor(vector<int>& nums) {\n        int max_xor = 0;\n        sort(nums.begin(), nums.end());\n        for (int i = 0; i < nums.size(); i++) {\n            for (int j = i; j < nums.size(); j++) {\n                if (abs(nums[i] - nums[j]) <= min(nums[i], nums[j])) {\n                    max_xor = max(max_xor, nums[i] ^ nums[j]);\n                }\n            }\n        }\n        return max_xor;\n    }\n};\n", "compare_resulttitle_slug": "maximum-strong-pair-xor-i", "has_notes": false, "flag_type": 1}, {"id": 1360432942, "question_id": 3194, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723994866, "status": 10, "status_display": "Accepted", "runtime": "19 ms", "url": "/submissions/detail/1360432942/", "is_pending": "Not Pending", "title": "Find Words Containing Character", "memory": "33.3 MB", "code": "\nclass Solution {\npublic:\n    vector<int> findWordsContaining(vector<string>& words, char x) {\n        vector<int> indices;\n        for(int i = 0; i < words.size(); i++) {\n            if(words[i].find(x) != string::npos) {\n                indices.push_back(i);\n            }\n        }\n        return indices;\n    }\n};\n", "compare_resulttitle_slug": "find-words-containing-character", "has_notes": false, "flag_type": 1}, {"id": 1360432720, "question_id": 3199, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723994852, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360432720/", "is_pending": "Not Pending", "title": "Distribute Candies Among Children I", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    int distributeCandies(int n, int limit) {\n        vector<vector<int>> dp(n + 1, vector<int>(n + 1, 0));\n        dp[0][0] = 1;\n        for (int i = 0; i <= n; ++i) {\n            for (int j = 0; j <= i; ++j) {\n                for (int k = 0; k <= limit && k <= i; ++k) {\n                    if (j + k <= i) {\n                        dp[i][j + k] = (dp[i][j + k] + dp[i - k][j]) % 1000000007;\n                    }\n                }\n            }\n        }\n        int res = 0;\n        for (int i = 0; i <= n; ++i) {\n            for (int j = 0; j <= limit && j <= i; ++j) {\n                if (n - i <= limit) {\n                    res = (res + dp[i][j]) % 1000000007;\n                }\n            }\n        }\n        return res;\n    }\n};\n", "compare_resulttitle_slug": "distribute-candies-among-children-i", "has_notes": false, "flag_type": 1}, {"id": 1360432417, "question_id": 3206, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723994832, "status": 10, "status_display": "Accepted", "runtime": "32 ms", "url": "/submissions/detail/1360432417/", "is_pending": "Not Pending", "title": "Find Common Elements Between Two Arrays", "memory": "65.8 MB", "code": "\nclass Solution {\npublic:\n    vector<int> findIntersectionValues(vector<int>& nums1, vector<int>& nums2) {\n        vector<int> count1(101, 0), count2(101, 0);\n        for (int num : nums1) count1[num]++;\n        for (int num : nums2) count2[num]++;\n        int answer1 = 0, answer2 = 0;\n        for (int i = 1; i <= 100; i++) {\n            if (count1[i] > 0 && count2[i] > 0) {\n                answer1 += count1[i];\n                answer2 += count2[i];\n            }\n        }\n        return {answer1, answer2};\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "find-common-elements-between-two-arrays", "has_notes": false, "flag_type": 1}, {"id": 1360432143, "question_id": 3207, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723994814, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360432143/", "is_pending": "Not Pending", "title": "Make Three Strings Equal", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    int findMinimumOperations(string s1, string s2, string s3) {\n        int len1 = s1.length();\n        int len2 = s2.length();\n        int len3 = s3.length();\n        \n        while(len1 > 0 && len2 > 0 && len3 > 0) {\n            if(s1[len1-1] == s2[len2-1] && s2[len2-1] == s3[len3-1]) {\n                len1--;\n                len2--;\n                len3--;\n            } else {\n                break;\n            }\n        }\n        \n        if(len1 == 0 || len2 == 0 || len3 == 0) {\n            return -1;\n        }\n        \n        return len1 + len2 + len3 - 3;\n    }\n};\n", "compare_resulttitle_slug": "make-three-strings-equal", "has_notes": false, "flag_type": 1}, {"id": 1360431857, "question_id": 3215, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723994793, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360431857/", "is_pending": "Not Pending", "title": "Matrix Similarity After Cyclic Shifts", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    bool areSimilar(vector<vector<int>>& mat, int k) {\n        int m = mat.size();\n        int n = mat[0].size();\n        if (k % n == 0) return true;\n        for (int i = 0; i < m; ++i) {\n            if (i % 2 == 0 && k % n != 0) return false;\n            if (i % 2 == 1 && (n - k % n) % n != 0) return false;\n        }\n        return true;\n    }\n};\n", "compare_resulttitle_slug": "matrix-similarity-after-cyclic-shifts", "has_notes": false, "flag_type": 1}, {"id": 1360431550, "question_id": 3220, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723994774, "status": 10, "status_display": "Accepted", "runtime": "4 ms", "url": "/submissions/detail/1360431550/", "is_pending": "Not Pending", "title": "Count Tested Devices After Test Operations", "memory": "20.6 MB", "code": "\nclass Solution {\npublic:\n    int countTestedDevices(vector<int>& batteryPercentages) {\n        int n = batteryPercentages.size();\n        int count = 0;\n        for(int i = 0; i < n; i++) {\n            if(batteryPercentages[i] > 0) {\n                count++;\n                for(int j = i + 1; j < n; j++) {\n                    batteryPercentages[j] = max(0, batteryPercentages[j] - 1);\n                }\n            }\n        }\n        return count;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "count-tested-devices-after-test-operations", "has_notes": false, "flag_type": 1}, {"id": 1360431331, "question_id": 3221, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723994759, "status": 10, "status_display": "Accepted", "runtime": "10 ms", "url": "/submissions/detail/1360431331/", "is_pending": "Not Pending", "title": "Find the Peaks", "memory": "24.1 MB", "code": "\nclass Solution {\npublic:\n    vector<int> findPeaks(vector<int>& mountain) {\n        vector<int> peaks;\n        for(int i = 1; i < mountain.size() - 1; i++) {\n            if(mountain[i] > mountain[i-1] && mountain[i] > mountain[i+1]) {\n                peaks.push_back(i);\n            }\n        }\n        return peaks;\n    }\n};\n", "compare_resulttitle_slug": "find-the-peaks", "has_notes": false, "flag_type": 1}, {"id": 1360431123, "question_id": 3226, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723994745, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360431123/", "is_pending": "Not Pending", "title": "Minimum Number Game", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    vector<int> numberGame(vector<int>& nums) {\n        priority_queue<pair<int, int>> pq;\n        for (int i = 0; i < nums.size(); i++) {\n            pq.push({nums[i], i});\n        }\n        vector<int> res(nums.size());\n        int turn = 0;\n        while (!pq.empty()) {\n            pair<int, int> p1 = pq.top(); pq.pop();\n            pair<int, int> p2 = pq.top(); pq.pop();\n            if (turn % 2 == 0) {\n                res[turn] = p1.first;\n                res[turn + 1] = p2.first;\n            } else {\n                res[turn] = p2.first;\n                res[turn + 1] = p1.first;\n            }\n            turn += 2;\n        }\n        return res;\n    }\n};\n", "compare_resulttitle_slug": "minimum-number-game", "has_notes": false, "flag_type": 1}, {"id": 1360430848, "question_id": 3227, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723994727, "status": 10, "status_display": "Accepted", "runtime": "23 ms", "url": "/submissions/detail/1360430848/", "is_pending": "Not Pending", "title": "Find Missing and Repeated Values", "memory": "25.9 MB", "code": "\nclass Solution {\npublic:\n    vector<int> findMissingAndRepeatedValues(vector<vector<int>>& grid) {\n        int n = grid.size();\n        vector<int> count(n*n+1, 0);\n        vector<int> result(2, 0);\n        \n        for(int i=0; i<n; i++){\n            for(int j=0; j<n; j++){\n                count[grid[i][j]]++;\n            }\n        }\n        \n        for(int i=1; i<=n*n; i++){\n            if(count[i] == 2){\n                result[0] = i;\n            }\n            if(count[i] == 0){\n                result[1] = i;\n            }\n        }\n        \n        return result;\n    }\n};\n", "compare_resulttitle_slug": "find-missing-and-repeated-values", "has_notes": false, "flag_type": 1}, {"id": 1360430620, "question_id": 3236, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723994711, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360430620/", "is_pending": "Not Pending", "title": "Smallest Missing Integer Greater Than Sequential Prefix Sum", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    int missingInteger(vector<int>& nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); ++i) {\n            if (i > 0 && nums[i] != nums[i - 1] + 1) {\n                break;\n            }\n            sum += nums[i];\n        }\n        for (int i = sum + 1; i <= 50; ++i) {\n            if (find(nums.begin(), nums.end(), i) == nums.end()) {\n                return i;\n            }\n        }\n        return 51;\n    }\n};\n", "compare_result": "0100001100000001100101000000010011000000000100000000010000000100010100000100001000000001101100000001000100000000101100000110001100001110100110000001100100000001100000001010000000001000000000001100000110000000000000100110000001100000000100000000001000110000000100000100100000010010000010010101000000000001111111011111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111011111111111111111011111111111111111111111111111111111111100001000000000000000000000000000000000000001000000000000000000000000000000000001000000000000000000001000001111101", "title_slug": "smallest-missing-integer-greater-than-sequential-prefix-sum", "has_notes": false, "flag_type": 1}, {"id": 1360430348, "question_id": 3242, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723994694, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1360430348/", "is_pending": "Not Pending", "title": "Count Elements With Maximum Frequency", "memory": "23.8 MB", "code": "\nclass Solution {\npublic:\n    int maxFrequencyElements(vector<int>& nums) {\n        unordered_map<int, int> freq;\n        int maxFreq = 0, count = 0;\n        \n        for(int num : nums) {\n            freq[num]++;\n            if(freq[num] > maxFreq) {\n                maxFreq = freq[num];\n                count = 1;\n            } else if(freq[num] == maxFreq) {\n                count++;\n            }\n        }\n        \n        return count * maxFreq;\n    }\n};\n", "compare_resulttitle_slug": "count-elements-with-maximum-frequency", "has_notes": false, "flag_type": 1}, {"id": 1360430127, "question_id": 3246, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723994679, "status": 10, "status_display": "Accepted", "runtime": "11 ms", "url": "/submissions/detail/1360430127/", "is_pending": "Not Pending", "title": "Check if Bitwise OR Has Trailing Zeros", "memory": "28.5 MB", "code": "\nclass Solution {\npublic:\n    bool hasTrailingZeros(vector<int>& nums) {\n        for(int i = 0; i < nums.size(); i++) {\n            for(int j = i + 1; j < nums.size(); j++) {\n                if((nums[i] | nums[j]) % 2 == 0) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "check-if-bitwise-or-has-trailing-zeros", "has_notes": false, "flag_type": 1}, {"id": 1360429936, "question_id": 3251, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723994667, "status": 10, "status_display": "Accepted", "runtime": "15 ms", "url": "/submissions/detail/1360429936/", "is_pending": "Not Pending", "title": "Maximum Area of Longest Diagonal Rectangle", "memory": "29.3 MB", "code": "\n#include <cmath>\n\nclass Solution {\npublic:\n    int areaOfMaxDiagonal(vector<vector<int>>& dimensions) {\n        double maxDiagonal = 0;\n        int maxArea = 0;\n        for (auto& dimension : dimensions) {\n            double diagonal = sqrt(dimension[0] * dimension[0] + dimension[1] * dimension[1]);\n            int area = dimension[0] * dimension[1];\n            if (diagonal > maxDiagonal || (diagonal == maxDiagonal && area > maxArea)) {\n                maxDiagonal = diagonal;\n                maxArea = area;\n            }\n        }\n        return maxArea;\n    }\n};\n", "compare_resulttitle_slug": "maximum-area-of-longest-diagonal-rectangle", "has_notes": false, "flag_type": 1}, {"id": 1360429633, "question_id": 3252, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723994649, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360429633/", "is_pending": "Not Pending", "title": "Count the Number of Incremovable Subarrays I", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    int incremovableSubarrayCount(vector<int>& nums) {\n        int n = nums.size();\n        vector<int> left(n), right(n);\n        left[0] = 1;\n        for (int i = 1; i < n; ++i) {\n            left[i] = nums[i] > nums[i - 1] ? left[i - 1] + 1 : 1;\n        }\n        right[n - 1] = 1;\n        for (int i = n - 2; i >= 0; --i) {\n            right[i] = nums[i] < nums[i + 1] ? right[i + 1] + 1 : 1;\n        }\n        int res = n;\n        for (int i = 1; i < n - 1; ++i) {\n            if (nums[i - 1] < nums[i + 1]) {\n                res += min(left[i - 1], right[i + 1]);\n            }\n        }\n        return res;\n    }\n};\n", "compare_result": "000111111111100000000000000000000000000000000000000000001100101110100000001010111111111000100100000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "title_slug": "count-the-number-of-incremovable-subarrays-i", "has_notes": false, "flag_type": 1}, {"id": 1360429318, "question_id": 3263, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723994630, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360429318/", "is_pending": "Not Pending", "title": "Divide an Array Into Subarrays With Minimum Cost I", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    int minimumCost(vector<int>& nums) {\n        int n = nums.size();\n        vector<vector<int>> dp(n, vector<int>(4, INT_MAX));\n        dp[0][1] = nums[0];\n        for(int i = 1; i < n; i++) {\n            dp[i][1] = min(dp[i-1][1], nums[i]);\n            for(int j = 2; j <= 3; j++) {\n                if(i >= j-1) {\n                    dp[i][j] = min(dp[i-1][j], dp[i-1][j-1] + nums[i]);\n                }\n            }\n        }\n        return dp[n-1][3];\n    }\n};\n", "compare_resulttitle_slug": "divide-an-array-into-subarrays-with-minimum-cost-i", "has_notes": false, "flag_type": 1}, {"id": 1360428985, "question_id": 3275, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723994610, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360428985/", "is_pending": "Not Pending", "title": "Minimum Number of Pushes to Type Word I", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    int minimumPushes(string word) {\n        vector<int> freq(26, 0);\n        for (char c : word) {\n            freq[c - 'a']++;\n        }\n        sort(freq.begin(), freq.end(), greater<int>());\n        int res = 0;\n        for (int i = 0; i < 26; ++i) {\n            res += freq[i] * (i % 3 + 1);\n        }\n        return res;\n    }\n};\n", "compare_result": "00111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "title_slug": "minimum-number-of-pushes-to-type-word-i", "has_notes": false, "flag_type": 1}, {"id": 1360428724, "question_id": 3309, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723994594, "status": 10, "status_display": "Accepted", "runtime": "11 ms", "url": "/submissions/detail/1360428724/", "is_pending": "Not Pending", "title": "Count Prefix and Suffix Pairs I", "memory": "24.4 MB", "code": "\nclass Solution {\npublic:\n    int countPrefixSuffixPairs(vector<string>& words) {\n        int count = 0;\n        for(int i = 0; i < words.size(); i++) {\n            for(int j = i + 1; j < words.size(); j++) {\n                if(isPrefixAndSuffix(words[i], words[j])) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n    \nprivate:\n    bool isPrefixAndSuffix(string& str1, string& str2) {\n        if(str1.size() > str2.size()) {\n            return false;\n        }\n        return str2.substr(0, str1.size()) == str1 && str2.substr(str2.size() - str1.size()) == str1;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "count-prefix-and-suffix-pairs-i", "has_notes": false, "flag_type": 1}, {"id": 1360428413, "question_id": 3311, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723994575, "status": 10, "status_display": "Accepted", "runtime": "6 ms", "url": "/submissions/detail/1360428413/", "is_pending": "Not Pending", "title": "Ant on the Boundary", "memory": "22.8 MB", "code": "\nclass Solution {\npublic:\n    int returnToBoundaryCount(vector<int>& nums) {\n        int position = 0;\n        int count = 0;\n        for(int i = 0; i < nums.size(); i++) {\n            position += nums[i];\n            if(position == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n};\n", "compare_resulttitle_slug": "ant-on-the-boundary", "has_notes": false, "flag_type": 1}, {"id": 1360428238, "question_id": 3312, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723994562, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1360428238/", "is_pending": "Not Pending", "title": "Number of Changing Keys", "memory": "8.7 MB", "code": "\nclass Solution {\npublic:\n    int countKeyChanges(string s) {\n        int count = 0;\n        for(int i = 1; i < s.length(); i++) {\n            if(tolower(s[i]) != tolower(s[i-1])) {\n                count++;\n            }\n        }\n        return count;\n    }\n};\n", "compare_resulttitle_slug": "number-of-changing-keys", "has_notes": false, "flag_type": 1}, {"id": 1360428012, "question_id": 3320, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723994548, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360428012/", "is_pending": "Not Pending", "title": "Maximum Number of Operations With the Same Score I", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    int maxOperations(vector<int>& nums) {\n        unordered_map<int, int> count;\n        for (int num : nums) {\n            count[num]++;\n        }\n        priority_queue<pair<int, int>> pq;\n        for (auto [num, freq] : count) {\n            pq.push({freq, num});\n        }\n        int maxOperations = 0, prevFreq = 0, prevNum = 0;\n        while (!pq.empty()) {\n            auto [freq, num] = pq.top(); pq.pop();\n            if (prevFreq > 0) {\n                prevFreq--;\n                maxOperations++;\n            } else if (!pq.empty()) {\n                auto [nextFreq, nextNum] = pq.top(); pq.pop();\n                if (nextFreq > 1) {\n                    pq.push({nextFreq - 1, nextNum});\n                }\n                maxOperations++;\n            }\n            prevFreq = freq - 1;\n            prevNum = num;\n        }\n        return maxOperations;\n    }\n};\n", "compare_result": "10110000010000001101100000100001000000000111010001000011010100001001000010101000001100011000100100000000000110101110010011001001110000100100001000000011011110001000001100000000110001000010011100111000100001101110001001000101001011101101100111010010001110001001101100000101110100010010100001000000010100110001100110000100011000010000100110000001000100100000001111011100010010001111011001000000000001101111011000010101100101001010101001001100001101000001110010000000001100110110000010000010100011010100000000000000000000000000000000001001000000000000000000001", "title_slug": "maximum-number-of-operations-with-the-same-score-i", "has_notes": false, "flag_type": 1}, {"id": 1360427723, "question_id": 3321, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723994529, "status": 10, "status_display": "Accepted", "runtime": "4 ms", "url": "/submissions/detail/1360427723/", "is_pending": "Not Pending", "title": "Type of Triangle", "memory": "22.5 MB", "code": "\nclass Solution {\npublic:\n    string triangleType(vector<int>& nums) {\n        sort(nums.begin(), nums.end());\n        if(nums[0] + nums[1] <= nums[2]) {\n            return \"none\";\n        }\n        else if(nums[0] == nums[1] && nums[1] == nums[2]) {\n            return \"equilateral\";\n        }\n        else if(nums[0] == nums[1] || nums[1] == nums[2]) {\n            return \"isosceles\";\n        }\n        else {\n            return \"scalene\";\n        }\n    }\n};\n", "compare_resulttitle_slug": "type-of-triangle", "has_notes": false, "flag_type": 1}, {"id": 1360427446, "question_id": 3324, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723994512, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360427446/", "is_pending": "Not Pending", "title": "Split the Array", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    bool isPossibleToSplit(vector<int>& nums) {\n        unordered_map<int, int> count;\n        for (int num : nums) {\n            count[num]++;\n        }\n        int maxCount = 0;\n        for (auto it : count) {\n            maxCount = max(maxCount, it.second);\n        }\n        return maxCount <= nums.size() / 2;\n    }\n};\n", "compare_resulttitle_slug": "split-the-array", "has_notes": false, "flag_type": 1}, {"id": 1360427224, "question_id": 3330, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723994498, "status": 10, "status_display": "Accepted", "runtime": "14 ms", "url": "/submissions/detail/1360427224/", "is_pending": "Not Pending", "title": "Modify the Matrix", "memory": "22.5 MB", "code": "\nclass Solution {\npublic:\n    vector<vector<int>> modifiedMatrix(vector<vector<int>>& matrix) {\n        int m = matrix.size();\n        int n = matrix[0].size();\n        vector<int> maxInColumn(n, INT_MIN);\n        \n        // Find the maximum element in each column\n        for(int j = 0; j < n; j++) {\n            for(int i = 0; i < m; i++) {\n                if(matrix[i][j] != -1) {\n                    maxInColumn[j] = max(maxInColumn[j], matrix[i][j]);\n                }\n            }\n        }\n        \n        // Replace -1 with the maximum element in its respective column\n        for(int i = 0; i < m; i++) {\n            for(int j = 0; j < n; j++) {\n                if(matrix[i][j] == -1) {\n                    matrix[i][j] = maxInColumn[j];\n                }\n            }\n        }\n        \n        return matrix;\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "modify-the-matrix", "has_notes": false, "flag_type": 1}, {"id": 1360426940, "question_id": 3331, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723994480, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1360426940/", "is_pending": "Not Pending", "title": "Minimum Operations to Exceed Threshold Value I", "memory": "24.4 MB", "code": "\nclass Solution {\npublic:\n    int minOperations(vector<int>& nums, int k) {\n        int count = 0;\n        sort(nums.begin(), nums.end());\n        for(int i = 0; i < nums.size(); i++) {\n            if(nums[i] < k) {\n                count++;\n            } else {\n                break;\n            }\n        }\n        return count;\n    }\n};\n", "compare_resulttitle_slug": "minimum-operations-to-exceed-threshold-value-i", "has_notes": false, "flag_type": 1}, {"id": 1360426741, "question_id": 3334, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723994467, "status": 10, "status_display": "Accepted", "runtime": "12 ms", "url": "/submissions/detail/1360426741/", "is_pending": "Not Pending", "title": "Apple Redistribution into Boxes", "memory": "32.7 MB", "code": "\nclass Solution {\npublic:\n    int minimumBoxes(vector<int>& apple, vector<int>& capacity) {\n        sort(capacity.begin(), capacity.end(), greater<int>());\n        int total_apples = accumulate(apple.begin(), apple.end(), 0);\n        int total_boxes = 0;\n        for (int i = 0; i < capacity.size(); i++) {\n            total_apples -= capacity[i];\n            total_boxes++;\n            if (total_apples <= 0) {\n                break;\n            }\n        }\n        return total_boxes;\n    }\n};\n", "compare_resulttitle_slug": "apple-redistribution-into-boxes", "has_notes": false, "flag_type": 1}, {"id": 1360426472, "question_id": 3347, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723994450, "status": 10, "status_display": "Accepted", "runtime": "11 ms", "url": "/submissions/detail/1360426472/", "is_pending": "Not Pending", "title": "Distribute Elements Into Two Arrays I", "memory": "23.3 MB", "code": "\nclass Solution {\npublic:\n    vector<int> resultArray(vector<int>& nums) {\n        vector<int> arr1, arr2;\n        arr1.push_back(nums[0]);\n        arr2.push_back(nums[1]);\n        for(int i=2; i<nums.size(); i++){\n            if(arr1.back() > arr2.back()){\n                arr1.push_back(nums[i]);\n            }else{\n                arr2.push_back(nums[i]);\n            }\n        }\n        arr1.insert(arr1.end(), arr2.begin(), arr2.end());\n        return arr1;\n    }\n};\n", "compare_resulttitle_slug": "distribute-elements-into-two-arrays-i", "has_notes": false, "flag_type": 1}, {"id": 1360426245, "question_id": 3349, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723994435, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360426245/", "is_pending": "Not Pending", "title": "Maximum Length Substring With Two Occurrences", "memory": "8.8 MB", "code": "\nclass Solution {\npublic:\n    int maximumLengthSubstring(string s) {\n        int n = s.size();\n        vector<int> count(26, 0);\n        int max_len = 0, start = 0;\n        \n        for(int end = 0; end < n; end++) {\n            count[s[end] - 'a']++;\n            \n            while(count[s[end] - 'a'] > 2) {\n                count[s[start] - 'a']--;\n                start++;\n            }\n            \n            max_len = max(max_len, end - start + 1);\n        }\n        \n        return max_len;\n    }\n};\n", "compare_resulttitle_slug": "maximum-length-substring-with-two-occurrences", "has_notes": false, "flag_type": 1}, {"id": 1360426027, "question_id": 3353, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723994421, "status": 10, "status_display": "Accepted", "runtime": "5 ms", "url": "/submissions/detail/1360426027/", "is_pending": "Not Pending", "title": "Existence of a Substring in a String and Its Reverse", "memory": "10.7 MB", "code": "\nclass Solution {\npublic:\n    bool isSubstringPresent(string s) {\n        string rev = s;\n        reverse(rev.begin(), rev.end());\n        unordered_set<string> substrings;\n        for(int i = 0; i < s.size() - 1; i++) {\n            substrings.insert(s.substr(i, 2));\n        }\n        for(int i = 0; i < rev.size() - 1; i++) {\n            if(substrings.count(rev.substr(i, 2))) {\n                return true;\n            }\n        }\n        return false;\n    }\n};\n", "compare_resulttitle_slug": "existence-of-a-substring-in-a-string-and-its-reverse", "has_notes": false, "flag_type": 1}, {"id": 1360425808, "question_id": 3361, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723994405, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360425808/", "is_pending": "Not Pending", "title": "Latest Time You Can Obtain After Replacing Characters", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    string findLatestTime(string s) {\n        if(s[0] == '?'){\n            if(s[1] == '?' || s[1] <= '3')\n                s[0] = '1';\n            else\n                s[0] = '0';\n        }\n        if(s[1] == '?'){\n            if(s[0] == '1')\n                s[1] = '9';\n            else\n                s[1] = '1';\n        }\n        if(s[3] == '?')\n            s[3] = '5';\n        if(s[4] == '?')\n            s[4] = '9';\n        return s;\n    }\n};\n", "compare_resulttitle_slug": "latest-time-you-can-obtain-after-replacing-characters", "has_notes": false, "flag_type": 1}, {"id": 1360425564, "question_id": 3367, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723994389, "status": 10, "status_display": "Accepted", "runtime": "7 ms", "url": "/submissions/detail/1360425564/", "is_pending": "Not Pending", "title": "Find the Sum of Encrypted Integers", "memory": "27.4 MB", "code": "\nclass Solution {\npublic:\n    int sumOfEncryptedInt(vector<int>& nums) {\n        int sum = 0;\n        for (int num : nums) {\n            int maxDigit = 0;\n            int temp = num;\n            while (temp > 0) {\n                maxDigit = max(maxDigit, temp % 10);\n                temp /= 10;\n            }\n            int encryptedNum = 0;\n            temp = num;\n            while (temp > 0) {\n                encryptedNum = encryptedNum * 10 + maxDigit;\n                temp /= 10;\n            }\n            sum += encryptedNum;\n        }\n        return sum;\n    }\n};\n", "compare_resulttitle_slug": "find-the-sum-of-encrypted-integers", "has_notes": false, "flag_type": 1}, {"id": 1360425320, "question_id": 3371, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723994373, "status": 10, "status_display": "Accepted", "runtime": "2 ms", "url": "/submissions/detail/1360425320/", "is_pending": "Not Pending", "title": "Harshad Number", "memory": "7.5 MB", "code": "\nclass Solution {\npublic:\n    int sumOfTheDigitsOfHarshadNumber(int x) {\n        int sum = 0, temp = x;\n        while(temp > 0) {\n            sum += temp % 10;\n            temp /= 10;\n        }\n        if(x % sum == 0) {\n            return sum;\n        } else {\n            return -1;\n        }\n    }\n};\n", "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "harshad-number", "has_notes": false, "flag_type": 1}, {"id": 1360425148, "question_id": 3372, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723994360, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360425148/", "is_pending": "Not Pending", "title": "Longest Strictly Increasing or Strictly Decreasing Subarray", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    int longestMonotonicSubarray(vector<int>& nums) {\n        int n = nums.size();\n        int inc = 1, dec = 1, max_len = 1;\n        for(int i = 1; i < n; i++) {\n            if(nums[i] > nums[i-1]) {\n                inc = dec + 1;\n                dec = 1;\n            } else if(nums[i] < nums[i-1]) {\n                dec = inc + 1;\n                inc = 1;\n            } else {\n                inc = 1;\n                dec = 1;\n            }\n            max_len = max(max_len, max(inc, dec));\n        }\n        return max_len;\n    }\n};\n", "compare_resulttitle_slug": "longest-strictly-increasing-or-strictly-decreasing-subarray", "has_notes": false, "flag_type": 1}, {"id": 1360424869, "question_id": 3379, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723994343, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360424869/", "is_pending": "Not Pending", "title": "Score of a String", "memory": "8.3 MB", "code": "\nclass Solution {\npublic:\n    int scoreOfString(string s) {\n        int score = 0;\n        for(int i = 0; i < s.length() - 1; i++) {\n            score += abs(s[i] - s[i+1]);\n        }\n        return score;\n    }\n};\n", "compare_resulttitle_slug": "score-of-a-string", "has_notes": false, "flag_type": 1}, {"id": 1360424661, "question_id": 3381, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723994330, "status": 10, "status_display": "Accepted", "runtime": "12 ms", "url": "/submissions/detail/1360424661/", "is_pending": "Not Pending", "title": "Shortest Subarray With OR at Least K I", "memory": "26.4 MB", "code": "\nclass Solution {\npublic:\n    int minimumSubarrayLength(vector<int>& nums, int k) {\n        int n = nums.size();\n        int ans = n + 1;\n        for (int i = 0; i < n; ++i) {\n            int sum = 0;\n            for (int j = i; j < n; ++j) {\n                sum |= nums[j];\n                if (sum >= k) {\n                    ans = min(ans, j - i + 1);\n                    break;\n                }\n            }\n        }\n        return ans == n + 1 ? -1 : ans;\n    }\n};\n", "compare_resulttitle_slug": "shortest-subarray-with-or-at-least-k-i", "has_notes": false, "flag_type": 1}, {"id": 1360424417, "question_id": 3396, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723994313, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360424417/", "is_pending": "Not Pending", "title": "Valid Word", "memory": "7.8 MB", "code": "\nclass Solution {\npublic:\n    bool isValid(string word) {\n        if(word.size() < 3) return false;\n        \n        bool vowel = false, consonant = false;\n        for(char c : word) {\n            if((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {\n                if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || \n                   c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n                    vowel = true;\n                } else {\n                    consonant = true;\n                }\n            } else if(c >= '0' && c <= '9') {\n                continue;\n            } else {\n                return false;\n            }\n        }\n        \n        return vowel && consonant;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "valid-word", "has_notes": false, "flag_type": 1}, {"id": 1360424081, "question_id": 3397, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723994293, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360424081/", "is_pending": "Not Pending", "title": "Find the Integer Added to Array I", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    int addedInteger(vector<int>& nums1, vector<int>& nums2) {\n        return nums2[0] - nums1[0];\n    }\n};\n", "compare_result": "01100000010001001011111001100101100010001000010001110011001110000000000000001101001010000000000000010000011111111000000000101100000111010110110000010110010000000010001100110101100001001110100100000010000111010000001000000100000010010000110100001100110010000001101100010010100110110000010111100110000100010001000010000101000111011000110000000001010000100110000011000111001100000000000001001001001001000010000001000000001001001000000010001001000010100000000000100000001100100000000000001100001001000001001000000000000000000000000000000000000000000000000000000100000000000000000000000000000001000000000000011", "title_slug": "find-the-integer-added-to-array-i", "has_notes": false, "flag_type": 1}, {"id": 1360423875, "question_id": 3398, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723994280, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360423875/", "is_pending": "Not Pending", "title": "Make a Square with the Same Color", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    bool canMakeSquare(vector<vector<char>>& grid) {\n        for (int i = 0; i < 2; ++i) {\n            for (int j = 0; j < 2; ++j) {\n                int white = 0;\n                for (int x = i; x < i + 2; ++x) {\n                    for (int y = j; y < j + 2; ++y) {\n                        if (grid[x][y] == 'W') {\n                            ++white;\n                        }\n                    }\n                }\n                if (white != 1 && white != 3) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n};\n", "compare_result": "10111111111111111110111111011111111111111110111111011111111011111111111111111111111111111111011110110111101111111111011111111111111110110111111111111011011111111111111111111011011111111111101101111111111111001111111111111111111111011111111111111100111111111111111111111100111111111111111011111111111111111111110011111111111110110111111111111011011111111111111111111011011111111111101101111111111111111011111111110111101101111011111111111111111111111111111111011111111011111101111111111111111011111101111111111111111", "title_slug": "make-a-square-with-the-same-color", "has_notes": false, "flag_type": 1}, {"id": 1360423601, "question_id": 3408, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723994263, "status": 10, "status_display": "Accepted", "runtime": "6 ms", "url": "/submissions/detail/1360423601/", "is_pending": "Not Pending", "title": "Count the Number of Special Characters I", "memory": "9.3 MB", "code": "\nclass Solution {\npublic:\n    int numberOfSpecialChars(string word) {\n        vector<int> lower(26, 0), upper(26, 0);\n        for (char c : word) {\n            if (islower(c)) lower[c - 'a']++;\n            else upper[c - 'A']++;\n        }\n        int count = 0;\n        for (int i = 0; i < 26; i++) {\n            if (lower[i] > 0 && upper[i] > 0) count++;\n        }\n        return count;\n    }\n};\n", "compare_resulttitle_slug": "count-the-number-of-special-characters-i", "has_notes": false, "flag_type": 1}, {"id": 1360423333, "question_id": 3412, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723994246, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360423333/", "is_pending": "Not Pending", "title": "Permutation Difference between Two Strings", "memory": "9.1 MB", "code": "\nclass Solution {\npublic:\n    int findPermutationDifference(string s, string t) {\n        int diff = 0;\n        for(int i = 0; i < s.size(); i++) {\n            for(int j = 0; j < t.size(); j++) {\n                if(s[i] == t[j]) {\n                    diff += abs(i - j);\n                    break;\n                }\n            }\n        }\n        return diff;\n    }\n};\n", "compare_resulttitle_slug": "permutation-difference-between-two-strings", "has_notes": false, "flag_type": 1}, {"id": 1360423124, "question_id": 3415, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723994232, "status": 10, "status_display": "Accepted", "runtime": "23 ms", "url": "/submissions/detail/1360423124/", "is_pending": "Not Pending", "title": "Check if Grid Satisfies Conditions", "memory": "29 MB", "code": "\nclass Solution {\npublic:\n    bool satisfiesConditions(vector<vector<int>>& grid) {\n        int m = grid.size();\n        int n = grid[0].size();\n        \n        for(int i = 0; i < m; i++) {\n            for(int j = 0; j < n; j++) {\n                if(i < m - 1 && grid[i][j] != grid[i + 1][j]) {\n                    return false;\n                }\n                if(j < n - 1 && grid[i][j] == grid[i][j + 1]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n};\n", "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "check-if-grid-satisfies-conditions", "has_notes": false, "flag_type": 1}, {"id": 1360422892, "question_id": 3421, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723994216, "status": 10, "status_display": "Accepted", "runtime": "3 ms", "url": "/submissions/detail/1360422892/", "is_pending": "Not Pending", "title": "Count Pairs That Form a Complete Day I", "memory": "23.2 MB", "code": "\nclass Solution {\npublic:\n    int countCompleteDayPairs(vector<int>& hours) {\n        int count = 0;\n        for(int i = 0; i < hours.size(); i++) {\n            for(int j = i + 1; j < hours.size(); j++) {\n                if((hours[i] + hours[j]) % 24 == 0) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n};\n", "compare_resulttitle_slug": "count-pairs-that-form-a-complete-day-i", "has_notes": false, "flag_type": 1}, {"id": 1360422666, "question_id": 3426, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723994202, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360422666/", "is_pending": "Not Pending", "title": "Minimum Number of Chairs in a Waiting Room", "memory": "8.7 MB", "code": "\nclass Solution {\npublic:\n    int minimumChairs(string s) {\n        int chairs = 0, people = 0;\n        for (char c : s) {\n            if (c == 'E') {\n                people++;\n                if (people > chairs) {\n                    chairs = people;\n                }\n            } else if (c == 'L') {\n                people--;\n            }\n        }\n        return chairs;\n    }\n};\n", "compare_resulttitle_slug": "minimum-number-of-chairs-in-a-waiting-room", "has_notes": false, "flag_type": 1}, {"id": 1360422456, "question_id": 3428, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723994187, "status": 10, "status_display": "Accepted", "runtime": "9 ms", "url": "/submissions/detail/1360422456/", "is_pending": "Not Pending", "title": "Find the XOR of Numbers Which Appear Twice", "memory": "28.7 MB", "code": "\nclass Solution {\npublic:\n    int duplicateNumbersXOR(vector<int>& nums) {\n        unordered_map<int, int> count;\n        int result = 0;\n        for (int num : nums) {\n            count[num]++;\n        }\n        for (auto& pair : count) {\n            if (pair.second == 2) {\n                result ^= pair.first;\n            }\n        }\n        return result;\n    }\n};\n", "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "title_slug": "find-the-xor-of-numbers-which-appear-twice", "has_notes": false, "flag_type": 1}, {"id": 1360422219, "question_id": 3429, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723994171, "status": 10, "status_display": "Accepted", "runtime": "8 ms", "url": "/submissions/detail/1360422219/", "is_pending": "Not Pending", "title": "Special Array I", "memory": "27 MB", "code": "\nclass Solution {\npublic:\n    bool isArraySpecial(vector<int>& nums) {\n        for(int i = 0; i < nums.size() - 1; i++) {\n            if(nums[i] % 2 == nums[i + 1] % 2) {\n                return false;\n            }\n        }\n        return true;\n    }\n};\n", "compare_resulttitle_slug": "special-array-i", "has_notes": false, "flag_type": 1}, {"id": 1360421980, "question_id": 3446, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723994157, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360421980/", "is_pending": "Not Pending", "title": "Find the Number of Good Pairs I", "memory": "41.8 MB", "code": "\nclass Solution {\npublic:\n    int numberOfPairs(vector<int>& nums1, vector<int>& nums2, int k) {\n        int count = 0;\n        for(int i = 0; i < nums1.size(); i++) {\n            for(int j = 0; j < nums2.size(); j++) {\n                if(nums1[i] % (nums2[j] * k) == 0) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n};\n", "compare_resulttitle_slug": "find-the-number-of-good-pairs-i", "has_notes": false, "flag_type": 1}, {"id": 1360421789, "question_id": 3447, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723994143, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360421789/", "is_pending": "Not Pending", "title": "Clear Digits", "memory": "9.2 MB", "code": "\nclass Solution {\npublic:\n    string clearDigits(string s) {\n        stack<char> st;\n        for (char c : s) {\n            if (isdigit(c)) {\n                if (!st.empty()) {\n                    st.pop();\n                }\n            } else {\n                st.push(c);\n            }\n        }\n        string res = \"\";\n        while (!st.empty()) {\n            res = st.top() + res;\n            st.pop();\n        }\n        return res;\n    }\n};\n", "compare_resulttitle_slug": "clear-digits", "has_notes": false, "flag_type": 1}, {"id": 1360421585, "question_id": 3450, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723994129, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360421585/", "is_pending": "Not Pending", "title": "Find the Child Who Has the Ball After K Seconds", "memory": "8.2 MB", "code": "\nclass Solution {\npublic:\n    int numberOfChild(int n, int k) {\n        int pos = 0;\n        int direction = 1;\n        for(int i = 0; i < k; i++){\n            pos += direction;\n            if(pos == 0 || pos == n - 1){\n                direction *= -1;\n            }\n        }\n        return pos;\n    }\n};\n", "compare_resulttitle_slug": "find-the-child-who-has-the-ball-after-k-seconds", "has_notes": false, "flag_type": 1}, {"id": 1360421383, "question_id": 3463, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723994116, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360421383/", "is_pending": "Not Pending", "title": "Alternating Groups I", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    int numberOfAlternatingGroups(vector<int>& colors) {\n        int n = colors.size();\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (colors[i] != colors[(i+1)%n] && colors[i] != colors[(i+2)%n] && colors[(i+1)%n] == colors[(i+2)%n]) {\n                count++;\n            }\n        }\n        return count;\n    }\n};\n", "compare_resulttitle_slug": "alternating-groups-i", "has_notes": false, "flag_type": 1}, {"id": 1360421155, "question_id": 3468, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723994100, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360421155/", "is_pending": "Not Pending", "title": "Find the Encrypted String", "memory": "8.3 MB", "code": "\nclass Solution {\npublic:\n    string getEncryptedString(string s, int k) {\n        int n = s.size();\n        k = k % n;\n        string res = s;\n        for(int i = 0; i < n; i++) {\n            res[i] = s[(i + k) % n];\n        }\n        return res;\n    }\n};\n", "compare_resulttitle_slug": "find-the-encrypted-string", "has_notes": false, "flag_type": 1}, {"id": 1360420941, "question_id": 3469, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723994087, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360420941/", "is_pending": "Not Pending", "title": "Maximum Height of a Triangle", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    int maxHeightOfTriangle(int red, int blue) {\n        int l = 0, r = 200;\n        while (l < r) {\n            int mid = (l + r + 1) / 2;\n            if (mid * (mid + 1) / 2 <= red + blue && mid * (mid + 1) / 4 <= min(red, blue)) {\n                l = mid;\n            } else {\n                r = mid - 1;\n            }\n        }\n        return l;\n    }\n};\n", "compare_resulttitle_slug": "maximum-height-of-a-triangle", "has_notes": false, "flag_type": 1}, {"id": 1360420719, "question_id": 3471, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723994072, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360420719/", "is_pending": "Not Pending", "title": "Minimum Average of Smallest and Largest Elements", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    double minimumAverage(vector<int>& nums) {\n        priority_queue<double, vector<double>, greater<double>> minHeap;\n        priority_queue<double> maxHeap;\n        for (int num : nums) {\n            minHeap.push(num);\n            maxHeap.push(num);\n        }\n        vector<double> averages;\n        while (!minHeap.empty()) {\n            double minElement = minHeap.top();\n            minHeap.pop();\n            double maxElement = maxHeap.top();\n            maxHeap.pop();\n            while (!minHeap.empty() && minHeap.top() == minElement) {\n                minHeap.pop();\n            }\n            while (!maxHeap.empty() && maxHeap.top() == maxElement) {\n                maxHeap.pop();\n            }\n            averages.push_back((minElement + maxElement) / 2.0);\n        }\n        return *min_element(averages.begin(), averages.end());\n    }\n};\n", "compare_resulttitle_slug": "minimum-average-of-smallest-and-largest-elements", "has_notes": false, "flag_type": 1}, {"id": 1360420427, "question_id": 3476, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723994053, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360420427/", "is_pending": "Not Pending", "title": "Find Minimum Operations to Make All Elements Divisible by Three", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    int minimumOperations(vector<int>& nums) {\n        vector<int> cnt(3, 0);\n        for (int num : nums) {\n            cnt[num % 3]++;\n        }\n        int res = 0;\n        while (cnt[1] > 0 && cnt[2] > 0) {\n            cnt[1]--;\n            cnt[2]--;\n            res += 2;\n        }\n        if (cnt[1] > 0) {\n            res += cnt[1] / 3 * 2;\n            if (cnt[1] % 3 != 0) {\n                res += 2;\n            }\n        }\n        if (cnt[2] > 0) {\n            res += cnt[2] / 3 * 2;\n            if (cnt[2] % 3 != 0) {\n                res += 2;\n            }\n        }\n        return res;\n    }\n};\n", "compare_result": "011000001011010101010100100010010000001100110011101110100011111011100100000101110000101100110100000111110111001000110010001000001111001001100010101000011100001011110110001101000111011111101000101001101101101010000111101101010001011000101000101000001101001110001001111101100110110100100101100000111011110100100001100111000100000001100001010011111000100111010111000010100001100010111111001001110011100011111101110001001011001011001011101011011100101001111110110010111001010011000001111001000110011101101100011011001011001011011001110100010010111100110100111110000001101010100010100111001000000010011100000011000100000010001011100101001110101010100011010010000011", "title_slug": "find-minimum-operations-to-make-all-elements-divisible-by-three", "has_notes": false, "flag_type": 1}, {"id": 1360420088, "question_id": 3484, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723994031, "status": 10, "status_display": "Accepted", "runtime": "0 ms", "url": "/submissions/detail/1360420088/", "is_pending": "Not Pending", "title": "Lexicographically Smallest String After a Swap", "memory": "8.2 MB", "code": "\nclass Solution {\npublic:\n    string getSmallestString(string s) {\n        int n = s.size();\n        for(int i = 0; i < n - 1; i++) {\n            if(s[i] % 2 == s[i + 1] % 2 && s[i] > s[i + 1]) {\n                swap(s[i], s[i + 1]);\n                break;\n            }\n        }\n        return s;\n    }\n};\n", "compare_resulttitle_slug": "lexicographically-smallest-string-after-a-swap", "has_notes": false, "flag_type": 1}, {"id": 1360419872, "question_id": 3508, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723994016, "status": 10, "status_display": "Accepted", "runtime": "4 ms", "url": "/submissions/detail/1360419872/", "is_pending": "Not Pending", "title": "Number of Bit Changes to Make Two Integers Equal", "memory": "8 MB", "code": "\nclass Solution {\npublic:\n    int minChanges(int n, int k) {\n        int changes = 0;\n        for (int i = 0; i < 31; ++i) {\n            bool bit_n = n & (1 << i);\n            bool bit_k = k & (1 << i);\n            if (bit_n && !bit_k) {\n                ++changes;\n            } else if (!bit_n && bit_k) {\n                return -1;\n            }\n        }\n        return changes;\n    }\n};\n", "compare_resulttitle_slug": "number-of-bit-changes-to-make-two-integers-equal", "has_notes": false, "flag_type": 1}, {"id": 1360419587, "question_id": 3511, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723993997, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360419587/", "is_pending": "Not Pending", "title": "Find the Winning Player in Coin Game", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    string losingPlayer(int x, int y) {\n        int total = x * 75 + y * 10;\n        if (total / 115 % 2 == 0) {\n            return \"Bob\";\n        } else {\n            return \"Alice\";\n        }\n    }\n};\n", "compare_resulttitle_slug": "find-the-winning-player-in-coin-game", "has_notes": false, "flag_type": 1}, {"id": 1360419301, "question_id": 3515, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723993979, "status": 10, "status_display": "Accepted", "runtime": "13 ms", "url": "/submissions/detail/1360419301/", "is_pending": "Not Pending", "title": "Find if Digit Game Can Be Won", "memory": "28 MB", "code": "\nclass Solution {\npublic:\n    bool canAliceWin(vector<int>& nums) {\n        int singleDigitSum = 0, doubleDigitSum = 0;\n        for(int i=0; i<nums.size(); i++){\n            if(nums[i] < 10)\n                singleDigitSum += nums[i];\n            else\n                doubleDigitSum += nums[i];\n        }\n        return max(singleDigitSum, doubleDigitSum) > min(singleDigitSum, doubleDigitSum);\n    }\n};\n", "compare_resulttitle_slug": "find-if-digit-game-can-be-won", "has_notes": false, "flag_type": 1}, {"id": 1360419078, "question_id": 3516, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723993964, "status": 10, "status_display": "Accepted", "runtime": "109 ms", "url": "/submissions/detail/1360419078/", "is_pending": "Not Pending", "title": "Design Neighbor Sum Service", "memory": "72.6 MB", "code": "\nclass NeighborSum {\npublic:\n    vector<vector<int>> grid;\n    unordered_map<int, pair<int, int>> pos;\n    int n;\n    \n    NeighborSum(vector<vector<int>>& grid) {\n        this->grid = grid;\n        this->n = grid.size();\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < n; j++) {\n                pos[grid[i][j]] = {i, j};\n            }\n        }\n    }\n    \n    int adjacentSum(int value) {\n        int sum = 0;\n        int x = pos[value].first;\n        int y = pos[value].second;\n        if(x > 0) sum += grid[x-1][y];\n        if(x < n-1) sum += grid[x+1][y];\n        if(y > 0) sum += grid[x][y-1];\n        if(y < n-1) sum += grid[x][y+1];\n        return sum;\n    }\n    \n    int diagonalSum(int value) {\n        int sum = 0;\n        int x = pos[value].first;\n        int y = pos[value].second;\n        if(x > 0 && y > 0) sum += grid[x-1][y-1];\n        if(x > 0 && y < n-1) sum += grid[x-1][y+1];\n        if(x < n-1 && y > 0) sum += grid[x+1][y-1];\n        if(x < n-1 && y < n-1) sum += grid[x+1][y+1];\n        return sum;\n    }\n};\n", "compare_resulttitle_slug": "design-neighbor-sum-service", "has_notes": false, "flag_type": 1}, {"id": 1360418750, "question_id": 3519, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723993942, "status": 10, "status_display": "Accepted", "runtime": "32 ms", "url": "/submissions/detail/1360418750/", "is_pending": "Not Pending", "title": "Find the Number of Winning Players", "memory": "39.3 MB", "code": "\nclass Solution {\npublic:\n    int winningPlayerCount(int n, vector<vector<int>>& pick) {\n        unordered_map<int, unordered_map<int, int>> playerColorCount;\n        for (auto& p : pick) {\n            playerColorCount[p[0]][p[1]]++;\n        }\n        int winners = 0;\n        for (int i = 0; i < n; i++) {\n            for (auto& colorCount : playerColorCount[i]) {\n                if (colorCount.second > i) {\n                    winners++;\n                    break;\n                }\n            }\n        }\n        return winners;\n    }\n};\n", "compare_resulttitle_slug": "find-the-number-of-winning-players", "has_notes": false, "flag_type": 1}, {"id": 1360418508, "question_id": 3533, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723993926, "status": 10, "status_display": "Accepted", "runtime": "7 ms", "url": "/submissions/detail/1360418508/", "is_pending": "Not Pending", "title": "Snake in Matrix", "memory": "35.2 MB", "code": "\nclass Solution {\npublic:\n    int finalPositionOfSnake(int n, vector<string>& commands) {\n        int x = 0, y = 0;\n        for (string command : commands) {\n            if (command == \"UP\") {\n                x--;\n            } else if (command == \"DOWN\") {\n                x++;\n            } else if (command == \"LEFT\") {\n                y--;\n            } else if (command == \"RIGHT\") {\n                y++;\n            }\n        }\n        return x * n + y;\n    }\n};\n", "compare_resulttitle_slug": "snake-in-matrix", "has_notes": false, "flag_type": 1}, {"id": 1360418238, "question_id": 3543, "lang": "cpp", "lang_name": "C++", "time": "5\u00c2\u00a0days, 3\u00c2\u00a0hours", "timestamp": 1723993911, "status": 11, "status_display": "Wrong Answer", "runtime": "N/A", "url": "/submissions/detail/1360418238/", "is_pending": "Not Pending", "title": "Count Substrings That Satisfy K-Constraint I", "memory": "N/A", "code": "\nclass Solution {\npublic:\n    int countKConstraintSubstrings(string s, int k) {\n        int n = s.size();\n        int count = 0;\n        for (int i = 0; i < n; ++i) {\n            int zeros = 0, ones = 0;\n            for (int j = i; j < n; ++j) {\n                if (s[j] == '0') ++zeros;\n                else ++ones;\n                if (zeros > k || ones > k) break;\n                ++count;\n            }\n        }\n        return count;\n    }\n};\n", "compare_resulttitle_slug": "count-substrings-that-satisfy-k-constraint-i", "has_notes": false, "flag_type": 1}]